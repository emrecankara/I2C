
DS3231_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f8  08007338  08007338  00017338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007630  08007630  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007630  08007630  00017630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007638  08007638  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007638  08007638  00017638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  200001dc  0800781c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  0800781c  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000832c  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014cc  00000000  00000000  00028538  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000740  00000000  00000000  00029a08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  0002a148  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020212  00000000  00000000  0002a7f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b87  00000000  00000000  0004aa0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1eb1  00000000  00000000  00051591  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00113442  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a60  00000000  00000000  001134c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800731c 	.word	0x0800731c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800731c 	.word	0x0800731c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}

int bcdToDec(uint8_t val)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000f92:	79fb      	ldrb	r3, [r7, #7]
 8000f94:	091b      	lsrs	r3, r3, #4
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	4413      	add	r3, r2
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000fbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fc2:	9302      	str	r3, [sp, #8]
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	9301      	str	r3, [sp, #4]
 8000fc8:	463b      	mov	r3, r7
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	21d0      	movs	r1, #208	; 0xd0
 8000fd2:	481f      	ldr	r0, [pc, #124]	; (8001050 <Get_Time+0x98>)
 8000fd4:	f001 f93e 	bl	8002254 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000fd8:	783b      	ldrb	r3, [r7, #0]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff ffd4 	bl	8000f88 <bcdToDec>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	b2da      	uxtb	r2, r3
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <Get_Time+0x9c>)
 8000fe6:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ffcc 	bl	8000f88 <bcdToDec>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b17      	ldr	r3, [pc, #92]	; (8001054 <Get_Time+0x9c>)
 8000ff6:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000ff8:	78bb      	ldrb	r3, [r7, #2]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ffc4 	bl	8000f88 <bcdToDec>
 8001000:	4603      	mov	r3, r0
 8001002:	b2da      	uxtb	r2, r3
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <Get_Time+0x9c>)
 8001006:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ffbc 	bl	8000f88 <bcdToDec>
 8001010:	4603      	mov	r3, r0
 8001012:	b2da      	uxtb	r2, r3
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <Get_Time+0x9c>)
 8001016:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8001018:	793b      	ldrb	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ffb4 	bl	8000f88 <bcdToDec>
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <Get_Time+0x9c>)
 8001026:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff ffac 	bl	8000f88 <bcdToDec>
 8001030:	4603      	mov	r3, r0
 8001032:	b2da      	uxtb	r2, r3
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <Get_Time+0x9c>)
 8001036:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ffa4 	bl	8000f88 <bcdToDec>
 8001040:	4603      	mov	r3, r0
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <Get_Time+0x9c>)
 8001046:	719a      	strb	r2, [r3, #6]
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000204 	.word	0x20000204
 8001054:	2000026c 	.word	0x2000026c

08001058 <Get_Temp>:

float Get_Temp (void)
{
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af04      	add	r7, sp, #16
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x11, 1, temp, 2, 1000);
 800105e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001062:	9302      	str	r3, [sp, #8]
 8001064:	2302      	movs	r3, #2
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	2301      	movs	r3, #1
 800106e:	2211      	movs	r2, #17
 8001070:	21d0      	movs	r1, #208	; 0xd0
 8001072:	4814      	ldr	r0, [pc, #80]	; (80010c4 <Get_Temp+0x6c>)
 8001074:	f001 f8ee 	bl	8002254 <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 8001078:	793b      	ldrb	r3, [r7, #4]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa52 	bl	8000524 <__aeabi_i2d>
 8001080:	4604      	mov	r4, r0
 8001082:	460d      	mov	r5, r1
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	099b      	lsrs	r3, r3, #6
 8001088:	b2db      	uxtb	r3, r3
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff fa4a 	bl	8000524 <__aeabi_i2d>
 8001090:	f04f 0200 	mov.w	r2, #0
 8001094:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <Get_Temp+0x70>)
 8001096:	f7ff fbd9 	bl	800084c <__aeabi_ddiv>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff f8f3 	bl	800028c <__adddf3>
 80010a6:	4603      	mov	r3, r0
 80010a8:	460c      	mov	r4, r1
 80010aa:	4618      	mov	r0, r3
 80010ac:	4621      	mov	r1, r4
 80010ae:	f7ff fd9b 	bl	8000be8 <__aeabi_d2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	ee07 3a90 	vmov	s15, r3
}
 80010b8:	eeb0 0a67 	vmov.f32	s0, s15
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdb0      	pop	{r4, r5, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000204 	.word	0x20000204
 80010c8:	40100000 	.word	0x40100000

080010cc <force_temp_conv>:

void force_temp_conv (void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af04      	add	r7, sp, #16
	uint8_t status=0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0F, 1, &status, 1, 100);
 80010da:	2364      	movs	r3, #100	; 0x64
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	1dfb      	adds	r3, r7, #7
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	2301      	movs	r3, #1
 80010e8:	220f      	movs	r2, #15
 80010ea:	21d0      	movs	r1, #208	; 0xd0
 80010ec:	4813      	ldr	r0, [pc, #76]	; (800113c <force_temp_conv+0x70>)
 80010ee:	f001 f8b1 	bl	8002254 <HAL_I2C_Mem_Read>
	if (!(status&0x04))
 80010f2:	79fb      	ldrb	r3, [r7, #7]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d11b      	bne.n	8001134 <force_temp_conv+0x68>
	{
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x0E, 1, &control, 1, 100);
 80010fc:	2364      	movs	r3, #100	; 0x64
 80010fe:	9302      	str	r3, [sp, #8]
 8001100:	2301      	movs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	1dbb      	adds	r3, r7, #6
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	2301      	movs	r3, #1
 800110a:	220e      	movs	r2, #14
 800110c:	21d0      	movs	r1, #208	; 0xd0
 800110e:	480b      	ldr	r0, [pc, #44]	; (800113c <force_temp_conv+0x70>)
 8001110:	f001 f8a0 	bl	8002254 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);
 8001114:	79bb      	ldrb	r3, [r7, #6]
 8001116:	f043 0320 	orr.w	r3, r3, #32
 800111a:	b2db      	uxtb	r3, r3
 800111c:	461a      	mov	r2, r3
 800111e:	2364      	movs	r3, #100	; 0x64
 8001120:	9302      	str	r3, [sp, #8]
 8001122:	2301      	movs	r3, #1
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	9200      	str	r2, [sp, #0]
 8001128:	2301      	movs	r3, #1
 800112a:	220e      	movs	r2, #14
 800112c:	21d0      	movs	r1, #208	; 0xd0
 800112e:	4803      	ldr	r0, [pc, #12]	; (800113c <force_temp_conv+0x70>)
 8001130:	f000 ff96 	bl	8002060 <HAL_I2C_Mem_Write>
	}
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20000204 	.word	0x20000204

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b590      	push	{r4, r7, lr}
 8001142:	b083      	sub	sp, #12
 8001144:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f000 fa41 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f861 	bl	8001210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 f8f5 	bl	800133c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001152:	f000 f8c5 	bl	80012e0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init ();
 8001156:	f002 fb27 	bl	80037a8 <lcd_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  Get_Time();
 800115a:	f7ff ff2d 	bl	8000fb8 <Get_Time>
	  sprintf (buffer, "%02d:%02d:%02d", time.hour, time.minutes, time.seconds);
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <main+0xb8>)
 8001160:	789b      	ldrb	r3, [r3, #2]
 8001162:	461a      	mov	r2, r3
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <main+0xb8>)
 8001166:	785b      	ldrb	r3, [r3, #1]
 8001168:	4619      	mov	r1, r3
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <main+0xb8>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	460b      	mov	r3, r1
 8001172:	4922      	ldr	r1, [pc, #136]	; (80011fc <main+0xbc>)
 8001174:	4822      	ldr	r0, [pc, #136]	; (8001200 <main+0xc0>)
 8001176:	f003 f9df 	bl	8004538 <siprintf>
	  lcd_put_cur (0,0);
 800117a:	2100      	movs	r1, #0
 800117c:	2000      	movs	r0, #0
 800117e:	f002 faf5 	bl	800376c <lcd_put_cur>
	  lcd_send_string(buffer);
 8001182:	481f      	ldr	r0, [pc, #124]	; (8001200 <main+0xc0>)
 8001184:	f002 fb4d 	bl	8003822 <lcd_send_string>

	  sprintf (buffer, "%02d-%02d-20%02d", time.dayofmonth, time.month, time.year);
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <main+0xb8>)
 800118a:	791b      	ldrb	r3, [r3, #4]
 800118c:	461a      	mov	r2, r3
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <main+0xb8>)
 8001190:	795b      	ldrb	r3, [r3, #5]
 8001192:	4619      	mov	r1, r3
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <main+0xb8>)
 8001196:	799b      	ldrb	r3, [r3, #6]
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	460b      	mov	r3, r1
 800119c:	4919      	ldr	r1, [pc, #100]	; (8001204 <main+0xc4>)
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <main+0xc0>)
 80011a0:	f003 f9ca 	bl	8004538 <siprintf>
	  lcd_put_cur(1, 0);
 80011a4:	2100      	movs	r1, #0
 80011a6:	2001      	movs	r0, #1
 80011a8:	f002 fae0 	bl	800376c <lcd_put_cur>
	  lcd_send_string(buffer);
 80011ac:	4814      	ldr	r0, [pc, #80]	; (8001200 <main+0xc0>)
 80011ae:	f002 fb38 	bl	8003822 <lcd_send_string>

	  force_temp_conv();
 80011b2:	f7ff ff8b 	bl	80010cc <force_temp_conv>

	  TEMP = Get_Temp();
 80011b6:	f7ff ff4f 	bl	8001058 <Get_Temp>
 80011ba:	eef0 7a40 	vmov.f32	s15, s0
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <main+0xc8>)
 80011c0:	edc3 7a00 	vstr	s15, [r3]

	  lcd_put_cur(0, 10);
 80011c4:	210a      	movs	r1, #10
 80011c6:	2000      	movs	r0, #0
 80011c8:	f002 fad0 	bl	800376c <lcd_put_cur>

	  sprintf(buffer, "%f", TEMP);
 80011cc:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <main+0xc8>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f9b9 	bl	8000548 <__aeabi_f2d>
 80011d6:	4603      	mov	r3, r0
 80011d8:	460c      	mov	r4, r1
 80011da:	461a      	mov	r2, r3
 80011dc:	4623      	mov	r3, r4
 80011de:	490b      	ldr	r1, [pc, #44]	; (800120c <main+0xcc>)
 80011e0:	4807      	ldr	r0, [pc, #28]	; (8001200 <main+0xc0>)
 80011e2:	f003 f9a9 	bl	8004538 <siprintf>

	  lcd_send_string(buffer);
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <main+0xc0>)
 80011e8:	f002 fb1b 	bl	8003822 <lcd_send_string>

	  HAL_Delay(500);
 80011ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011f0:	f000 fa5e 	bl	80016b0 <HAL_Delay>
	  Get_Time();
 80011f4:	e7b1      	b.n	800115a <main+0x1a>
 80011f6:	bf00      	nop
 80011f8:	2000026c 	.word	0x2000026c
 80011fc:	08007338 	.word	0x08007338
 8001200:	2000025c 	.word	0x2000025c
 8001204:	08007348 	.word	0x08007348
 8001208:	20000258 	.word	0x20000258
 800120c:	0800735c 	.word	0x0800735c

08001210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b094      	sub	sp, #80	; 0x50
 8001214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	2230      	movs	r2, #48	; 0x30
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f002 fb3e 	bl	80038a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001224:	f107 030c 	add.w	r3, r7, #12
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001234:	2300      	movs	r3, #0
 8001236:	60bb      	str	r3, [r7, #8]
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <SystemClock_Config+0xc8>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	4a26      	ldr	r2, [pc, #152]	; (80012d8 <SystemClock_Config+0xc8>)
 800123e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001242:	6413      	str	r3, [r2, #64]	; 0x40
 8001244:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <SystemClock_Config+0xc8>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001250:	2300      	movs	r3, #0
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	4b21      	ldr	r3, [pc, #132]	; (80012dc <SystemClock_Config+0xcc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a20      	ldr	r2, [pc, #128]	; (80012dc <SystemClock_Config+0xcc>)
 800125a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125e:	6013      	str	r3, [r2, #0]
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <SystemClock_Config+0xcc>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800126c:	2301      	movs	r3, #1
 800126e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001270:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001276:	2302      	movs	r3, #2
 8001278:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800127a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800127e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001280:	2319      	movs	r3, #25
 8001282:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8001284:	2390      	movs	r3, #144	; 0x90
 8001286:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001288:	2302      	movs	r3, #2
 800128a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800128c:	2304      	movs	r3, #4
 800128e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	4618      	mov	r0, r3
 8001296:	f001 fde1 	bl	8002e5c <HAL_RCC_OscConfig>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012a0:	f000 f882 	bl	80013a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012a4:	230f      	movs	r3, #15
 80012a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a8:	2302      	movs	r3, #2
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012ba:	f107 030c 	add.w	r3, r7, #12
 80012be:	2102      	movs	r1, #2
 80012c0:	4618      	mov	r0, r3
 80012c2:	f002 f83b 	bl	800333c <HAL_RCC_ClockConfig>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80012cc:	f000 f86c 	bl	80013a8 <Error_Handler>
  }
}
 80012d0:	bf00      	nop
 80012d2:	3750      	adds	r7, #80	; 0x50
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40007000 	.word	0x40007000

080012e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <MX_I2C1_Init+0x50>)
 80012e6:	4a13      	ldr	r2, [pc, #76]	; (8001334 <MX_I2C1_Init+0x54>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_I2C1_Init+0x50>)
 80012ec:	4a12      	ldr	r2, [pc, #72]	; (8001338 <MX_I2C1_Init+0x58>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_I2C1_Init+0x50>)
 80012fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001302:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001304:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <MX_I2C1_Init+0x50>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_I2C1_Init+0x50>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001310:	4b07      	ldr	r3, [pc, #28]	; (8001330 <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001316:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131c:	4804      	ldr	r0, [pc, #16]	; (8001330 <MX_I2C1_Init+0x50>)
 800131e:	f000 fc69 	bl	8001bf4 <HAL_I2C_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001328:	f000 f83e 	bl	80013a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000204 	.word	0x20000204
 8001334:	40005400 	.word	0x40005400
 8001338:	000186a0 	.word	0x000186a0

0800133c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800133c:	b480      	push	{r7}
 800133e:	b085      	sub	sp, #20
 8001340:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <MX_GPIO_Init+0x68>)
 800134c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <MX_GPIO_Init+0x68>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_GPIO_Init+0x68>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]

}
 8001396:	bf00      	nop
 8001398:	3714      	adds	r7, #20
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b10      	ldr	r3, [pc, #64]	; (8001404 <HAL_MspInit+0x4c>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a0f      	ldr	r2, [pc, #60]	; (8001404 <HAL_MspInit+0x4c>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b0d      	ldr	r3, [pc, #52]	; (8001404 <HAL_MspInit+0x4c>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_MspInit+0x4c>)
 80013e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e2:	4a08      	ldr	r2, [pc, #32]	; (8001404 <HAL_MspInit+0x4c>)
 80013e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e8:	6413      	str	r3, [r2, #64]	; 0x40
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_MspInit+0x4c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f2:	603b      	str	r3, [r7, #0]
 80013f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a19      	ldr	r2, [pc, #100]	; (800148c <HAL_I2C_MspInit+0x84>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d12b      	bne.n	8001482 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_I2C_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_I2C_MspInit+0x88>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_I2C_MspInit+0x88>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001446:	23c0      	movs	r3, #192	; 0xc0
 8001448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144a:	2312      	movs	r3, #18
 800144c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800144e:	2301      	movs	r3, #1
 8001450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001456:	2304      	movs	r3, #4
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800145a:	f107 0314 	add.w	r3, r7, #20
 800145e:	4619      	mov	r1, r3
 8001460:	480c      	ldr	r0, [pc, #48]	; (8001494 <HAL_I2C_MspInit+0x8c>)
 8001462:	f000 fa2d 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_I2C_MspInit+0x88>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_I2C_MspInit+0x88>)
 8001470:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001474:	6413      	str	r3, [r2, #64]	; 0x40
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <HAL_I2C_MspInit+0x88>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40005400 	.word	0x40005400
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f8c0 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <_sbrk+0x50>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x16>
		heap_end = &end;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <_sbrk+0x50>)
 8001506:	4a10      	ldr	r2, [pc, #64]	; (8001548 <_sbrk+0x54>)
 8001508:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <_sbrk+0x50>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <_sbrk+0x50>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4413      	add	r3, r2
 8001518:	466a      	mov	r2, sp
 800151a:	4293      	cmp	r3, r2
 800151c:	d907      	bls.n	800152e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800151e:	f002 f995 	bl	800384c <__errno>
 8001522:	4602      	mov	r2, r0
 8001524:	230c      	movs	r3, #12
 8001526:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001528:	f04f 33ff 	mov.w	r3, #4294967295
 800152c:	e006      	b.n	800153c <_sbrk+0x48>
	}

	heap_end += incr;
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <_sbrk+0x50>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a03      	ldr	r2, [pc, #12]	; (8001544 <_sbrk+0x50>)
 8001538:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200001f8 	.word	0x200001f8
 8001548:	20000280 	.word	0x20000280

0800154c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001550:	4b08      	ldr	r3, [pc, #32]	; (8001574 <SystemInit+0x28>)
 8001552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001556:	4a07      	ldr	r2, [pc, #28]	; (8001574 <SystemInit+0x28>)
 8001558:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800155c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <SystemInit+0x28>)
 8001562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001566:	609a      	str	r2, [r3, #8]
#endif
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800157c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800157e:	e003      	b.n	8001588 <LoopCopyDataInit>

08001580 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001582:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001584:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001586:	3104      	adds	r1, #4

08001588 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001588:	480b      	ldr	r0, [pc, #44]	; (80015b8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800158c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800158e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001590:	d3f6      	bcc.n	8001580 <CopyDataInit>
  ldr  r2, =_sbss
 8001592:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001594:	e002      	b.n	800159c <LoopFillZerobss>

08001596 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001596:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001598:	f842 3b04 	str.w	r3, [r2], #4

0800159c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800159c:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800159e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80015a0:	d3f9      	bcc.n	8001596 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80015a2:	f7ff ffd3 	bl	800154c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f002 f957 	bl	8003858 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fdc9 	bl	8001140 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80015b0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80015b4:	08007640 	.word	0x08007640
  ldr  r0, =_sdata
 80015b8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80015bc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80015c0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80015c4:	2000027c 	.word	0x2000027c

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f92f 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff feda 	bl	80013b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f939 	bl	80018a6 <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f90f 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	20000274 	.word	0x20000274

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	20000274 	.word	0x20000274

080016b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016b8:	f7ff ffee 	bl	8001698 <HAL_GetTick>
 80016bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016c8:	d005      	beq.n	80016d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_Delay+0x40>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4413      	add	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016d6:	bf00      	nop
 80016d8:	f7ff ffde 	bl	8001698 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d8f7      	bhi.n	80016d8 <HAL_Delay+0x28>
  {
  }
}
 80016e8:	bf00      	nop
 80016ea:	3710      	adds	r7, #16
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	20000008 	.word	0x20000008

080016f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001710:	4013      	ands	r3, r2
 8001712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800171c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001726:	4a04      	ldr	r2, [pc, #16]	; (8001738 <__NVIC_SetPriorityGrouping+0x44>)
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	60d3      	str	r3, [r2, #12]
}
 800172c:	bf00      	nop
 800172e:	3714      	adds	r7, #20
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001740:	4b04      	ldr	r3, [pc, #16]	; (8001754 <__NVIC_GetPriorityGrouping+0x18>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	0a1b      	lsrs	r3, r3, #8
 8001746:	f003 0307 	and.w	r3, r3, #7
}
 800174a:	4618      	mov	r0, r3
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000ed00 	.word	0xe000ed00

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	; (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	; (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	; (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff47 	bl	80016f4 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff5c 	bl	800173c <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff8e 	bl	80017ac <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5d 	bl	8001758 <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffb0 	bl	8001814 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	; 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	61fb      	str	r3, [r7, #28]
 80018da:	e16b      	b.n	8001bb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018dc:	2201      	movs	r2, #1
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	697a      	ldr	r2, [r7, #20]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	f040 815a 	bne.w	8001bae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d00b      	beq.n	800191a <HAL_GPIO_Init+0x5a>
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800190e:	2b11      	cmp	r3, #17
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b12      	cmp	r3, #18
 8001918:	d130      	bne.n	800197c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	2203      	movs	r2, #3
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	4013      	ands	r3, r2
 8001930:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	68da      	ldr	r2, [r3, #12]
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001950:	2201      	movs	r2, #1
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	4013      	ands	r3, r2
 800195e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 0201 	and.w	r2, r3, #1
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	689a      	ldr	r2, [r3, #8]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0xfc>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d123      	bne.n	8001a04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	f003 0307 	and.w	r3, r3, #7
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	fa02 f303 	lsl.w	r3, r2, r3
 80019d8:	43db      	mvns	r3, r3
 80019da:	69ba      	ldr	r2, [r7, #24]
 80019dc:	4013      	ands	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691a      	ldr	r2, [r3, #16]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	08da      	lsrs	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3208      	adds	r2, #8
 80019fe:	69b9      	ldr	r1, [r7, #24]
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	2203      	movs	r2, #3
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 0203 	and.w	r2, r3, #3
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	69ba      	ldr	r2, [r7, #24]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f000 80b4 	beq.w	8001bae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b5f      	ldr	r3, [pc, #380]	; (8001bc8 <HAL_GPIO_Init+0x308>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a5e      	ldr	r2, [pc, #376]	; (8001bc8 <HAL_GPIO_Init+0x308>)
 8001a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b5c      	ldr	r3, [pc, #368]	; (8001bc8 <HAL_GPIO_Init+0x308>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a62:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <HAL_GPIO_Init+0x30c>)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	089b      	lsrs	r3, r3, #2
 8001a68:	3302      	adds	r3, #2
 8001a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_GPIO_Init+0x310>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d02b      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a50      	ldr	r2, [pc, #320]	; (8001bd4 <HAL_GPIO_Init+0x314>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d025      	beq.n	8001ae2 <HAL_GPIO_Init+0x222>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a4f      	ldr	r2, [pc, #316]	; (8001bd8 <HAL_GPIO_Init+0x318>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d01f      	beq.n	8001ade <HAL_GPIO_Init+0x21e>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4a4e      	ldr	r2, [pc, #312]	; (8001bdc <HAL_GPIO_Init+0x31c>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d019      	beq.n	8001ada <HAL_GPIO_Init+0x21a>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a4d      	ldr	r2, [pc, #308]	; (8001be0 <HAL_GPIO_Init+0x320>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d013      	beq.n	8001ad6 <HAL_GPIO_Init+0x216>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a4c      	ldr	r2, [pc, #304]	; (8001be4 <HAL_GPIO_Init+0x324>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d00d      	beq.n	8001ad2 <HAL_GPIO_Init+0x212>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4b      	ldr	r2, [pc, #300]	; (8001be8 <HAL_GPIO_Init+0x328>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d007      	beq.n	8001ace <HAL_GPIO_Init+0x20e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <HAL_GPIO_Init+0x32c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d101      	bne.n	8001aca <HAL_GPIO_Init+0x20a>
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	e00e      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001aca:	2308      	movs	r3, #8
 8001acc:	e00c      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ace:	2306      	movs	r3, #6
 8001ad0:	e00a      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e008      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ad6:	2304      	movs	r3, #4
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ada:	2303      	movs	r3, #3
 8001adc:	e004      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	69fa      	ldr	r2, [r7, #28]
 8001aea:	f002 0203 	and.w	r2, r2, #3
 8001aee:	0092      	lsls	r2, r2, #2
 8001af0:	4093      	lsls	r3, r2
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001af8:	4934      	ldr	r1, [pc, #208]	; (8001bcc <HAL_GPIO_Init+0x30c>)
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	089b      	lsrs	r3, r3, #2
 8001afe:	3302      	adds	r3, #2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b06:	4b3a      	ldr	r3, [pc, #232]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	43db      	mvns	r3, r3
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	4013      	ands	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2a:	4a31      	ldr	r2, [pc, #196]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b30:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b54:	4a26      	ldr	r2, [pc, #152]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5a:	4b25      	ldr	r3, [pc, #148]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b7e:	4a1c      	ldr	r2, [pc, #112]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba0:	69ba      	ldr	r2, [r7, #24]
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	61fb      	str	r3, [r7, #28]
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b0f      	cmp	r3, #15
 8001bb8:	f67f ae90 	bls.w	80018dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bbc:	bf00      	nop
 8001bbe:	3724      	adds	r7, #36	; 0x24
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40013800 	.word	0x40013800
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40020400 	.word	0x40020400
 8001bd8:	40020800 	.word	0x40020800
 8001bdc:	40020c00 	.word	0x40020c00
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40021400 	.word	0x40021400
 8001be8:	40021800 	.word	0x40021800
 8001bec:	40021c00 	.word	0x40021c00
 8001bf0:	40013c00 	.word	0x40013c00

08001bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e11f      	b.n	8001e46 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff fbf4 	bl	8001408 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2224      	movs	r2, #36	; 0x24
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f022 0201 	bic.w	r2, r2, #1
 8001c36:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c46:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c58:	f001 fd14 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8001c5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	4a7b      	ldr	r2, [pc, #492]	; (8001e50 <HAL_I2C_Init+0x25c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d807      	bhi.n	8001c78 <HAL_I2C_Init+0x84>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4a7a      	ldr	r2, [pc, #488]	; (8001e54 <HAL_I2C_Init+0x260>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	bf94      	ite	ls
 8001c70:	2301      	movls	r3, #1
 8001c72:	2300      	movhi	r3, #0
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	e006      	b.n	8001c86 <HAL_I2C_Init+0x92>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <HAL_I2C_Init+0x264>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	bf94      	ite	ls
 8001c80:	2301      	movls	r3, #1
 8001c82:	2300      	movhi	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e0db      	b.n	8001e46 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4a72      	ldr	r2, [pc, #456]	; (8001e5c <HAL_I2C_Init+0x268>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	0c9b      	lsrs	r3, r3, #18
 8001c98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68ba      	ldr	r2, [r7, #8]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	4a64      	ldr	r2, [pc, #400]	; (8001e50 <HAL_I2C_Init+0x25c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d802      	bhi.n	8001cc8 <HAL_I2C_Init+0xd4>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	e009      	b.n	8001cdc <HAL_I2C_Init+0xe8>
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001cce:	fb02 f303 	mul.w	r3, r2, r3
 8001cd2:	4a63      	ldr	r2, [pc, #396]	; (8001e60 <HAL_I2C_Init+0x26c>)
 8001cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cd8:	099b      	lsrs	r3, r3, #6
 8001cda:	3301      	adds	r3, #1
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001cee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	4956      	ldr	r1, [pc, #344]	; (8001e50 <HAL_I2C_Init+0x25c>)
 8001cf8:	428b      	cmp	r3, r1
 8001cfa:	d80d      	bhi.n	8001d18 <HAL_I2C_Init+0x124>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e59      	subs	r1, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	bf38      	it	cc
 8001d14:	2304      	movcc	r3, #4
 8001d16:	e04f      	b.n	8001db8 <HAL_I2C_Init+0x1c4>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d111      	bne.n	8001d44 <HAL_I2C_Init+0x150>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	005b      	lsls	r3, r3, #1
 8001d2c:	440b      	add	r3, r1
 8001d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d32:	3301      	adds	r3, #1
 8001d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf0c      	ite	eq
 8001d3c:	2301      	moveq	r3, #1
 8001d3e:	2300      	movne	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e012      	b.n	8001d6a <HAL_I2C_Init+0x176>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	1e58      	subs	r0, r3, #1
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6859      	ldr	r1, [r3, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	0099      	lsls	r1, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf0c      	ite	eq
 8001d64:	2301      	moveq	r3, #1
 8001d66:	2300      	movne	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_I2C_Init+0x17e>
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e022      	b.n	8001db8 <HAL_I2C_Init+0x1c4>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10e      	bne.n	8001d98 <HAL_I2C_Init+0x1a4>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1e58      	subs	r0, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6859      	ldr	r1, [r3, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	440b      	add	r3, r1
 8001d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d96:	e00f      	b.n	8001db8 <HAL_I2C_Init+0x1c4>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	1e58      	subs	r0, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6859      	ldr	r1, [r3, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	0099      	lsls	r1, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dae:	3301      	adds	r3, #1
 8001db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001db8:	6879      	ldr	r1, [r7, #4]
 8001dba:	6809      	ldr	r1, [r1, #0]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	431a      	orrs	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001de6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	6911      	ldr	r1, [r2, #16]
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	68d2      	ldr	r2, [r2, #12]
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6812      	ldr	r2, [r2, #0]
 8001df8:	430b      	orrs	r3, r1
 8001dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695a      	ldr	r2, [r3, #20]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2220      	movs	r2, #32
 8001e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001e44:	2300      	movs	r3, #0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	000186a0 	.word	0x000186a0
 8001e54:	001e847f 	.word	0x001e847f
 8001e58:	003d08ff 	.word	0x003d08ff
 8001e5c:	431bde83 	.word	0x431bde83
 8001e60:	10624dd3 	.word	0x10624dd3

08001e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	460b      	mov	r3, r1
 8001e72:	817b      	strh	r3, [r7, #10]
 8001e74:	4613      	mov	r3, r2
 8001e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e78:	f7ff fc0e 	bl	8001698 <HAL_GetTick>
 8001e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	f040 80e0 	bne.w	800204c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2319      	movs	r3, #25
 8001e92:	2201      	movs	r2, #1
 8001e94:	4970      	ldr	r1, [pc, #448]	; (8002058 <HAL_I2C_Master_Transmit+0x1f4>)
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 fe02 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e0d3      	b.n	800204e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2C_Master_Transmit+0x50>
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	e0cc      	b.n	800204e <HAL_I2C_Master_Transmit+0x1ea>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d007      	beq.n	8001eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f042 0201 	orr.w	r2, r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2221      	movs	r2, #33	; 0x21
 8001eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	893a      	ldrh	r2, [r7, #8]
 8001f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	4a50      	ldr	r2, [pc, #320]	; (800205c <HAL_I2C_Master_Transmit+0x1f8>)
 8001f1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fbbc 	bl	80026a0 <I2C_MasterRequestWrite>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e08d      	b.n	800204e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	613b      	str	r3, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	613b      	str	r3, [r7, #16]
 8001f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001f48:	e066      	b.n	8002018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 fe7c 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00d      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d107      	bne.n	8001f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e06b      	b.n	800204e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	695b      	ldr	r3, [r3, #20]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b04      	cmp	r3, #4
 8001fb2:	d11b      	bne.n	8001fec <HAL_I2C_Master_Transmit+0x188>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d017      	beq.n	8001fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	6a39      	ldr	r1, [r7, #32]
 8001ff0:	68f8      	ldr	r0, [r7, #12]
 8001ff2:	f000 fe6c 	bl	8002cce <I2C_WaitOnBTFFlagUntilTimeout>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	2b04      	cmp	r3, #4
 8002002:	d107      	bne.n	8002014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e01a      	b.n	800204e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800201c:	2b00      	cmp	r3, #0
 800201e:	d194      	bne.n	8001f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800202e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2220      	movs	r2, #32
 8002034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	3718      	adds	r7, #24
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	00100002 	.word	0x00100002
 800205c:	ffff0000 	.word	0xffff0000

08002060 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b088      	sub	sp, #32
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	4608      	mov	r0, r1
 800206a:	4611      	mov	r1, r2
 800206c:	461a      	mov	r2, r3
 800206e:	4603      	mov	r3, r0
 8002070:	817b      	strh	r3, [r7, #10]
 8002072:	460b      	mov	r3, r1
 8002074:	813b      	strh	r3, [r7, #8]
 8002076:	4613      	mov	r3, r2
 8002078:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800207a:	f7ff fb0d 	bl	8001698 <HAL_GetTick>
 800207e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b20      	cmp	r3, #32
 800208a:	f040 80d9 	bne.w	8002240 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2319      	movs	r3, #25
 8002094:	2201      	movs	r2, #1
 8002096:	496d      	ldr	r1, [pc, #436]	; (800224c <HAL_I2C_Mem_Write+0x1ec>)
 8002098:	68f8      	ldr	r0, [r7, #12]
 800209a:	f000 fd01 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80020a4:	2302      	movs	r3, #2
 80020a6:	e0cc      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d101      	bne.n	80020b6 <HAL_I2C_Mem_Write+0x56>
 80020b2:	2302      	movs	r3, #2
 80020b4:	e0c5      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d007      	beq.n	80020dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2221      	movs	r2, #33	; 0x21
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800210c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002112:	b29a      	uxth	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	4a4d      	ldr	r2, [pc, #308]	; (8002250 <HAL_I2C_Mem_Write+0x1f0>)
 800211c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800211e:	88f8      	ldrh	r0, [r7, #6]
 8002120:	893a      	ldrh	r2, [r7, #8]
 8002122:	8979      	ldrh	r1, [r7, #10]
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	4603      	mov	r3, r0
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fb38 	bl	80027a4 <I2C_RequestMemoryWrite>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d052      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e081      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fd82 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00d      	beq.n	800216a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	2b04      	cmp	r3, #4
 8002154:	d107      	bne.n	8002166 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002164:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e06b      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	781a      	ldrb	r2, [r3, #0]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002184:	3b01      	subs	r3, #1
 8002186:	b29a      	uxth	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b01      	subs	r3, #1
 8002194:	b29a      	uxth	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_I2C_Mem_Write+0x180>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d017      	beq.n	80021e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	3b01      	subs	r3, #1
 80021da:	b29a      	uxth	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1aa      	bne.n	800213e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 fd6e 	bl	8002cce <I2C_WaitOnBTFFlagUntilTimeout>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d00d      	beq.n	8002214 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d107      	bne.n	8002210 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e016      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002222:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	e000      	b.n	8002242 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002240:	2302      	movs	r3, #2
  }
}
 8002242:	4618      	mov	r0, r3
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	00100002 	.word	0x00100002
 8002250:	ffff0000 	.word	0xffff0000

08002254 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08c      	sub	sp, #48	; 0x30
 8002258:	af02      	add	r7, sp, #8
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	4608      	mov	r0, r1
 800225e:	4611      	mov	r1, r2
 8002260:	461a      	mov	r2, r3
 8002262:	4603      	mov	r3, r0
 8002264:	817b      	strh	r3, [r7, #10]
 8002266:	460b      	mov	r3, r1
 8002268:	813b      	strh	r3, [r7, #8]
 800226a:	4613      	mov	r3, r2
 800226c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800226e:	f7ff fa13 	bl	8001698 <HAL_GetTick>
 8002272:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b20      	cmp	r3, #32
 800227e:	f040 8208 	bne.w	8002692 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	2319      	movs	r3, #25
 8002288:	2201      	movs	r2, #1
 800228a:	497b      	ldr	r1, [pc, #492]	; (8002478 <HAL_I2C_Mem_Read+0x224>)
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f000 fc07 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002298:	2302      	movs	r3, #2
 800229a:	e1fb      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d101      	bne.n	80022aa <HAL_I2C_Mem_Read+0x56>
 80022a6:	2302      	movs	r3, #2
 80022a8:	e1f4      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2201      	movs	r2, #1
 80022ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d007      	beq.n	80022d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2222      	movs	r2, #34	; 0x22
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2240      	movs	r2, #64	; 0x40
 80022ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4a5b      	ldr	r2, [pc, #364]	; (800247c <HAL_I2C_Mem_Read+0x228>)
 8002310:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002312:	88f8      	ldrh	r0, [r7, #6]
 8002314:	893a      	ldrh	r2, [r7, #8]
 8002316:	8979      	ldrh	r1, [r7, #10]
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	9301      	str	r3, [sp, #4]
 800231c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4603      	mov	r3, r0
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fad4 	bl	80028d0 <I2C_RequestMemoryRead>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1b0      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002336:	2b00      	cmp	r3, #0
 8002338:	d113      	bne.n	8002362 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	695b      	ldr	r3, [r3, #20]
 8002344:	623b      	str	r3, [r7, #32]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699b      	ldr	r3, [r3, #24]
 800234c:	623b      	str	r3, [r7, #32]
 800234e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	e184      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002366:	2b01      	cmp	r3, #1
 8002368:	d11b      	bne.n	80023a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002378:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	695b      	ldr	r3, [r3, #20]
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	61fb      	str	r3, [r7, #28]
 800238e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e164      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d11b      	bne.n	80023e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	e144      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	617b      	str	r3, [r7, #20]
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023f8:	e138      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fe:	2b03      	cmp	r3, #3
 8002400:	f200 80f1 	bhi.w	80025e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002408:	2b01      	cmp	r3, #1
 800240a:	d123      	bne.n	8002454 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800240c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800240e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fc9d 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e139      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002452:	e10b      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002458:	2b02      	cmp	r3, #2
 800245a:	d14e      	bne.n	80024fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002462:	2200      	movs	r2, #0
 8002464:	4906      	ldr	r1, [pc, #24]	; (8002480 <HAL_I2C_Mem_Read+0x22c>)
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f000 fb1a 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d008      	beq.n	8002484 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e10e      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
 8002476:	bf00      	nop
 8002478:	00100002 	.word	0x00100002
 800247c:	ffff0000 	.word	0xffff0000
 8002480:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	691a      	ldr	r2, [r3, #16]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	691a      	ldr	r2, [r3, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	1c5a      	adds	r2, r3, #1
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	3b01      	subs	r3, #1
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024f8:	e0b8      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fc:	9300      	str	r3, [sp, #0]
 80024fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002500:	2200      	movs	r2, #0
 8002502:	4966      	ldr	r1, [pc, #408]	; (800269c <HAL_I2C_Mem_Read+0x448>)
 8002504:	68f8      	ldr	r0, [r7, #12]
 8002506:	f000 facb 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0bf      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002522:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691a      	ldr	r2, [r3, #16]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	b2d2      	uxtb	r2, r2
 8002530:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b29a      	uxth	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	9300      	str	r3, [sp, #0]
 800255a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255c:	2200      	movs	r2, #0
 800255e:	494f      	ldr	r1, [pc, #316]	; (800269c <HAL_I2C_Mem_Read+0x448>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 fa9d 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e091      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800257e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800259c:	3b01      	subs	r3, #1
 800259e:	b29a      	uxth	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	691a      	ldr	r2, [r3, #16]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	1c5a      	adds	r2, r3, #1
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025ce:	3b01      	subs	r3, #1
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025e4:	e042      	b.n	800266c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fbb0 	bl	8002d50 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e04c      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	f003 0304 	and.w	r3, r3, #4
 8002636:	2b04      	cmp	r3, #4
 8002638:	d118      	bne.n	800266c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002644:	b2d2      	uxtb	r2, r2
 8002646:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	1c5a      	adds	r2, r3, #1
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002662:	b29b      	uxth	r3, r3
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f aec2 	bne.w	80023fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2220      	movs	r2, #32
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	00010004 	.word	0x00010004

080026a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	607a      	str	r2, [r7, #4]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	460b      	mov	r3, r1
 80026ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	2b08      	cmp	r3, #8
 80026ba:	d006      	beq.n	80026ca <I2C_MasterRequestWrite+0x2a>
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d003      	beq.n	80026ca <I2C_MasterRequestWrite+0x2a>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026c8:	d108      	bne.n	80026dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	e00b      	b.n	80026f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	2b12      	cmp	r3, #18
 80026e2:	d107      	bne.n	80026f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f9cd 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00d      	beq.n	8002728 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800271a:	d103      	bne.n	8002724 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e035      	b.n	8002794 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002730:	d108      	bne.n	8002744 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002732:	897b      	ldrh	r3, [r7, #10]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	461a      	mov	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002740:	611a      	str	r2, [r3, #16]
 8002742:	e01b      	b.n	800277c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002744:	897b      	ldrh	r3, [r7, #10]
 8002746:	11db      	asrs	r3, r3, #7
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f003 0306 	and.w	r3, r3, #6
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f063 030f 	orn	r3, r3, #15
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	687a      	ldr	r2, [r7, #4]
 8002760:	490e      	ldr	r1, [pc, #56]	; (800279c <I2C_MasterRequestWrite+0xfc>)
 8002762:	68f8      	ldr	r0, [r7, #12]
 8002764:	f000 f9f3 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e010      	b.n	8002794 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002772:	897b      	ldrh	r3, [r7, #10]
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4907      	ldr	r1, [pc, #28]	; (80027a0 <I2C_MasterRequestWrite+0x100>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f9e3 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	00010008 	.word	0x00010008
 80027a0:	00010002 	.word	0x00010002

080027a4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af02      	add	r7, sp, #8
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	4608      	mov	r0, r1
 80027ae:	4611      	mov	r1, r2
 80027b0:	461a      	mov	r2, r3
 80027b2:	4603      	mov	r3, r0
 80027b4:	817b      	strh	r3, [r7, #10]
 80027b6:	460b      	mov	r3, r1
 80027b8:	813b      	strh	r3, [r7, #8]
 80027ba:	4613      	mov	r3, r2
 80027bc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027cc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f960 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027f4:	d103      	bne.n	80027fe <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e05f      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002802:	897b      	ldrh	r3, [r7, #10]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	461a      	mov	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002810:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	6a3a      	ldr	r2, [r7, #32]
 8002816:	492d      	ldr	r1, [pc, #180]	; (80028cc <I2C_RequestMemoryWrite+0x128>)
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f998 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e04c      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002828:	2300      	movs	r3, #0
 800282a:	617b      	str	r3, [r7, #20]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	617b      	str	r3, [r7, #20]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	617b      	str	r3, [r7, #20]
 800283c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800283e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002840:	6a39      	ldr	r1, [r7, #32]
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fa02 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002864:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e02b      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	2b01      	cmp	r3, #1
 800286e:	d105      	bne.n	800287c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002870:	893b      	ldrh	r3, [r7, #8]
 8002872:	b2da      	uxtb	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	611a      	str	r2, [r3, #16]
 800287a:	e021      	b.n	80028c0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800287c:	893b      	ldrh	r3, [r7, #8]
 800287e:	0a1b      	lsrs	r3, r3, #8
 8002880:	b29b      	uxth	r3, r3
 8002882:	b2da      	uxtb	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800288a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800288c:	6a39      	ldr	r1, [r7, #32]
 800288e:	68f8      	ldr	r0, [r7, #12]
 8002890:	f000 f9dc 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00d      	beq.n	80028b6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b04      	cmp	r3, #4
 80028a0:	d107      	bne.n	80028b2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e005      	b.n	80028c2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028b6:	893b      	ldrh	r3, [r7, #8]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	00010002 	.word	0x00010002

080028d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b088      	sub	sp, #32
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	60f8      	str	r0, [r7, #12]
 80028d8:	4608      	mov	r0, r1
 80028da:	4611      	mov	r1, r2
 80028dc:	461a      	mov	r2, r3
 80028de:	4603      	mov	r3, r0
 80028e0:	817b      	strh	r3, [r7, #10]
 80028e2:	460b      	mov	r3, r1
 80028e4:	813b      	strh	r3, [r7, #8]
 80028e6:	4613      	mov	r3, r2
 80028e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002908:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	2200      	movs	r2, #0
 8002912:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 f8c2 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 800291c:	4603      	mov	r3, r0
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00d      	beq.n	800293e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800292c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002930:	d103      	bne.n	800293a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e0aa      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800293e:	897b      	ldrh	r3, [r7, #10]
 8002940:	b2db      	uxtb	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800294c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	4952      	ldr	r1, [pc, #328]	; (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f000 f8fa 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	d001      	beq.n	8002964 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e097      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	617b      	str	r3, [r7, #20]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800297a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297c:	6a39      	ldr	r1, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f964 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00d      	beq.n	80029a6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	2b04      	cmp	r3, #4
 8002990:	d107      	bne.n	80029a2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e076      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d105      	bne.n	80029b8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029ac:	893b      	ldrh	r3, [r7, #8]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	611a      	str	r2, [r3, #16]
 80029b6:	e021      	b.n	80029fc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80029b8:	893b      	ldrh	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f93e 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d107      	bne.n	80029ee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e050      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80029f2:	893b      	ldrh	r3, [r7, #8]
 80029f4:	b2da      	uxtb	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80029fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f000 f923 	bl	8002c4c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e035      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	6a3b      	ldr	r3, [r7, #32]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f82b 	bl	8002aa0 <I2C_WaitOnFlagUntilTimeout>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00d      	beq.n	8002a6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a5e:	d103      	bne.n	8002a68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e013      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002a6c:	897b      	ldrh	r3, [r7, #10]
 8002a6e:	b2db      	uxtb	r3, r3
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	6a3a      	ldr	r2, [r7, #32]
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <I2C_RequestMemoryRead+0x1cc>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f863 	bl	8002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d001      	beq.n	8002a92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e000      	b.n	8002a94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	00010002 	.word	0x00010002

08002aa0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	4613      	mov	r3, r2
 8002aae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ab0:	e025      	b.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d021      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aba:	f7fe fded 	bl	8001698 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d116      	bne.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f043 0220 	orr.w	r2, r3, #32
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e023      	b.n	8002b46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	0c1b      	lsrs	r3, r3, #16
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d10d      	bne.n	8002b24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	43da      	mvns	r2, r3
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	4013      	ands	r3, r2
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	bf0c      	ite	eq
 8002b1a:	2301      	moveq	r3, #1
 8002b1c:	2300      	movne	r3, #0
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	461a      	mov	r2, r3
 8002b22:	e00c      	b.n	8002b3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699b      	ldr	r3, [r3, #24]
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	bf0c      	ite	eq
 8002b36:	2301      	moveq	r3, #1
 8002b38:	2300      	movne	r3, #0
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	79fb      	ldrb	r3, [r7, #7]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d0b6      	beq.n	8002ab2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3710      	adds	r7, #16
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b5c:	e051      	b.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	695b      	ldr	r3, [r3, #20]
 8002b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b6c:	d123      	bne.n	8002bb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2220      	movs	r2, #32
 8002b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f043 0204 	orr.w	r2, r3, #4
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e046      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbc:	d021      	beq.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbe:	f7fe fd6b 	bl	8001698 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d302      	bcc.n	8002bd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d116      	bne.n	8002c02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f043 0220 	orr.w	r2, r3, #32
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e020      	b.n	8002c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d10c      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	43da      	mvns	r2, r3
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4013      	ands	r3, r2
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	bf14      	ite	ne
 8002c1e:	2301      	movne	r3, #1
 8002c20:	2300      	moveq	r3, #0
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	e00b      	b.n	8002c3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	43da      	mvns	r2, r3
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d18d      	bne.n	8002b5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c58:	e02d      	b.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f8ce 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e02d      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c70:	d021      	beq.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c72:	f7fe fd11 	bl	8001698 <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d302      	bcc.n	8002c88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d116      	bne.n	8002cb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2220      	movs	r2, #32
 8002c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e007      	b.n	8002cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc0:	2b80      	cmp	r3, #128	; 0x80
 8002cc2:	d1ca      	bne.n	8002c5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cda:	e02d      	b.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f88d 	bl	8002dfc <I2C_IsAcknowledgeFailed>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d001      	beq.n	8002cec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e02d      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cf2:	d021      	beq.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cf4:	f7fe fcd0 	bl	8001698 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d302      	bcc.n	8002d0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d24:	f043 0220 	orr.w	r2, r3, #32
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e007      	b.n	8002d48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d1ca      	bne.n	8002cdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b084      	sub	sp, #16
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d5c:	e042      	b.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d119      	bne.n	8002da0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e029      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da0:	f7fe fc7a 	bl	8001698 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d302      	bcc.n	8002db6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d116      	bne.n	8002de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd0:	f043 0220 	orr.w	r2, r3, #32
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b40      	cmp	r3, #64	; 0x40
 8002df0:	d1b5      	bne.n	8002d5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}

08002dfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d11b      	bne.n	8002e4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e25b      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d075      	beq.n	8002f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e7a:	4ba3      	ldr	r3, [pc, #652]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	f003 030c 	and.w	r3, r3, #12
 8002e82:	2b04      	cmp	r3, #4
 8002e84:	d00c      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e86:	4ba0      	ldr	r3, [pc, #640]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d112      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e92:	4b9d      	ldr	r3, [pc, #628]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e9e:	d10b      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4b99      	ldr	r3, [pc, #612]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d05b      	beq.n	8002f64 <HAL_RCC_OscConfig+0x108>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d157      	bne.n	8002f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e236      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ec0:	d106      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x74>
 8002ec2:	4b91      	ldr	r3, [pc, #580]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a90      	ldr	r2, [pc, #576]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	e01d      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x98>
 8002eda:	4b8b      	ldr	r3, [pc, #556]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a8a      	ldr	r2, [pc, #552]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ee4:	6013      	str	r3, [r2, #0]
 8002ee6:	4b88      	ldr	r3, [pc, #544]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a87      	ldr	r2, [pc, #540]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef0:	6013      	str	r3, [r2, #0]
 8002ef2:	e00b      	b.n	8002f0c <HAL_RCC_OscConfig+0xb0>
 8002ef4:	4b84      	ldr	r3, [pc, #528]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a83      	ldr	r2, [pc, #524]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002efe:	6013      	str	r3, [r2, #0]
 8002f00:	4b81      	ldr	r3, [pc, #516]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a80      	ldr	r2, [pc, #512]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d013      	beq.n	8002f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f14:	f7fe fbc0 	bl	8001698 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f1c:	f7fe fbbc 	bl	8001698 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b64      	cmp	r3, #100	; 0x64
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e1fb      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f2e:	4b76      	ldr	r3, [pc, #472]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d0f0      	beq.n	8002f1c <HAL_RCC_OscConfig+0xc0>
 8002f3a:	e014      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fbac 	bl	8001698 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f44:	f7fe fba8 	bl	8001698 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b64      	cmp	r3, #100	; 0x64
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e1e7      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f56:	4b6c      	ldr	r3, [pc, #432]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0xe8>
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d063      	beq.n	800303a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f72:	4b65      	ldr	r3, [pc, #404]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	f003 030c 	and.w	r3, r3, #12
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b62      	ldr	r3, [pc, #392]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f86:	2b08      	cmp	r3, #8
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b5f      	ldr	r3, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b5c      	ldr	r3, [pc, #368]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1bb      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b56      	ldr	r3, [pc, #344]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4952      	ldr	r1, [pc, #328]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	; (800310c <HAL_RCC_OscConfig+0x2b0>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe fb61 	bl	8001698 <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe fb5d 	bl	8001698 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e19c      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4940      	ldr	r1, [pc, #256]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b3f      	ldr	r3, [pc, #252]	; (800310c <HAL_RCC_OscConfig+0x2b0>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fb40 	bl	8001698 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe fb3c 	bl	8001698 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e17b      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b36      	ldr	r3, [pc, #216]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d030      	beq.n	80030a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b30      	ldr	r3, [pc, #192]	; (8003110 <HAL_RCC_OscConfig+0x2b4>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fb20 	bl	8001698 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fb1c 	bl	8001698 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e15b      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b26      	ldr	r3, [pc, #152]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x200>
 800307a:	e015      	b.n	80030a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_OscConfig+0x2b4>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003082:	f7fe fb09 	bl	8001698 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fb05 	bl	8001698 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e144      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800309c:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80a0 	beq.w	80031f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030b6:	2300      	movs	r3, #0
 80030b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ba:	4b13      	ldr	r3, [pc, #76]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10f      	bne.n	80030e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030c6:	2300      	movs	r3, #0
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	4a0e      	ldr	r2, [pc, #56]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 80030d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030d4:	6413      	str	r3, [r2, #64]	; 0x40
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	60bb      	str	r3, [r7, #8]
 80030e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e2:	2301      	movs	r3, #1
 80030e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <HAL_RCC_OscConfig+0x2b8>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d121      	bne.n	8003136 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b08      	ldr	r3, [pc, #32]	; (8003114 <HAL_RCC_OscConfig+0x2b8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a07      	ldr	r2, [pc, #28]	; (8003114 <HAL_RCC_OscConfig+0x2b8>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fe facb 	bl	8001698 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003104:	e011      	b.n	800312a <HAL_RCC_OscConfig+0x2ce>
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800
 800310c:	42470000 	.word	0x42470000
 8003110:	42470e80 	.word	0x42470e80
 8003114:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003118:	f7fe fabe 	bl	8001698 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0fd      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b81      	ldr	r3, [pc, #516]	; (8003330 <HAL_RCC_OscConfig+0x4d4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d106      	bne.n	800314c <HAL_RCC_OscConfig+0x2f0>
 800313e:	4b7d      	ldr	r3, [pc, #500]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003142:	4a7c      	ldr	r2, [pc, #496]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003144:	f043 0301 	orr.w	r3, r3, #1
 8003148:	6713      	str	r3, [r2, #112]	; 0x70
 800314a:	e01c      	b.n	8003186 <HAL_RCC_OscConfig+0x32a>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b05      	cmp	r3, #5
 8003152:	d10c      	bne.n	800316e <HAL_RCC_OscConfig+0x312>
 8003154:	4b77      	ldr	r3, [pc, #476]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003158:	4a76      	ldr	r2, [pc, #472]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 800315a:	f043 0304 	orr.w	r3, r3, #4
 800315e:	6713      	str	r3, [r2, #112]	; 0x70
 8003160:	4b74      	ldr	r3, [pc, #464]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a73      	ldr	r2, [pc, #460]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	6713      	str	r3, [r2, #112]	; 0x70
 800316c:	e00b      	b.n	8003186 <HAL_RCC_OscConfig+0x32a>
 800316e:	4b71      	ldr	r3, [pc, #452]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	4a70      	ldr	r2, [pc, #448]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003174:	f023 0301 	bic.w	r3, r3, #1
 8003178:	6713      	str	r3, [r2, #112]	; 0x70
 800317a:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	4a6d      	ldr	r2, [pc, #436]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003180:	f023 0304 	bic.w	r3, r3, #4
 8003184:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d015      	beq.n	80031ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318e:	f7fe fa83 	bl	8001698 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003196:	f7fe fa7f 	bl	8001698 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e0bc      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ac:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	f003 0302 	and.w	r3, r3, #2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0ee      	beq.n	8003196 <HAL_RCC_OscConfig+0x33a>
 80031b8:	e014      	b.n	80031e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fa6d 	bl	8001698 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	e00a      	b.n	80031d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c2:	f7fe fa69 	bl	8001698 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e0a6      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d8:	4b56      	ldr	r3, [pc, #344]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80031da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ee      	bne.n	80031c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e4:	7dfb      	ldrb	r3, [r7, #23]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d105      	bne.n	80031f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ea:	4b52      	ldr	r3, [pc, #328]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	4a51      	ldr	r2, [pc, #324]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80031f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 8092 	beq.w	8003324 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b08      	cmp	r3, #8
 800320a:	d05c      	beq.n	80032c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	2b02      	cmp	r3, #2
 8003212:	d141      	bne.n	8003298 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003214:	4b48      	ldr	r3, [pc, #288]	; (8003338 <HAL_RCC_OscConfig+0x4dc>)
 8003216:	2200      	movs	r2, #0
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321a:	f7fe fa3d 	bl	8001698 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003222:	f7fe fa39 	bl	8001698 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e078      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003234:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	019b      	lsls	r3, r3, #6
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003256:	085b      	lsrs	r3, r3, #1
 8003258:	3b01      	subs	r3, #1
 800325a:	041b      	lsls	r3, r3, #16
 800325c:	431a      	orrs	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003262:	061b      	lsls	r3, r3, #24
 8003264:	4933      	ldr	r1, [pc, #204]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 8003266:	4313      	orrs	r3, r2
 8003268:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <HAL_RCC_OscConfig+0x4dc>)
 800326c:	2201      	movs	r2, #1
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7fe fa12 	bl	8001698 <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7fe fa0e 	bl	8001698 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04d      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328a:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f0      	beq.n	8003278 <HAL_RCC_OscConfig+0x41c>
 8003296:	e045      	b.n	8003324 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <HAL_RCC_OscConfig+0x4dc>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe f9fb 	bl	8001698 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe f9f7 	bl	8001698 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e036      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b8:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x44a>
 80032c4:	e02e      	b.n	8003324 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e029      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032d2:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_RCC_OscConfig+0x4d8>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d11c      	bne.n	8003320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d115      	bne.n	8003320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032fa:	4013      	ands	r3, r2
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003300:	4293      	cmp	r3, r2
 8003302:	d10d      	bne.n	8003320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800330e:	429a      	cmp	r2, r3
 8003310:	d106      	bne.n	8003320 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40007000 	.word	0x40007000
 8003334:	40023800 	.word	0x40023800
 8003338:	42470060 	.word	0x42470060

0800333c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0cc      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003350:	4b68      	ldr	r3, [pc, #416]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 030f 	and.w	r3, r3, #15
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	429a      	cmp	r2, r3
 800335c:	d90c      	bls.n	8003378 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335e:	4b65      	ldr	r3, [pc, #404]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003366:	4b63      	ldr	r3, [pc, #396]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 030f 	and.w	r3, r3, #15
 800336e:	683a      	ldr	r2, [r7, #0]
 8003370:	429a      	cmp	r2, r3
 8003372:	d001      	beq.n	8003378 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0b8      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0302 	and.w	r3, r3, #2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d020      	beq.n	80033c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0304 	and.w	r3, r3, #4
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003390:	4b59      	ldr	r3, [pc, #356]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4a58      	ldr	r2, [pc, #352]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800339a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d005      	beq.n	80033b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	4a52      	ldr	r2, [pc, #328]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033b4:	4b50      	ldr	r3, [pc, #320]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	494d      	ldr	r1, [pc, #308]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d044      	beq.n	800345c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d107      	bne.n	80033ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b47      	ldr	r3, [pc, #284]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d119      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e07f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b02      	cmp	r3, #2
 80033f0:	d003      	beq.n	80033fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d107      	bne.n	800340a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d109      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e06f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800340a:	4b3b      	ldr	r3, [pc, #236]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0302 	and.w	r3, r3, #2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e067      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f023 0203 	bic.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	4934      	ldr	r1, [pc, #208]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003428:	4313      	orrs	r3, r2
 800342a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800342c:	f7fe f934 	bl	8001698 <HAL_GetTick>
 8003430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003432:	e00a      	b.n	800344a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003434:	f7fe f930 	bl	8001698 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003442:	4293      	cmp	r3, r2
 8003444:	d901      	bls.n	800344a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e04f      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800344a:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 020c 	and.w	r2, r3, #12
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	429a      	cmp	r2, r3
 800345a:	d1eb      	bne.n	8003434 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800345c:	4b25      	ldr	r3, [pc, #148]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d20c      	bcs.n	8003484 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800346a:	4b22      	ldr	r3, [pc, #136]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	b2d2      	uxtb	r2, r2
 8003470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_RCC_ClockConfig+0x1b8>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d001      	beq.n	8003484 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e032      	b.n	80034ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0304 	and.w	r3, r3, #4
 800348c:	2b00      	cmp	r3, #0
 800348e:	d008      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003490:	4b19      	ldr	r3, [pc, #100]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	4916      	ldr	r1, [pc, #88]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	00db      	lsls	r3, r3, #3
 80034bc:	490e      	ldr	r1, [pc, #56]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034be:	4313      	orrs	r3, r2
 80034c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034c2:	f000 f821 	bl	8003508 <HAL_RCC_GetSysClockFreq>
 80034c6:	4601      	mov	r1, r0
 80034c8:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	091b      	lsrs	r3, r3, #4
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_RCC_ClockConfig+0x1c0>)
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	fa21 f303 	lsr.w	r3, r1, r3
 80034da:	4a09      	ldr	r2, [pc, #36]	; (8003500 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034de:	4b09      	ldr	r3, [pc, #36]	; (8003504 <HAL_RCC_ClockConfig+0x1c8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4618      	mov	r0, r3
 80034e4:	f7fe f894 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	40023c00 	.word	0x40023c00
 80034f8:	40023800 	.word	0x40023800
 80034fc:	08007360 	.word	0x08007360
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004

08003508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	2300      	movs	r3, #0
 8003518:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800351e:	4b50      	ldr	r3, [pc, #320]	; (8003660 <HAL_RCC_GetSysClockFreq+0x158>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	f003 030c 	and.w	r3, r3, #12
 8003526:	2b04      	cmp	r3, #4
 8003528:	d007      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x32>
 800352a:	2b08      	cmp	r3, #8
 800352c:	d008      	beq.n	8003540 <HAL_RCC_GetSysClockFreq+0x38>
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 808d 	bne.w	800364e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b4b      	ldr	r3, [pc, #300]	; (8003664 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003536:	60bb      	str	r3, [r7, #8]
       break;
 8003538:	e08c      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800353a:	4b4b      	ldr	r3, [pc, #300]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 800353c:	60bb      	str	r3, [r7, #8]
      break;
 800353e:	e089      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003540:	4b47      	ldr	r3, [pc, #284]	; (8003660 <HAL_RCC_GetSysClockFreq+0x158>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003548:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800354a:	4b45      	ldr	r3, [pc, #276]	; (8003660 <HAL_RCC_GetSysClockFreq+0x158>)
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003552:	2b00      	cmp	r3, #0
 8003554:	d023      	beq.n	800359e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003556:	4b42      	ldr	r3, [pc, #264]	; (8003660 <HAL_RCC_GetSysClockFreq+0x158>)
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	099b      	lsrs	r3, r3, #6
 800355c:	f04f 0400 	mov.w	r4, #0
 8003560:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	ea03 0501 	and.w	r5, r3, r1
 800356c:	ea04 0602 	and.w	r6, r4, r2
 8003570:	4a3d      	ldr	r2, [pc, #244]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 8003572:	fb02 f106 	mul.w	r1, r2, r6
 8003576:	2200      	movs	r2, #0
 8003578:	fb02 f205 	mul.w	r2, r2, r5
 800357c:	440a      	add	r2, r1
 800357e:	493a      	ldr	r1, [pc, #232]	; (8003668 <HAL_RCC_GetSysClockFreq+0x160>)
 8003580:	fba5 0101 	umull	r0, r1, r5, r1
 8003584:	1853      	adds	r3, r2, r1
 8003586:	4619      	mov	r1, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f04f 0400 	mov.w	r4, #0
 800358e:	461a      	mov	r2, r3
 8003590:	4623      	mov	r3, r4
 8003592:	f7fd fb79 	bl	8000c88 <__aeabi_uldivmod>
 8003596:	4603      	mov	r3, r0
 8003598:	460c      	mov	r4, r1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e049      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359e:	4b30      	ldr	r3, [pc, #192]	; (8003660 <HAL_RCC_GetSysClockFreq+0x158>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	099b      	lsrs	r3, r3, #6
 80035a4:	f04f 0400 	mov.w	r4, #0
 80035a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	ea03 0501 	and.w	r5, r3, r1
 80035b4:	ea04 0602 	and.w	r6, r4, r2
 80035b8:	4629      	mov	r1, r5
 80035ba:	4632      	mov	r2, r6
 80035bc:	f04f 0300 	mov.w	r3, #0
 80035c0:	f04f 0400 	mov.w	r4, #0
 80035c4:	0154      	lsls	r4, r2, #5
 80035c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035ca:	014b      	lsls	r3, r1, #5
 80035cc:	4619      	mov	r1, r3
 80035ce:	4622      	mov	r2, r4
 80035d0:	1b49      	subs	r1, r1, r5
 80035d2:	eb62 0206 	sbc.w	r2, r2, r6
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	f04f 0400 	mov.w	r4, #0
 80035de:	0194      	lsls	r4, r2, #6
 80035e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035e4:	018b      	lsls	r3, r1, #6
 80035e6:	1a5b      	subs	r3, r3, r1
 80035e8:	eb64 0402 	sbc.w	r4, r4, r2
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	00e2      	lsls	r2, r4, #3
 80035f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035fa:	00d9      	lsls	r1, r3, #3
 80035fc:	460b      	mov	r3, r1
 80035fe:	4614      	mov	r4, r2
 8003600:	195b      	adds	r3, r3, r5
 8003602:	eb44 0406 	adc.w	r4, r4, r6
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	02a2      	lsls	r2, r4, #10
 8003610:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003614:	0299      	lsls	r1, r3, #10
 8003616:	460b      	mov	r3, r1
 8003618:	4614      	mov	r4, r2
 800361a:	4618      	mov	r0, r3
 800361c:	4621      	mov	r1, r4
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	461a      	mov	r2, r3
 8003626:	4623      	mov	r3, r4
 8003628:	f7fd fb2e 	bl	8000c88 <__aeabi_uldivmod>
 800362c:	4603      	mov	r3, r0
 800362e:	460c      	mov	r4, r1
 8003630:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003632:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_GetSysClockFreq+0x158>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	3301      	adds	r3, #1
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	fbb2 f3f3 	udiv	r3, r2, r3
 800364a:	60bb      	str	r3, [r7, #8]
      break;
 800364c:	e002      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800364e:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003650:	60bb      	str	r3, [r7, #8]
      break;
 8003652:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003654:	68bb      	ldr	r3, [r7, #8]
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	00f42400 	.word	0x00f42400
 8003668:	017d7840 	.word	0x017d7840

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000000 	.word	0x20000000

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4601      	mov	r1, r0
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a9b      	lsrs	r3, r3, #10
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4a03      	ldr	r2, [pc, #12]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	08007370 	.word	0x08007370

080036ac <lcd_send_cmd>:

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup


void lcd_send_cmd (char cmd)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	f023 030f 	bic.w	r3, r3, #15
 80036bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80036c4:	7bfb      	ldrb	r3, [r7, #15]
 80036c6:	f043 030c 	orr.w	r3, r3, #12
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	f043 0308 	orr.w	r3, r3, #8
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80036d8:	7bbb      	ldrb	r3, [r7, #14]
 80036da:	f043 030c 	orr.w	r3, r3, #12
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80036e2:	7bbb      	ldrb	r3, [r7, #14]
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80036ec:	f107 0208 	add.w	r2, r7, #8
 80036f0:	2364      	movs	r3, #100	; 0x64
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	2304      	movs	r3, #4
 80036f6:	214e      	movs	r1, #78	; 0x4e
 80036f8:	4803      	ldr	r0, [pc, #12]	; (8003708 <lcd_send_cmd+0x5c>)
 80036fa:	f7fe fbb3 	bl	8001e64 <HAL_I2C_Master_Transmit>
}
 80036fe:	bf00      	nop
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20000204 	.word	0x20000204

0800370c <lcd_send_data>:


void lcd_send_data (char data)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af02      	add	r7, sp, #8
 8003712:	4603      	mov	r3, r0
 8003714:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	f023 030f 	bic.w	r3, r3, #15
 800371c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	f043 030d 	orr.w	r3, r3, #13
 800372a:	b2db      	uxtb	r3, r3
 800372c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	f043 0309 	orr.w	r3, r3, #9
 8003734:	b2db      	uxtb	r3, r3
 8003736:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8003738:	7bbb      	ldrb	r3, [r7, #14]
 800373a:	f043 030d 	orr.w	r3, r3, #13
 800373e:	b2db      	uxtb	r3, r3
 8003740:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8003742:	7bbb      	ldrb	r3, [r7, #14]
 8003744:	f043 0309 	orr.w	r3, r3, #9
 8003748:	b2db      	uxtb	r3, r3
 800374a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800374c:	f107 0208 	add.w	r2, r7, #8
 8003750:	2364      	movs	r3, #100	; 0x64
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	2304      	movs	r3, #4
 8003756:	214e      	movs	r1, #78	; 0x4e
 8003758:	4803      	ldr	r0, [pc, #12]	; (8003768 <lcd_send_data+0x5c>)
 800375a:	f7fe fb83 	bl	8001e64 <HAL_I2C_Master_Transmit>
}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000204 	.word	0x20000204

0800376c <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
    switch (row)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <lcd_put_cur+0x16>
 800377c:	2b01      	cmp	r3, #1
 800377e:	d005      	beq.n	800378c <lcd_put_cur+0x20>
 8003780:	e009      	b.n	8003796 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003788:	603b      	str	r3, [r7, #0]
            break;
 800378a:	e004      	b.n	8003796 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003792:	603b      	str	r3, [r7, #0]
            break;
 8003794:	bf00      	nop
    }

    lcd_send_cmd (col);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	b2db      	uxtb	r3, r3
 800379a:	4618      	mov	r0, r3
 800379c:	f7ff ff86 	bl	80036ac <lcd_send_cmd>
}
 80037a0:	bf00      	nop
 80037a2:	3708      	adds	r7, #8
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <lcd_init>:


void lcd_init (void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80037ac:	2032      	movs	r0, #50	; 0x32
 80037ae:	f7fd ff7f 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80037b2:	2030      	movs	r0, #48	; 0x30
 80037b4:	f7ff ff7a 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80037b8:	2005      	movs	r0, #5
 80037ba:	f7fd ff79 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80037be:	2030      	movs	r0, #48	; 0x30
 80037c0:	f7ff ff74 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80037c4:	2001      	movs	r0, #1
 80037c6:	f7fd ff73 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x30);
 80037ca:	2030      	movs	r0, #48	; 0x30
 80037cc:	f7ff ff6e 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(10);
 80037d0:	200a      	movs	r0, #10
 80037d2:	f7fd ff6d 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80037d6:	2020      	movs	r0, #32
 80037d8:	f7ff ff68 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(10);
 80037dc:	200a      	movs	r0, #10
 80037de:	f7fd ff67 	bl	80016b0 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80037e2:	2028      	movs	r0, #40	; 0x28
 80037e4:	f7ff ff62 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(1);
 80037e8:	2001      	movs	r0, #1
 80037ea:	f7fd ff61 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80037ee:	2008      	movs	r0, #8
 80037f0:	f7ff ff5c 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(1);
 80037f4:	2001      	movs	r0, #1
 80037f6:	f7fd ff5b 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80037fa:	2001      	movs	r0, #1
 80037fc:	f7ff ff56 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(1);
 8003800:	2001      	movs	r0, #1
 8003802:	f7fd ff55 	bl	80016b0 <HAL_Delay>
	HAL_Delay(1);
 8003806:	2001      	movs	r0, #1
 8003808:	f7fd ff52 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800380c:	2006      	movs	r0, #6
 800380e:	f7ff ff4d 	bl	80036ac <lcd_send_cmd>
	HAL_Delay(1);
 8003812:	2001      	movs	r0, #1
 8003814:	f7fd ff4c 	bl	80016b0 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8003818:	200c      	movs	r0, #12
 800381a:	f7ff ff47 	bl	80036ac <lcd_send_cmd>
}
 800381e:	bf00      	nop
 8003820:	bd80      	pop	{r7, pc}

08003822 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800382a:	e006      	b.n	800383a <lcd_send_string+0x18>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f7ff ff69 	bl	800370c <lcd_send_data>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f4      	bne.n	800382c <lcd_send_string+0xa>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <__errno>:
 800384c:	4b01      	ldr	r3, [pc, #4]	; (8003854 <__errno+0x8>)
 800384e:	6818      	ldr	r0, [r3, #0]
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	2000000c 	.word	0x2000000c

08003858 <__libc_init_array>:
 8003858:	b570      	push	{r4, r5, r6, lr}
 800385a:	4e0d      	ldr	r6, [pc, #52]	; (8003890 <__libc_init_array+0x38>)
 800385c:	4c0d      	ldr	r4, [pc, #52]	; (8003894 <__libc_init_array+0x3c>)
 800385e:	1ba4      	subs	r4, r4, r6
 8003860:	10a4      	asrs	r4, r4, #2
 8003862:	2500      	movs	r5, #0
 8003864:	42a5      	cmp	r5, r4
 8003866:	d109      	bne.n	800387c <__libc_init_array+0x24>
 8003868:	4e0b      	ldr	r6, [pc, #44]	; (8003898 <__libc_init_array+0x40>)
 800386a:	4c0c      	ldr	r4, [pc, #48]	; (800389c <__libc_init_array+0x44>)
 800386c:	f003 fd56 	bl	800731c <_init>
 8003870:	1ba4      	subs	r4, r4, r6
 8003872:	10a4      	asrs	r4, r4, #2
 8003874:	2500      	movs	r5, #0
 8003876:	42a5      	cmp	r5, r4
 8003878:	d105      	bne.n	8003886 <__libc_init_array+0x2e>
 800387a:	bd70      	pop	{r4, r5, r6, pc}
 800387c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003880:	4798      	blx	r3
 8003882:	3501      	adds	r5, #1
 8003884:	e7ee      	b.n	8003864 <__libc_init_array+0xc>
 8003886:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800388a:	4798      	blx	r3
 800388c:	3501      	adds	r5, #1
 800388e:	e7f2      	b.n	8003876 <__libc_init_array+0x1e>
 8003890:	08007638 	.word	0x08007638
 8003894:	08007638 	.word	0x08007638
 8003898:	08007638 	.word	0x08007638
 800389c:	0800763c 	.word	0x0800763c

080038a0 <memset>:
 80038a0:	4402      	add	r2, r0
 80038a2:	4603      	mov	r3, r0
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d100      	bne.n	80038aa <memset+0xa>
 80038a8:	4770      	bx	lr
 80038aa:	f803 1b01 	strb.w	r1, [r3], #1
 80038ae:	e7f9      	b.n	80038a4 <memset+0x4>

080038b0 <__cvt>:
 80038b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80038b4:	ec55 4b10 	vmov	r4, r5, d0
 80038b8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80038ba:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80038be:	2d00      	cmp	r5, #0
 80038c0:	460e      	mov	r6, r1
 80038c2:	4691      	mov	r9, r2
 80038c4:	4619      	mov	r1, r3
 80038c6:	bfb8      	it	lt
 80038c8:	4622      	movlt	r2, r4
 80038ca:	462b      	mov	r3, r5
 80038cc:	f027 0720 	bic.w	r7, r7, #32
 80038d0:	bfbb      	ittet	lt
 80038d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80038d6:	461d      	movlt	r5, r3
 80038d8:	2300      	movge	r3, #0
 80038da:	232d      	movlt	r3, #45	; 0x2d
 80038dc:	bfb8      	it	lt
 80038de:	4614      	movlt	r4, r2
 80038e0:	2f46      	cmp	r7, #70	; 0x46
 80038e2:	700b      	strb	r3, [r1, #0]
 80038e4:	d004      	beq.n	80038f0 <__cvt+0x40>
 80038e6:	2f45      	cmp	r7, #69	; 0x45
 80038e8:	d100      	bne.n	80038ec <__cvt+0x3c>
 80038ea:	3601      	adds	r6, #1
 80038ec:	2102      	movs	r1, #2
 80038ee:	e000      	b.n	80038f2 <__cvt+0x42>
 80038f0:	2103      	movs	r1, #3
 80038f2:	ab03      	add	r3, sp, #12
 80038f4:	9301      	str	r3, [sp, #4]
 80038f6:	ab02      	add	r3, sp, #8
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	4632      	mov	r2, r6
 80038fc:	4653      	mov	r3, sl
 80038fe:	ec45 4b10 	vmov	d0, r4, r5
 8003902:	f001 fd75 	bl	80053f0 <_dtoa_r>
 8003906:	2f47      	cmp	r7, #71	; 0x47
 8003908:	4680      	mov	r8, r0
 800390a:	d102      	bne.n	8003912 <__cvt+0x62>
 800390c:	f019 0f01 	tst.w	r9, #1
 8003910:	d026      	beq.n	8003960 <__cvt+0xb0>
 8003912:	2f46      	cmp	r7, #70	; 0x46
 8003914:	eb08 0906 	add.w	r9, r8, r6
 8003918:	d111      	bne.n	800393e <__cvt+0x8e>
 800391a:	f898 3000 	ldrb.w	r3, [r8]
 800391e:	2b30      	cmp	r3, #48	; 0x30
 8003920:	d10a      	bne.n	8003938 <__cvt+0x88>
 8003922:	2200      	movs	r2, #0
 8003924:	2300      	movs	r3, #0
 8003926:	4620      	mov	r0, r4
 8003928:	4629      	mov	r1, r5
 800392a:	f7fd f8cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800392e:	b918      	cbnz	r0, 8003938 <__cvt+0x88>
 8003930:	f1c6 0601 	rsb	r6, r6, #1
 8003934:	f8ca 6000 	str.w	r6, [sl]
 8003938:	f8da 3000 	ldr.w	r3, [sl]
 800393c:	4499      	add	r9, r3
 800393e:	2200      	movs	r2, #0
 8003940:	2300      	movs	r3, #0
 8003942:	4620      	mov	r0, r4
 8003944:	4629      	mov	r1, r5
 8003946:	f7fd f8bf 	bl	8000ac8 <__aeabi_dcmpeq>
 800394a:	b938      	cbnz	r0, 800395c <__cvt+0xac>
 800394c:	2230      	movs	r2, #48	; 0x30
 800394e:	9b03      	ldr	r3, [sp, #12]
 8003950:	454b      	cmp	r3, r9
 8003952:	d205      	bcs.n	8003960 <__cvt+0xb0>
 8003954:	1c59      	adds	r1, r3, #1
 8003956:	9103      	str	r1, [sp, #12]
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e7f8      	b.n	800394e <__cvt+0x9e>
 800395c:	f8cd 900c 	str.w	r9, [sp, #12]
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003964:	eba3 0308 	sub.w	r3, r3, r8
 8003968:	4640      	mov	r0, r8
 800396a:	6013      	str	r3, [r2, #0]
 800396c:	b004      	add	sp, #16
 800396e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003972 <__exponent>:
 8003972:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003974:	2900      	cmp	r1, #0
 8003976:	4604      	mov	r4, r0
 8003978:	bfba      	itte	lt
 800397a:	4249      	neglt	r1, r1
 800397c:	232d      	movlt	r3, #45	; 0x2d
 800397e:	232b      	movge	r3, #43	; 0x2b
 8003980:	2909      	cmp	r1, #9
 8003982:	f804 2b02 	strb.w	r2, [r4], #2
 8003986:	7043      	strb	r3, [r0, #1]
 8003988:	dd20      	ble.n	80039cc <__exponent+0x5a>
 800398a:	f10d 0307 	add.w	r3, sp, #7
 800398e:	461f      	mov	r7, r3
 8003990:	260a      	movs	r6, #10
 8003992:	fb91 f5f6 	sdiv	r5, r1, r6
 8003996:	fb06 1115 	mls	r1, r6, r5, r1
 800399a:	3130      	adds	r1, #48	; 0x30
 800399c:	2d09      	cmp	r5, #9
 800399e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80039a2:	f103 32ff 	add.w	r2, r3, #4294967295
 80039a6:	4629      	mov	r1, r5
 80039a8:	dc09      	bgt.n	80039be <__exponent+0x4c>
 80039aa:	3130      	adds	r1, #48	; 0x30
 80039ac:	3b02      	subs	r3, #2
 80039ae:	f802 1c01 	strb.w	r1, [r2, #-1]
 80039b2:	42bb      	cmp	r3, r7
 80039b4:	4622      	mov	r2, r4
 80039b6:	d304      	bcc.n	80039c2 <__exponent+0x50>
 80039b8:	1a10      	subs	r0, r2, r0
 80039ba:	b003      	add	sp, #12
 80039bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039be:	4613      	mov	r3, r2
 80039c0:	e7e7      	b.n	8003992 <__exponent+0x20>
 80039c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80039c6:	f804 2b01 	strb.w	r2, [r4], #1
 80039ca:	e7f2      	b.n	80039b2 <__exponent+0x40>
 80039cc:	2330      	movs	r3, #48	; 0x30
 80039ce:	4419      	add	r1, r3
 80039d0:	7083      	strb	r3, [r0, #2]
 80039d2:	1d02      	adds	r2, r0, #4
 80039d4:	70c1      	strb	r1, [r0, #3]
 80039d6:	e7ef      	b.n	80039b8 <__exponent+0x46>

080039d8 <_printf_float>:
 80039d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039dc:	b08d      	sub	sp, #52	; 0x34
 80039de:	460c      	mov	r4, r1
 80039e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80039e4:	4616      	mov	r6, r2
 80039e6:	461f      	mov	r7, r3
 80039e8:	4605      	mov	r5, r0
 80039ea:	f002 fde5 	bl	80065b8 <_localeconv_r>
 80039ee:	6803      	ldr	r3, [r0, #0]
 80039f0:	9304      	str	r3, [sp, #16]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fbec 	bl	80001d0 <strlen>
 80039f8:	2300      	movs	r3, #0
 80039fa:	930a      	str	r3, [sp, #40]	; 0x28
 80039fc:	f8d8 3000 	ldr.w	r3, [r8]
 8003a00:	9005      	str	r0, [sp, #20]
 8003a02:	3307      	adds	r3, #7
 8003a04:	f023 0307 	bic.w	r3, r3, #7
 8003a08:	f103 0208 	add.w	r2, r3, #8
 8003a0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003a10:	f8d4 b000 	ldr.w	fp, [r4]
 8003a14:	f8c8 2000 	str.w	r2, [r8]
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003a20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003a24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003a28:	9307      	str	r3, [sp, #28]
 8003a2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a32:	4ba7      	ldr	r3, [pc, #668]	; (8003cd0 <_printf_float+0x2f8>)
 8003a34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a38:	f7fd f878 	bl	8000b2c <__aeabi_dcmpun>
 8003a3c:	bb70      	cbnz	r0, 8003a9c <_printf_float+0xc4>
 8003a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8003a42:	4ba3      	ldr	r3, [pc, #652]	; (8003cd0 <_printf_float+0x2f8>)
 8003a44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a48:	f7fd f852 	bl	8000af0 <__aeabi_dcmple>
 8003a4c:	bb30      	cbnz	r0, 8003a9c <_printf_float+0xc4>
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2300      	movs	r3, #0
 8003a52:	4640      	mov	r0, r8
 8003a54:	4649      	mov	r1, r9
 8003a56:	f7fd f841 	bl	8000adc <__aeabi_dcmplt>
 8003a5a:	b110      	cbz	r0, 8003a62 <_printf_float+0x8a>
 8003a5c:	232d      	movs	r3, #45	; 0x2d
 8003a5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a62:	4a9c      	ldr	r2, [pc, #624]	; (8003cd4 <_printf_float+0x2fc>)
 8003a64:	4b9c      	ldr	r3, [pc, #624]	; (8003cd8 <_printf_float+0x300>)
 8003a66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003a6a:	bf8c      	ite	hi
 8003a6c:	4690      	movhi	r8, r2
 8003a6e:	4698      	movls	r8, r3
 8003a70:	2303      	movs	r3, #3
 8003a72:	f02b 0204 	bic.w	r2, fp, #4
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	6022      	str	r2, [r4, #0]
 8003a7a:	f04f 0900 	mov.w	r9, #0
 8003a7e:	9700      	str	r7, [sp, #0]
 8003a80:	4633      	mov	r3, r6
 8003a82:	aa0b      	add	r2, sp, #44	; 0x2c
 8003a84:	4621      	mov	r1, r4
 8003a86:	4628      	mov	r0, r5
 8003a88:	f000 f9e6 	bl	8003e58 <_printf_common>
 8003a8c:	3001      	adds	r0, #1
 8003a8e:	f040 808d 	bne.w	8003bac <_printf_float+0x1d4>
 8003a92:	f04f 30ff 	mov.w	r0, #4294967295
 8003a96:	b00d      	add	sp, #52	; 0x34
 8003a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a9c:	4642      	mov	r2, r8
 8003a9e:	464b      	mov	r3, r9
 8003aa0:	4640      	mov	r0, r8
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	f7fd f842 	bl	8000b2c <__aeabi_dcmpun>
 8003aa8:	b110      	cbz	r0, 8003ab0 <_printf_float+0xd8>
 8003aaa:	4a8c      	ldr	r2, [pc, #560]	; (8003cdc <_printf_float+0x304>)
 8003aac:	4b8c      	ldr	r3, [pc, #560]	; (8003ce0 <_printf_float+0x308>)
 8003aae:	e7da      	b.n	8003a66 <_printf_float+0x8e>
 8003ab0:	6861      	ldr	r1, [r4, #4]
 8003ab2:	1c4b      	adds	r3, r1, #1
 8003ab4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8003ab8:	a80a      	add	r0, sp, #40	; 0x28
 8003aba:	d13e      	bne.n	8003b3a <_printf_float+0x162>
 8003abc:	2306      	movs	r3, #6
 8003abe:	6063      	str	r3, [r4, #4]
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003ac6:	ab09      	add	r3, sp, #36	; 0x24
 8003ac8:	9300      	str	r3, [sp, #0]
 8003aca:	ec49 8b10 	vmov	d0, r8, r9
 8003ace:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003ad2:	6022      	str	r2, [r4, #0]
 8003ad4:	f8cd a004 	str.w	sl, [sp, #4]
 8003ad8:	6861      	ldr	r1, [r4, #4]
 8003ada:	4628      	mov	r0, r5
 8003adc:	f7ff fee8 	bl	80038b0 <__cvt>
 8003ae0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8003ae4:	2b47      	cmp	r3, #71	; 0x47
 8003ae6:	4680      	mov	r8, r0
 8003ae8:	d109      	bne.n	8003afe <_printf_float+0x126>
 8003aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aec:	1cd8      	adds	r0, r3, #3
 8003aee:	db02      	blt.n	8003af6 <_printf_float+0x11e>
 8003af0:	6862      	ldr	r2, [r4, #4]
 8003af2:	4293      	cmp	r3, r2
 8003af4:	dd47      	ble.n	8003b86 <_printf_float+0x1ae>
 8003af6:	f1aa 0a02 	sub.w	sl, sl, #2
 8003afa:	fa5f fa8a 	uxtb.w	sl, sl
 8003afe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003b02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003b04:	d824      	bhi.n	8003b50 <_printf_float+0x178>
 8003b06:	3901      	subs	r1, #1
 8003b08:	4652      	mov	r2, sl
 8003b0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003b0e:	9109      	str	r1, [sp, #36]	; 0x24
 8003b10:	f7ff ff2f 	bl	8003972 <__exponent>
 8003b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b16:	1813      	adds	r3, r2, r0
 8003b18:	2a01      	cmp	r2, #1
 8003b1a:	4681      	mov	r9, r0
 8003b1c:	6123      	str	r3, [r4, #16]
 8003b1e:	dc02      	bgt.n	8003b26 <_printf_float+0x14e>
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	07d1      	lsls	r1, r2, #31
 8003b24:	d501      	bpl.n	8003b2a <_printf_float+0x152>
 8003b26:	3301      	adds	r3, #1
 8003b28:	6123      	str	r3, [r4, #16]
 8003b2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0a5      	beq.n	8003a7e <_printf_float+0xa6>
 8003b32:	232d      	movs	r3, #45	; 0x2d
 8003b34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b38:	e7a1      	b.n	8003a7e <_printf_float+0xa6>
 8003b3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003b3e:	f000 8177 	beq.w	8003e30 <_printf_float+0x458>
 8003b42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8003b46:	d1bb      	bne.n	8003ac0 <_printf_float+0xe8>
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d1b9      	bne.n	8003ac0 <_printf_float+0xe8>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e7b6      	b.n	8003abe <_printf_float+0xe6>
 8003b50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8003b54:	d119      	bne.n	8003b8a <_printf_float+0x1b2>
 8003b56:	2900      	cmp	r1, #0
 8003b58:	6863      	ldr	r3, [r4, #4]
 8003b5a:	dd0c      	ble.n	8003b76 <_printf_float+0x19e>
 8003b5c:	6121      	str	r1, [r4, #16]
 8003b5e:	b913      	cbnz	r3, 8003b66 <_printf_float+0x18e>
 8003b60:	6822      	ldr	r2, [r4, #0]
 8003b62:	07d2      	lsls	r2, r2, #31
 8003b64:	d502      	bpl.n	8003b6c <_printf_float+0x194>
 8003b66:	3301      	adds	r3, #1
 8003b68:	440b      	add	r3, r1
 8003b6a:	6123      	str	r3, [r4, #16]
 8003b6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b70:	f04f 0900 	mov.w	r9, #0
 8003b74:	e7d9      	b.n	8003b2a <_printf_float+0x152>
 8003b76:	b913      	cbnz	r3, 8003b7e <_printf_float+0x1a6>
 8003b78:	6822      	ldr	r2, [r4, #0]
 8003b7a:	07d0      	lsls	r0, r2, #31
 8003b7c:	d501      	bpl.n	8003b82 <_printf_float+0x1aa>
 8003b7e:	3302      	adds	r3, #2
 8003b80:	e7f3      	b.n	8003b6a <_printf_float+0x192>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e7f1      	b.n	8003b6a <_printf_float+0x192>
 8003b86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8003b8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	db05      	blt.n	8003b9e <_printf_float+0x1c6>
 8003b92:	6822      	ldr	r2, [r4, #0]
 8003b94:	6123      	str	r3, [r4, #16]
 8003b96:	07d1      	lsls	r1, r2, #31
 8003b98:	d5e8      	bpl.n	8003b6c <_printf_float+0x194>
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	e7e5      	b.n	8003b6a <_printf_float+0x192>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	bfd4      	ite	le
 8003ba2:	f1c3 0302 	rsble	r3, r3, #2
 8003ba6:	2301      	movgt	r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	e7de      	b.n	8003b6a <_printf_float+0x192>
 8003bac:	6823      	ldr	r3, [r4, #0]
 8003bae:	055a      	lsls	r2, r3, #21
 8003bb0:	d407      	bmi.n	8003bc2 <_printf_float+0x1ea>
 8003bb2:	6923      	ldr	r3, [r4, #16]
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	4631      	mov	r1, r6
 8003bb8:	4628      	mov	r0, r5
 8003bba:	47b8      	blx	r7
 8003bbc:	3001      	adds	r0, #1
 8003bbe:	d12b      	bne.n	8003c18 <_printf_float+0x240>
 8003bc0:	e767      	b.n	8003a92 <_printf_float+0xba>
 8003bc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8003bc6:	f240 80dc 	bls.w	8003d82 <_printf_float+0x3aa>
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2300      	movs	r3, #0
 8003bce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003bd2:	f7fc ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d033      	beq.n	8003c42 <_printf_float+0x26a>
 8003bda:	2301      	movs	r3, #1
 8003bdc:	4a41      	ldr	r2, [pc, #260]	; (8003ce4 <_printf_float+0x30c>)
 8003bde:	4631      	mov	r1, r6
 8003be0:	4628      	mov	r0, r5
 8003be2:	47b8      	blx	r7
 8003be4:	3001      	adds	r0, #1
 8003be6:	f43f af54 	beq.w	8003a92 <_printf_float+0xba>
 8003bea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	db02      	blt.n	8003bf8 <_printf_float+0x220>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	07d8      	lsls	r0, r3, #31
 8003bf6:	d50f      	bpl.n	8003c18 <_printf_float+0x240>
 8003bf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bfc:	4631      	mov	r1, r6
 8003bfe:	4628      	mov	r0, r5
 8003c00:	47b8      	blx	r7
 8003c02:	3001      	adds	r0, #1
 8003c04:	f43f af45 	beq.w	8003a92 <_printf_float+0xba>
 8003c08:	f04f 0800 	mov.w	r8, #0
 8003c0c:	f104 091a 	add.w	r9, r4, #26
 8003c10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c12:	3b01      	subs	r3, #1
 8003c14:	4543      	cmp	r3, r8
 8003c16:	dc09      	bgt.n	8003c2c <_printf_float+0x254>
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	079b      	lsls	r3, r3, #30
 8003c1c:	f100 8103 	bmi.w	8003e26 <_printf_float+0x44e>
 8003c20:	68e0      	ldr	r0, [r4, #12]
 8003c22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003c24:	4298      	cmp	r0, r3
 8003c26:	bfb8      	it	lt
 8003c28:	4618      	movlt	r0, r3
 8003c2a:	e734      	b.n	8003a96 <_printf_float+0xbe>
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	464a      	mov	r2, r9
 8003c30:	4631      	mov	r1, r6
 8003c32:	4628      	mov	r0, r5
 8003c34:	47b8      	blx	r7
 8003c36:	3001      	adds	r0, #1
 8003c38:	f43f af2b 	beq.w	8003a92 <_printf_float+0xba>
 8003c3c:	f108 0801 	add.w	r8, r8, #1
 8003c40:	e7e6      	b.n	8003c10 <_printf_float+0x238>
 8003c42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	dc2b      	bgt.n	8003ca0 <_printf_float+0x2c8>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <_printf_float+0x30c>)
 8003c4c:	4631      	mov	r1, r6
 8003c4e:	4628      	mov	r0, r5
 8003c50:	47b8      	blx	r7
 8003c52:	3001      	adds	r0, #1
 8003c54:	f43f af1d 	beq.w	8003a92 <_printf_float+0xba>
 8003c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c5a:	b923      	cbnz	r3, 8003c66 <_printf_float+0x28e>
 8003c5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c5e:	b913      	cbnz	r3, 8003c66 <_printf_float+0x28e>
 8003c60:	6823      	ldr	r3, [r4, #0]
 8003c62:	07d9      	lsls	r1, r3, #31
 8003c64:	d5d8      	bpl.n	8003c18 <_printf_float+0x240>
 8003c66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c6a:	4631      	mov	r1, r6
 8003c6c:	4628      	mov	r0, r5
 8003c6e:	47b8      	blx	r7
 8003c70:	3001      	adds	r0, #1
 8003c72:	f43f af0e 	beq.w	8003a92 <_printf_float+0xba>
 8003c76:	f04f 0900 	mov.w	r9, #0
 8003c7a:	f104 0a1a 	add.w	sl, r4, #26
 8003c7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c80:	425b      	negs	r3, r3
 8003c82:	454b      	cmp	r3, r9
 8003c84:	dc01      	bgt.n	8003c8a <_printf_float+0x2b2>
 8003c86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003c88:	e794      	b.n	8003bb4 <_printf_float+0x1dc>
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	4652      	mov	r2, sl
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4628      	mov	r0, r5
 8003c92:	47b8      	blx	r7
 8003c94:	3001      	adds	r0, #1
 8003c96:	f43f aefc 	beq.w	8003a92 <_printf_float+0xba>
 8003c9a:	f109 0901 	add.w	r9, r9, #1
 8003c9e:	e7ee      	b.n	8003c7e <_printf_float+0x2a6>
 8003ca0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003ca2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	bfa8      	it	ge
 8003ca8:	461a      	movge	r2, r3
 8003caa:	2a00      	cmp	r2, #0
 8003cac:	4691      	mov	r9, r2
 8003cae:	dd07      	ble.n	8003cc0 <_printf_float+0x2e8>
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	4628      	mov	r0, r5
 8003cb8:	47b8      	blx	r7
 8003cba:	3001      	adds	r0, #1
 8003cbc:	f43f aee9 	beq.w	8003a92 <_printf_float+0xba>
 8003cc0:	f104 031a 	add.w	r3, r4, #26
 8003cc4:	f04f 0b00 	mov.w	fp, #0
 8003cc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ccc:	9306      	str	r3, [sp, #24]
 8003cce:	e015      	b.n	8003cfc <_printf_float+0x324>
 8003cd0:	7fefffff 	.word	0x7fefffff
 8003cd4:	0800737c 	.word	0x0800737c
 8003cd8:	08007378 	.word	0x08007378
 8003cdc:	08007384 	.word	0x08007384
 8003ce0:	08007380 	.word	0x08007380
 8003ce4:	08007388 	.word	0x08007388
 8003ce8:	2301      	movs	r3, #1
 8003cea:	9a06      	ldr	r2, [sp, #24]
 8003cec:	4631      	mov	r1, r6
 8003cee:	4628      	mov	r0, r5
 8003cf0:	47b8      	blx	r7
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	f43f aecd 	beq.w	8003a92 <_printf_float+0xba>
 8003cf8:	f10b 0b01 	add.w	fp, fp, #1
 8003cfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d00:	ebaa 0309 	sub.w	r3, sl, r9
 8003d04:	455b      	cmp	r3, fp
 8003d06:	dcef      	bgt.n	8003ce8 <_printf_float+0x310>
 8003d08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	44d0      	add	r8, sl
 8003d10:	db15      	blt.n	8003d3e <_printf_float+0x366>
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	07da      	lsls	r2, r3, #31
 8003d16:	d412      	bmi.n	8003d3e <_printf_float+0x366>
 8003d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003d1c:	eba3 020a 	sub.w	r2, r3, sl
 8003d20:	eba3 0a01 	sub.w	sl, r3, r1
 8003d24:	4592      	cmp	sl, r2
 8003d26:	bfa8      	it	ge
 8003d28:	4692      	movge	sl, r2
 8003d2a:	f1ba 0f00 	cmp.w	sl, #0
 8003d2e:	dc0e      	bgt.n	8003d4e <_printf_float+0x376>
 8003d30:	f04f 0800 	mov.w	r8, #0
 8003d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003d38:	f104 091a 	add.w	r9, r4, #26
 8003d3c:	e019      	b.n	8003d72 <_printf_float+0x39a>
 8003d3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d42:	4631      	mov	r1, r6
 8003d44:	4628      	mov	r0, r5
 8003d46:	47b8      	blx	r7
 8003d48:	3001      	adds	r0, #1
 8003d4a:	d1e5      	bne.n	8003d18 <_printf_float+0x340>
 8003d4c:	e6a1      	b.n	8003a92 <_printf_float+0xba>
 8003d4e:	4653      	mov	r3, sl
 8003d50:	4642      	mov	r2, r8
 8003d52:	4631      	mov	r1, r6
 8003d54:	4628      	mov	r0, r5
 8003d56:	47b8      	blx	r7
 8003d58:	3001      	adds	r0, #1
 8003d5a:	d1e9      	bne.n	8003d30 <_printf_float+0x358>
 8003d5c:	e699      	b.n	8003a92 <_printf_float+0xba>
 8003d5e:	2301      	movs	r3, #1
 8003d60:	464a      	mov	r2, r9
 8003d62:	4631      	mov	r1, r6
 8003d64:	4628      	mov	r0, r5
 8003d66:	47b8      	blx	r7
 8003d68:	3001      	adds	r0, #1
 8003d6a:	f43f ae92 	beq.w	8003a92 <_printf_float+0xba>
 8003d6e:	f108 0801 	add.w	r8, r8, #1
 8003d72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	eba3 030a 	sub.w	r3, r3, sl
 8003d7c:	4543      	cmp	r3, r8
 8003d7e:	dcee      	bgt.n	8003d5e <_printf_float+0x386>
 8003d80:	e74a      	b.n	8003c18 <_printf_float+0x240>
 8003d82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003d84:	2a01      	cmp	r2, #1
 8003d86:	dc01      	bgt.n	8003d8c <_printf_float+0x3b4>
 8003d88:	07db      	lsls	r3, r3, #31
 8003d8a:	d53a      	bpl.n	8003e02 <_printf_float+0x42a>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	4642      	mov	r2, r8
 8003d90:	4631      	mov	r1, r6
 8003d92:	4628      	mov	r0, r5
 8003d94:	47b8      	blx	r7
 8003d96:	3001      	adds	r0, #1
 8003d98:	f43f ae7b 	beq.w	8003a92 <_printf_float+0xba>
 8003d9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003da0:	4631      	mov	r1, r6
 8003da2:	4628      	mov	r0, r5
 8003da4:	47b8      	blx	r7
 8003da6:	3001      	adds	r0, #1
 8003da8:	f108 0801 	add.w	r8, r8, #1
 8003dac:	f43f ae71 	beq.w	8003a92 <_printf_float+0xba>
 8003db0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003db2:	2200      	movs	r2, #0
 8003db4:	f103 3aff 	add.w	sl, r3, #4294967295
 8003db8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	f7fc fe83 	bl	8000ac8 <__aeabi_dcmpeq>
 8003dc2:	b9c8      	cbnz	r0, 8003df8 <_printf_float+0x420>
 8003dc4:	4653      	mov	r3, sl
 8003dc6:	4642      	mov	r2, r8
 8003dc8:	4631      	mov	r1, r6
 8003dca:	4628      	mov	r0, r5
 8003dcc:	47b8      	blx	r7
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d10e      	bne.n	8003df0 <_printf_float+0x418>
 8003dd2:	e65e      	b.n	8003a92 <_printf_float+0xba>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	4652      	mov	r2, sl
 8003dd8:	4631      	mov	r1, r6
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b8      	blx	r7
 8003dde:	3001      	adds	r0, #1
 8003de0:	f43f ae57 	beq.w	8003a92 <_printf_float+0xba>
 8003de4:	f108 0801 	add.w	r8, r8, #1
 8003de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	4543      	cmp	r3, r8
 8003dee:	dcf1      	bgt.n	8003dd4 <_printf_float+0x3fc>
 8003df0:	464b      	mov	r3, r9
 8003df2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003df6:	e6de      	b.n	8003bb6 <_printf_float+0x1de>
 8003df8:	f04f 0800 	mov.w	r8, #0
 8003dfc:	f104 0a1a 	add.w	sl, r4, #26
 8003e00:	e7f2      	b.n	8003de8 <_printf_float+0x410>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e7df      	b.n	8003dc6 <_printf_float+0x3ee>
 8003e06:	2301      	movs	r3, #1
 8003e08:	464a      	mov	r2, r9
 8003e0a:	4631      	mov	r1, r6
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	47b8      	blx	r7
 8003e10:	3001      	adds	r0, #1
 8003e12:	f43f ae3e 	beq.w	8003a92 <_printf_float+0xba>
 8003e16:	f108 0801 	add.w	r8, r8, #1
 8003e1a:	68e3      	ldr	r3, [r4, #12]
 8003e1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	4543      	cmp	r3, r8
 8003e22:	dcf0      	bgt.n	8003e06 <_printf_float+0x42e>
 8003e24:	e6fc      	b.n	8003c20 <_printf_float+0x248>
 8003e26:	f04f 0800 	mov.w	r8, #0
 8003e2a:	f104 0919 	add.w	r9, r4, #25
 8003e2e:	e7f4      	b.n	8003e1a <_printf_float+0x442>
 8003e30:	2900      	cmp	r1, #0
 8003e32:	f43f ae8b 	beq.w	8003b4c <_printf_float+0x174>
 8003e36:	2300      	movs	r3, #0
 8003e38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003e3c:	ab09      	add	r3, sp, #36	; 0x24
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	ec49 8b10 	vmov	d0, r8, r9
 8003e44:	6022      	str	r2, [r4, #0]
 8003e46:	f8cd a004 	str.w	sl, [sp, #4]
 8003e4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f7ff fd2e 	bl	80038b0 <__cvt>
 8003e54:	4680      	mov	r8, r0
 8003e56:	e648      	b.n	8003aea <_printf_float+0x112>

08003e58 <_printf_common>:
 8003e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e5c:	4691      	mov	r9, r2
 8003e5e:	461f      	mov	r7, r3
 8003e60:	688a      	ldr	r2, [r1, #8]
 8003e62:	690b      	ldr	r3, [r1, #16]
 8003e64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	bfb8      	it	lt
 8003e6c:	4613      	movlt	r3, r2
 8003e6e:	f8c9 3000 	str.w	r3, [r9]
 8003e72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e76:	4606      	mov	r6, r0
 8003e78:	460c      	mov	r4, r1
 8003e7a:	b112      	cbz	r2, 8003e82 <_printf_common+0x2a>
 8003e7c:	3301      	adds	r3, #1
 8003e7e:	f8c9 3000 	str.w	r3, [r9]
 8003e82:	6823      	ldr	r3, [r4, #0]
 8003e84:	0699      	lsls	r1, r3, #26
 8003e86:	bf42      	ittt	mi
 8003e88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e8c:	3302      	addmi	r3, #2
 8003e8e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e92:	6825      	ldr	r5, [r4, #0]
 8003e94:	f015 0506 	ands.w	r5, r5, #6
 8003e98:	d107      	bne.n	8003eaa <_printf_common+0x52>
 8003e9a:	f104 0a19 	add.w	sl, r4, #25
 8003e9e:	68e3      	ldr	r3, [r4, #12]
 8003ea0:	f8d9 2000 	ldr.w	r2, [r9]
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	42ab      	cmp	r3, r5
 8003ea8:	dc28      	bgt.n	8003efc <_printf_common+0xa4>
 8003eaa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	3300      	adds	r3, #0
 8003eb2:	bf18      	it	ne
 8003eb4:	2301      	movne	r3, #1
 8003eb6:	0692      	lsls	r2, r2, #26
 8003eb8:	d42d      	bmi.n	8003f16 <_printf_common+0xbe>
 8003eba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003ebe:	4639      	mov	r1, r7
 8003ec0:	4630      	mov	r0, r6
 8003ec2:	47c0      	blx	r8
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	d020      	beq.n	8003f0a <_printf_common+0xb2>
 8003ec8:	6823      	ldr	r3, [r4, #0]
 8003eca:	68e5      	ldr	r5, [r4, #12]
 8003ecc:	f8d9 2000 	ldr.w	r2, [r9]
 8003ed0:	f003 0306 	and.w	r3, r3, #6
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	bf08      	it	eq
 8003ed8:	1aad      	subeq	r5, r5, r2
 8003eda:	68a3      	ldr	r3, [r4, #8]
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	bf0c      	ite	eq
 8003ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ee4:	2500      	movne	r5, #0
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	bfc4      	itt	gt
 8003eea:	1a9b      	subgt	r3, r3, r2
 8003eec:	18ed      	addgt	r5, r5, r3
 8003eee:	f04f 0900 	mov.w	r9, #0
 8003ef2:	341a      	adds	r4, #26
 8003ef4:	454d      	cmp	r5, r9
 8003ef6:	d11a      	bne.n	8003f2e <_printf_common+0xd6>
 8003ef8:	2000      	movs	r0, #0
 8003efa:	e008      	b.n	8003f0e <_printf_common+0xb6>
 8003efc:	2301      	movs	r3, #1
 8003efe:	4652      	mov	r2, sl
 8003f00:	4639      	mov	r1, r7
 8003f02:	4630      	mov	r0, r6
 8003f04:	47c0      	blx	r8
 8003f06:	3001      	adds	r0, #1
 8003f08:	d103      	bne.n	8003f12 <_printf_common+0xba>
 8003f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f12:	3501      	adds	r5, #1
 8003f14:	e7c3      	b.n	8003e9e <_printf_common+0x46>
 8003f16:	18e1      	adds	r1, r4, r3
 8003f18:	1c5a      	adds	r2, r3, #1
 8003f1a:	2030      	movs	r0, #48	; 0x30
 8003f1c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003f20:	4422      	add	r2, r4
 8003f22:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003f26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003f2a:	3302      	adds	r3, #2
 8003f2c:	e7c5      	b.n	8003eba <_printf_common+0x62>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	4622      	mov	r2, r4
 8003f32:	4639      	mov	r1, r7
 8003f34:	4630      	mov	r0, r6
 8003f36:	47c0      	blx	r8
 8003f38:	3001      	adds	r0, #1
 8003f3a:	d0e6      	beq.n	8003f0a <_printf_common+0xb2>
 8003f3c:	f109 0901 	add.w	r9, r9, #1
 8003f40:	e7d8      	b.n	8003ef4 <_printf_common+0x9c>
	...

08003f44 <_printf_i>:
 8003f44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f48:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f4c:	460c      	mov	r4, r1
 8003f4e:	7e09      	ldrb	r1, [r1, #24]
 8003f50:	b085      	sub	sp, #20
 8003f52:	296e      	cmp	r1, #110	; 0x6e
 8003f54:	4617      	mov	r7, r2
 8003f56:	4606      	mov	r6, r0
 8003f58:	4698      	mov	r8, r3
 8003f5a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f5c:	f000 80b3 	beq.w	80040c6 <_printf_i+0x182>
 8003f60:	d822      	bhi.n	8003fa8 <_printf_i+0x64>
 8003f62:	2963      	cmp	r1, #99	; 0x63
 8003f64:	d036      	beq.n	8003fd4 <_printf_i+0x90>
 8003f66:	d80a      	bhi.n	8003f7e <_printf_i+0x3a>
 8003f68:	2900      	cmp	r1, #0
 8003f6a:	f000 80b9 	beq.w	80040e0 <_printf_i+0x19c>
 8003f6e:	2958      	cmp	r1, #88	; 0x58
 8003f70:	f000 8083 	beq.w	800407a <_printf_i+0x136>
 8003f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f78:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f7c:	e032      	b.n	8003fe4 <_printf_i+0xa0>
 8003f7e:	2964      	cmp	r1, #100	; 0x64
 8003f80:	d001      	beq.n	8003f86 <_printf_i+0x42>
 8003f82:	2969      	cmp	r1, #105	; 0x69
 8003f84:	d1f6      	bne.n	8003f74 <_printf_i+0x30>
 8003f86:	6820      	ldr	r0, [r4, #0]
 8003f88:	6813      	ldr	r3, [r2, #0]
 8003f8a:	0605      	lsls	r5, r0, #24
 8003f8c:	f103 0104 	add.w	r1, r3, #4
 8003f90:	d52a      	bpl.n	8003fe8 <_printf_i+0xa4>
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6011      	str	r1, [r2, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	da03      	bge.n	8003fa2 <_printf_i+0x5e>
 8003f9a:	222d      	movs	r2, #45	; 0x2d
 8003f9c:	425b      	negs	r3, r3
 8003f9e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003fa2:	486f      	ldr	r0, [pc, #444]	; (8004160 <_printf_i+0x21c>)
 8003fa4:	220a      	movs	r2, #10
 8003fa6:	e039      	b.n	800401c <_printf_i+0xd8>
 8003fa8:	2973      	cmp	r1, #115	; 0x73
 8003faa:	f000 809d 	beq.w	80040e8 <_printf_i+0x1a4>
 8003fae:	d808      	bhi.n	8003fc2 <_printf_i+0x7e>
 8003fb0:	296f      	cmp	r1, #111	; 0x6f
 8003fb2:	d020      	beq.n	8003ff6 <_printf_i+0xb2>
 8003fb4:	2970      	cmp	r1, #112	; 0x70
 8003fb6:	d1dd      	bne.n	8003f74 <_printf_i+0x30>
 8003fb8:	6823      	ldr	r3, [r4, #0]
 8003fba:	f043 0320 	orr.w	r3, r3, #32
 8003fbe:	6023      	str	r3, [r4, #0]
 8003fc0:	e003      	b.n	8003fca <_printf_i+0x86>
 8003fc2:	2975      	cmp	r1, #117	; 0x75
 8003fc4:	d017      	beq.n	8003ff6 <_printf_i+0xb2>
 8003fc6:	2978      	cmp	r1, #120	; 0x78
 8003fc8:	d1d4      	bne.n	8003f74 <_printf_i+0x30>
 8003fca:	2378      	movs	r3, #120	; 0x78
 8003fcc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fd0:	4864      	ldr	r0, [pc, #400]	; (8004164 <_printf_i+0x220>)
 8003fd2:	e055      	b.n	8004080 <_printf_i+0x13c>
 8003fd4:	6813      	ldr	r3, [r2, #0]
 8003fd6:	1d19      	adds	r1, r3, #4
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6011      	str	r1, [r2, #0]
 8003fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e08c      	b.n	8004102 <_printf_i+0x1be>
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6011      	str	r1, [r2, #0]
 8003fec:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ff0:	bf18      	it	ne
 8003ff2:	b21b      	sxthne	r3, r3
 8003ff4:	e7cf      	b.n	8003f96 <_printf_i+0x52>
 8003ff6:	6813      	ldr	r3, [r2, #0]
 8003ff8:	6825      	ldr	r5, [r4, #0]
 8003ffa:	1d18      	adds	r0, r3, #4
 8003ffc:	6010      	str	r0, [r2, #0]
 8003ffe:	0628      	lsls	r0, r5, #24
 8004000:	d501      	bpl.n	8004006 <_printf_i+0xc2>
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	e002      	b.n	800400c <_printf_i+0xc8>
 8004006:	0668      	lsls	r0, r5, #25
 8004008:	d5fb      	bpl.n	8004002 <_printf_i+0xbe>
 800400a:	881b      	ldrh	r3, [r3, #0]
 800400c:	4854      	ldr	r0, [pc, #336]	; (8004160 <_printf_i+0x21c>)
 800400e:	296f      	cmp	r1, #111	; 0x6f
 8004010:	bf14      	ite	ne
 8004012:	220a      	movne	r2, #10
 8004014:	2208      	moveq	r2, #8
 8004016:	2100      	movs	r1, #0
 8004018:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800401c:	6865      	ldr	r5, [r4, #4]
 800401e:	60a5      	str	r5, [r4, #8]
 8004020:	2d00      	cmp	r5, #0
 8004022:	f2c0 8095 	blt.w	8004150 <_printf_i+0x20c>
 8004026:	6821      	ldr	r1, [r4, #0]
 8004028:	f021 0104 	bic.w	r1, r1, #4
 800402c:	6021      	str	r1, [r4, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d13d      	bne.n	80040ae <_printf_i+0x16a>
 8004032:	2d00      	cmp	r5, #0
 8004034:	f040 808e 	bne.w	8004154 <_printf_i+0x210>
 8004038:	4665      	mov	r5, ip
 800403a:	2a08      	cmp	r2, #8
 800403c:	d10b      	bne.n	8004056 <_printf_i+0x112>
 800403e:	6823      	ldr	r3, [r4, #0]
 8004040:	07db      	lsls	r3, r3, #31
 8004042:	d508      	bpl.n	8004056 <_printf_i+0x112>
 8004044:	6923      	ldr	r3, [r4, #16]
 8004046:	6862      	ldr	r2, [r4, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	bfde      	ittt	le
 800404c:	2330      	movle	r3, #48	; 0x30
 800404e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004052:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004056:	ebac 0305 	sub.w	r3, ip, r5
 800405a:	6123      	str	r3, [r4, #16]
 800405c:	f8cd 8000 	str.w	r8, [sp]
 8004060:	463b      	mov	r3, r7
 8004062:	aa03      	add	r2, sp, #12
 8004064:	4621      	mov	r1, r4
 8004066:	4630      	mov	r0, r6
 8004068:	f7ff fef6 	bl	8003e58 <_printf_common>
 800406c:	3001      	adds	r0, #1
 800406e:	d14d      	bne.n	800410c <_printf_i+0x1c8>
 8004070:	f04f 30ff 	mov.w	r0, #4294967295
 8004074:	b005      	add	sp, #20
 8004076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800407a:	4839      	ldr	r0, [pc, #228]	; (8004160 <_printf_i+0x21c>)
 800407c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004080:	6813      	ldr	r3, [r2, #0]
 8004082:	6821      	ldr	r1, [r4, #0]
 8004084:	1d1d      	adds	r5, r3, #4
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6015      	str	r5, [r2, #0]
 800408a:	060a      	lsls	r2, r1, #24
 800408c:	d50b      	bpl.n	80040a6 <_printf_i+0x162>
 800408e:	07ca      	lsls	r2, r1, #31
 8004090:	bf44      	itt	mi
 8004092:	f041 0120 	orrmi.w	r1, r1, #32
 8004096:	6021      	strmi	r1, [r4, #0]
 8004098:	b91b      	cbnz	r3, 80040a2 <_printf_i+0x15e>
 800409a:	6822      	ldr	r2, [r4, #0]
 800409c:	f022 0220 	bic.w	r2, r2, #32
 80040a0:	6022      	str	r2, [r4, #0]
 80040a2:	2210      	movs	r2, #16
 80040a4:	e7b7      	b.n	8004016 <_printf_i+0xd2>
 80040a6:	064d      	lsls	r5, r1, #25
 80040a8:	bf48      	it	mi
 80040aa:	b29b      	uxthmi	r3, r3
 80040ac:	e7ef      	b.n	800408e <_printf_i+0x14a>
 80040ae:	4665      	mov	r5, ip
 80040b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80040b4:	fb02 3311 	mls	r3, r2, r1, r3
 80040b8:	5cc3      	ldrb	r3, [r0, r3]
 80040ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80040be:	460b      	mov	r3, r1
 80040c0:	2900      	cmp	r1, #0
 80040c2:	d1f5      	bne.n	80040b0 <_printf_i+0x16c>
 80040c4:	e7b9      	b.n	800403a <_printf_i+0xf6>
 80040c6:	6813      	ldr	r3, [r2, #0]
 80040c8:	6825      	ldr	r5, [r4, #0]
 80040ca:	6961      	ldr	r1, [r4, #20]
 80040cc:	1d18      	adds	r0, r3, #4
 80040ce:	6010      	str	r0, [r2, #0]
 80040d0:	0628      	lsls	r0, r5, #24
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	d501      	bpl.n	80040da <_printf_i+0x196>
 80040d6:	6019      	str	r1, [r3, #0]
 80040d8:	e002      	b.n	80040e0 <_printf_i+0x19c>
 80040da:	066a      	lsls	r2, r5, #25
 80040dc:	d5fb      	bpl.n	80040d6 <_printf_i+0x192>
 80040de:	8019      	strh	r1, [r3, #0]
 80040e0:	2300      	movs	r3, #0
 80040e2:	6123      	str	r3, [r4, #16]
 80040e4:	4665      	mov	r5, ip
 80040e6:	e7b9      	b.n	800405c <_printf_i+0x118>
 80040e8:	6813      	ldr	r3, [r2, #0]
 80040ea:	1d19      	adds	r1, r3, #4
 80040ec:	6011      	str	r1, [r2, #0]
 80040ee:	681d      	ldr	r5, [r3, #0]
 80040f0:	6862      	ldr	r2, [r4, #4]
 80040f2:	2100      	movs	r1, #0
 80040f4:	4628      	mov	r0, r5
 80040f6:	f7fc f873 	bl	80001e0 <memchr>
 80040fa:	b108      	cbz	r0, 8004100 <_printf_i+0x1bc>
 80040fc:	1b40      	subs	r0, r0, r5
 80040fe:	6060      	str	r0, [r4, #4]
 8004100:	6863      	ldr	r3, [r4, #4]
 8004102:	6123      	str	r3, [r4, #16]
 8004104:	2300      	movs	r3, #0
 8004106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800410a:	e7a7      	b.n	800405c <_printf_i+0x118>
 800410c:	6923      	ldr	r3, [r4, #16]
 800410e:	462a      	mov	r2, r5
 8004110:	4639      	mov	r1, r7
 8004112:	4630      	mov	r0, r6
 8004114:	47c0      	blx	r8
 8004116:	3001      	adds	r0, #1
 8004118:	d0aa      	beq.n	8004070 <_printf_i+0x12c>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	079b      	lsls	r3, r3, #30
 800411e:	d413      	bmi.n	8004148 <_printf_i+0x204>
 8004120:	68e0      	ldr	r0, [r4, #12]
 8004122:	9b03      	ldr	r3, [sp, #12]
 8004124:	4298      	cmp	r0, r3
 8004126:	bfb8      	it	lt
 8004128:	4618      	movlt	r0, r3
 800412a:	e7a3      	b.n	8004074 <_printf_i+0x130>
 800412c:	2301      	movs	r3, #1
 800412e:	464a      	mov	r2, r9
 8004130:	4639      	mov	r1, r7
 8004132:	4630      	mov	r0, r6
 8004134:	47c0      	blx	r8
 8004136:	3001      	adds	r0, #1
 8004138:	d09a      	beq.n	8004070 <_printf_i+0x12c>
 800413a:	3501      	adds	r5, #1
 800413c:	68e3      	ldr	r3, [r4, #12]
 800413e:	9a03      	ldr	r2, [sp, #12]
 8004140:	1a9b      	subs	r3, r3, r2
 8004142:	42ab      	cmp	r3, r5
 8004144:	dcf2      	bgt.n	800412c <_printf_i+0x1e8>
 8004146:	e7eb      	b.n	8004120 <_printf_i+0x1dc>
 8004148:	2500      	movs	r5, #0
 800414a:	f104 0919 	add.w	r9, r4, #25
 800414e:	e7f5      	b.n	800413c <_printf_i+0x1f8>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ac      	bne.n	80040ae <_printf_i+0x16a>
 8004154:	7803      	ldrb	r3, [r0, #0]
 8004156:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800415a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800415e:	e76c      	b.n	800403a <_printf_i+0xf6>
 8004160:	0800738a 	.word	0x0800738a
 8004164:	0800739b 	.word	0x0800739b

08004168 <_scanf_float>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	469a      	mov	sl, r3
 800416e:	688b      	ldr	r3, [r1, #8]
 8004170:	4616      	mov	r6, r2
 8004172:	1e5a      	subs	r2, r3, #1
 8004174:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004178:	b087      	sub	sp, #28
 800417a:	bf83      	ittte	hi
 800417c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8004180:	189b      	addhi	r3, r3, r2
 8004182:	9301      	strhi	r3, [sp, #4]
 8004184:	2300      	movls	r3, #0
 8004186:	bf86      	itte	hi
 8004188:	f240 135d 	movwhi	r3, #349	; 0x15d
 800418c:	608b      	strhi	r3, [r1, #8]
 800418e:	9301      	strls	r3, [sp, #4]
 8004190:	680b      	ldr	r3, [r1, #0]
 8004192:	4688      	mov	r8, r1
 8004194:	f04f 0b00 	mov.w	fp, #0
 8004198:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800419c:	f848 3b1c 	str.w	r3, [r8], #28
 80041a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80041a4:	4607      	mov	r7, r0
 80041a6:	460c      	mov	r4, r1
 80041a8:	4645      	mov	r5, r8
 80041aa:	465a      	mov	r2, fp
 80041ac:	46d9      	mov	r9, fp
 80041ae:	f8cd b008 	str.w	fp, [sp, #8]
 80041b2:	68a1      	ldr	r1, [r4, #8]
 80041b4:	b181      	cbz	r1, 80041d8 <_scanf_float+0x70>
 80041b6:	6833      	ldr	r3, [r6, #0]
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	2b49      	cmp	r3, #73	; 0x49
 80041bc:	d071      	beq.n	80042a2 <_scanf_float+0x13a>
 80041be:	d84d      	bhi.n	800425c <_scanf_float+0xf4>
 80041c0:	2b39      	cmp	r3, #57	; 0x39
 80041c2:	d840      	bhi.n	8004246 <_scanf_float+0xde>
 80041c4:	2b31      	cmp	r3, #49	; 0x31
 80041c6:	f080 8088 	bcs.w	80042da <_scanf_float+0x172>
 80041ca:	2b2d      	cmp	r3, #45	; 0x2d
 80041cc:	f000 8090 	beq.w	80042f0 <_scanf_float+0x188>
 80041d0:	d815      	bhi.n	80041fe <_scanf_float+0x96>
 80041d2:	2b2b      	cmp	r3, #43	; 0x2b
 80041d4:	f000 808c 	beq.w	80042f0 <_scanf_float+0x188>
 80041d8:	f1b9 0f00 	cmp.w	r9, #0
 80041dc:	d003      	beq.n	80041e6 <_scanf_float+0x7e>
 80041de:	6823      	ldr	r3, [r4, #0]
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	6023      	str	r3, [r4, #0]
 80041e6:	3a01      	subs	r2, #1
 80041e8:	2a01      	cmp	r2, #1
 80041ea:	f200 80ea 	bhi.w	80043c2 <_scanf_float+0x25a>
 80041ee:	4545      	cmp	r5, r8
 80041f0:	f200 80dc 	bhi.w	80043ac <_scanf_float+0x244>
 80041f4:	2601      	movs	r6, #1
 80041f6:	4630      	mov	r0, r6
 80041f8:	b007      	add	sp, #28
 80041fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004200:	f000 809f 	beq.w	8004342 <_scanf_float+0x1da>
 8004204:	2b30      	cmp	r3, #48	; 0x30
 8004206:	d1e7      	bne.n	80041d8 <_scanf_float+0x70>
 8004208:	6820      	ldr	r0, [r4, #0]
 800420a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800420e:	d064      	beq.n	80042da <_scanf_float+0x172>
 8004210:	9b01      	ldr	r3, [sp, #4]
 8004212:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8004216:	6020      	str	r0, [r4, #0]
 8004218:	f109 0901 	add.w	r9, r9, #1
 800421c:	b11b      	cbz	r3, 8004226 <_scanf_float+0xbe>
 800421e:	3b01      	subs	r3, #1
 8004220:	3101      	adds	r1, #1
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	60a1      	str	r1, [r4, #8]
 8004226:	68a3      	ldr	r3, [r4, #8]
 8004228:	3b01      	subs	r3, #1
 800422a:	60a3      	str	r3, [r4, #8]
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	3301      	adds	r3, #1
 8004230:	6123      	str	r3, [r4, #16]
 8004232:	6873      	ldr	r3, [r6, #4]
 8004234:	3b01      	subs	r3, #1
 8004236:	2b00      	cmp	r3, #0
 8004238:	6073      	str	r3, [r6, #4]
 800423a:	f340 80ac 	ble.w	8004396 <_scanf_float+0x22e>
 800423e:	6833      	ldr	r3, [r6, #0]
 8004240:	3301      	adds	r3, #1
 8004242:	6033      	str	r3, [r6, #0]
 8004244:	e7b5      	b.n	80041b2 <_scanf_float+0x4a>
 8004246:	2b45      	cmp	r3, #69	; 0x45
 8004248:	f000 8085 	beq.w	8004356 <_scanf_float+0x1ee>
 800424c:	2b46      	cmp	r3, #70	; 0x46
 800424e:	d06a      	beq.n	8004326 <_scanf_float+0x1be>
 8004250:	2b41      	cmp	r3, #65	; 0x41
 8004252:	d1c1      	bne.n	80041d8 <_scanf_float+0x70>
 8004254:	2a01      	cmp	r2, #1
 8004256:	d1bf      	bne.n	80041d8 <_scanf_float+0x70>
 8004258:	2202      	movs	r2, #2
 800425a:	e046      	b.n	80042ea <_scanf_float+0x182>
 800425c:	2b65      	cmp	r3, #101	; 0x65
 800425e:	d07a      	beq.n	8004356 <_scanf_float+0x1ee>
 8004260:	d818      	bhi.n	8004294 <_scanf_float+0x12c>
 8004262:	2b54      	cmp	r3, #84	; 0x54
 8004264:	d066      	beq.n	8004334 <_scanf_float+0x1cc>
 8004266:	d811      	bhi.n	800428c <_scanf_float+0x124>
 8004268:	2b4e      	cmp	r3, #78	; 0x4e
 800426a:	d1b5      	bne.n	80041d8 <_scanf_float+0x70>
 800426c:	2a00      	cmp	r2, #0
 800426e:	d146      	bne.n	80042fe <_scanf_float+0x196>
 8004270:	f1b9 0f00 	cmp.w	r9, #0
 8004274:	d145      	bne.n	8004302 <_scanf_float+0x19a>
 8004276:	6821      	ldr	r1, [r4, #0]
 8004278:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800427c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8004280:	d13f      	bne.n	8004302 <_scanf_float+0x19a>
 8004282:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8004286:	6021      	str	r1, [r4, #0]
 8004288:	2201      	movs	r2, #1
 800428a:	e02e      	b.n	80042ea <_scanf_float+0x182>
 800428c:	2b59      	cmp	r3, #89	; 0x59
 800428e:	d01e      	beq.n	80042ce <_scanf_float+0x166>
 8004290:	2b61      	cmp	r3, #97	; 0x61
 8004292:	e7de      	b.n	8004252 <_scanf_float+0xea>
 8004294:	2b6e      	cmp	r3, #110	; 0x6e
 8004296:	d0e9      	beq.n	800426c <_scanf_float+0x104>
 8004298:	d815      	bhi.n	80042c6 <_scanf_float+0x15e>
 800429a:	2b66      	cmp	r3, #102	; 0x66
 800429c:	d043      	beq.n	8004326 <_scanf_float+0x1be>
 800429e:	2b69      	cmp	r3, #105	; 0x69
 80042a0:	d19a      	bne.n	80041d8 <_scanf_float+0x70>
 80042a2:	f1bb 0f00 	cmp.w	fp, #0
 80042a6:	d138      	bne.n	800431a <_scanf_float+0x1b2>
 80042a8:	f1b9 0f00 	cmp.w	r9, #0
 80042ac:	d197      	bne.n	80041de <_scanf_float+0x76>
 80042ae:	6821      	ldr	r1, [r4, #0]
 80042b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80042b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80042b8:	d195      	bne.n	80041e6 <_scanf_float+0x7e>
 80042ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80042be:	6021      	str	r1, [r4, #0]
 80042c0:	f04f 0b01 	mov.w	fp, #1
 80042c4:	e011      	b.n	80042ea <_scanf_float+0x182>
 80042c6:	2b74      	cmp	r3, #116	; 0x74
 80042c8:	d034      	beq.n	8004334 <_scanf_float+0x1cc>
 80042ca:	2b79      	cmp	r3, #121	; 0x79
 80042cc:	d184      	bne.n	80041d8 <_scanf_float+0x70>
 80042ce:	f1bb 0f07 	cmp.w	fp, #7
 80042d2:	d181      	bne.n	80041d8 <_scanf_float+0x70>
 80042d4:	f04f 0b08 	mov.w	fp, #8
 80042d8:	e007      	b.n	80042ea <_scanf_float+0x182>
 80042da:	eb12 0f0b 	cmn.w	r2, fp
 80042de:	f47f af7b 	bne.w	80041d8 <_scanf_float+0x70>
 80042e2:	6821      	ldr	r1, [r4, #0]
 80042e4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80042e8:	6021      	str	r1, [r4, #0]
 80042ea:	702b      	strb	r3, [r5, #0]
 80042ec:	3501      	adds	r5, #1
 80042ee:	e79a      	b.n	8004226 <_scanf_float+0xbe>
 80042f0:	6821      	ldr	r1, [r4, #0]
 80042f2:	0608      	lsls	r0, r1, #24
 80042f4:	f57f af70 	bpl.w	80041d8 <_scanf_float+0x70>
 80042f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80042fc:	e7f4      	b.n	80042e8 <_scanf_float+0x180>
 80042fe:	2a02      	cmp	r2, #2
 8004300:	d047      	beq.n	8004392 <_scanf_float+0x22a>
 8004302:	f1bb 0f01 	cmp.w	fp, #1
 8004306:	d003      	beq.n	8004310 <_scanf_float+0x1a8>
 8004308:	f1bb 0f04 	cmp.w	fp, #4
 800430c:	f47f af64 	bne.w	80041d8 <_scanf_float+0x70>
 8004310:	f10b 0b01 	add.w	fp, fp, #1
 8004314:	fa5f fb8b 	uxtb.w	fp, fp
 8004318:	e7e7      	b.n	80042ea <_scanf_float+0x182>
 800431a:	f1bb 0f03 	cmp.w	fp, #3
 800431e:	d0f7      	beq.n	8004310 <_scanf_float+0x1a8>
 8004320:	f1bb 0f05 	cmp.w	fp, #5
 8004324:	e7f2      	b.n	800430c <_scanf_float+0x1a4>
 8004326:	f1bb 0f02 	cmp.w	fp, #2
 800432a:	f47f af55 	bne.w	80041d8 <_scanf_float+0x70>
 800432e:	f04f 0b03 	mov.w	fp, #3
 8004332:	e7da      	b.n	80042ea <_scanf_float+0x182>
 8004334:	f1bb 0f06 	cmp.w	fp, #6
 8004338:	f47f af4e 	bne.w	80041d8 <_scanf_float+0x70>
 800433c:	f04f 0b07 	mov.w	fp, #7
 8004340:	e7d3      	b.n	80042ea <_scanf_float+0x182>
 8004342:	6821      	ldr	r1, [r4, #0]
 8004344:	0588      	lsls	r0, r1, #22
 8004346:	f57f af47 	bpl.w	80041d8 <_scanf_float+0x70>
 800434a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800434e:	6021      	str	r1, [r4, #0]
 8004350:	f8cd 9008 	str.w	r9, [sp, #8]
 8004354:	e7c9      	b.n	80042ea <_scanf_float+0x182>
 8004356:	6821      	ldr	r1, [r4, #0]
 8004358:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800435c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004360:	d006      	beq.n	8004370 <_scanf_float+0x208>
 8004362:	0548      	lsls	r0, r1, #21
 8004364:	f57f af38 	bpl.w	80041d8 <_scanf_float+0x70>
 8004368:	f1b9 0f00 	cmp.w	r9, #0
 800436c:	f43f af3b 	beq.w	80041e6 <_scanf_float+0x7e>
 8004370:	0588      	lsls	r0, r1, #22
 8004372:	bf58      	it	pl
 8004374:	9802      	ldrpl	r0, [sp, #8]
 8004376:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800437a:	bf58      	it	pl
 800437c:	eba9 0000 	subpl.w	r0, r9, r0
 8004380:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8004384:	bf58      	it	pl
 8004386:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800438a:	6021      	str	r1, [r4, #0]
 800438c:	f04f 0900 	mov.w	r9, #0
 8004390:	e7ab      	b.n	80042ea <_scanf_float+0x182>
 8004392:	2203      	movs	r2, #3
 8004394:	e7a9      	b.n	80042ea <_scanf_float+0x182>
 8004396:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800439a:	9205      	str	r2, [sp, #20]
 800439c:	4631      	mov	r1, r6
 800439e:	4638      	mov	r0, r7
 80043a0:	4798      	blx	r3
 80043a2:	9a05      	ldr	r2, [sp, #20]
 80043a4:	2800      	cmp	r0, #0
 80043a6:	f43f af04 	beq.w	80041b2 <_scanf_float+0x4a>
 80043aa:	e715      	b.n	80041d8 <_scanf_float+0x70>
 80043ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80043b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80043b4:	4632      	mov	r2, r6
 80043b6:	4638      	mov	r0, r7
 80043b8:	4798      	blx	r3
 80043ba:	6923      	ldr	r3, [r4, #16]
 80043bc:	3b01      	subs	r3, #1
 80043be:	6123      	str	r3, [r4, #16]
 80043c0:	e715      	b.n	80041ee <_scanf_float+0x86>
 80043c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80043c6:	2b06      	cmp	r3, #6
 80043c8:	d80a      	bhi.n	80043e0 <_scanf_float+0x278>
 80043ca:	f1bb 0f02 	cmp.w	fp, #2
 80043ce:	d968      	bls.n	80044a2 <_scanf_float+0x33a>
 80043d0:	f1ab 0b03 	sub.w	fp, fp, #3
 80043d4:	fa5f fb8b 	uxtb.w	fp, fp
 80043d8:	eba5 0b0b 	sub.w	fp, r5, fp
 80043dc:	455d      	cmp	r5, fp
 80043de:	d14b      	bne.n	8004478 <_scanf_float+0x310>
 80043e0:	6823      	ldr	r3, [r4, #0]
 80043e2:	05da      	lsls	r2, r3, #23
 80043e4:	d51f      	bpl.n	8004426 <_scanf_float+0x2be>
 80043e6:	055b      	lsls	r3, r3, #21
 80043e8:	d468      	bmi.n	80044bc <_scanf_float+0x354>
 80043ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80043ee:	6923      	ldr	r3, [r4, #16]
 80043f0:	2965      	cmp	r1, #101	; 0x65
 80043f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80043f6:	f105 3bff 	add.w	fp, r5, #4294967295
 80043fa:	6123      	str	r3, [r4, #16]
 80043fc:	d00d      	beq.n	800441a <_scanf_float+0x2b2>
 80043fe:	2945      	cmp	r1, #69	; 0x45
 8004400:	d00b      	beq.n	800441a <_scanf_float+0x2b2>
 8004402:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004406:	4632      	mov	r2, r6
 8004408:	4638      	mov	r0, r7
 800440a:	4798      	blx	r3
 800440c:	6923      	ldr	r3, [r4, #16]
 800440e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8004412:	3b01      	subs	r3, #1
 8004414:	f1a5 0b02 	sub.w	fp, r5, #2
 8004418:	6123      	str	r3, [r4, #16]
 800441a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800441e:	4632      	mov	r2, r6
 8004420:	4638      	mov	r0, r7
 8004422:	4798      	blx	r3
 8004424:	465d      	mov	r5, fp
 8004426:	6826      	ldr	r6, [r4, #0]
 8004428:	f016 0610 	ands.w	r6, r6, #16
 800442c:	d17a      	bne.n	8004524 <_scanf_float+0x3bc>
 800442e:	702e      	strb	r6, [r5, #0]
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004436:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800443a:	d142      	bne.n	80044c2 <_scanf_float+0x35a>
 800443c:	9b02      	ldr	r3, [sp, #8]
 800443e:	eba9 0303 	sub.w	r3, r9, r3
 8004442:	425a      	negs	r2, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d149      	bne.n	80044dc <_scanf_float+0x374>
 8004448:	2200      	movs	r2, #0
 800444a:	4641      	mov	r1, r8
 800444c:	4638      	mov	r0, r7
 800444e:	f000 fea3 	bl	8005198 <_strtod_r>
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	f8da 3000 	ldr.w	r3, [sl]
 8004458:	f015 0f02 	tst.w	r5, #2
 800445c:	f103 0204 	add.w	r2, r3, #4
 8004460:	ec59 8b10 	vmov	r8, r9, d0
 8004464:	f8ca 2000 	str.w	r2, [sl]
 8004468:	d043      	beq.n	80044f2 <_scanf_float+0x38a>
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	e9c3 8900 	strd	r8, r9, [r3]
 8004470:	68e3      	ldr	r3, [r4, #12]
 8004472:	3301      	adds	r3, #1
 8004474:	60e3      	str	r3, [r4, #12]
 8004476:	e6be      	b.n	80041f6 <_scanf_float+0x8e>
 8004478:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800447c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004480:	4632      	mov	r2, r6
 8004482:	4638      	mov	r0, r7
 8004484:	4798      	blx	r3
 8004486:	6923      	ldr	r3, [r4, #16]
 8004488:	3b01      	subs	r3, #1
 800448a:	6123      	str	r3, [r4, #16]
 800448c:	e7a6      	b.n	80043dc <_scanf_float+0x274>
 800448e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004492:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8004496:	4632      	mov	r2, r6
 8004498:	4638      	mov	r0, r7
 800449a:	4798      	blx	r3
 800449c:	6923      	ldr	r3, [r4, #16]
 800449e:	3b01      	subs	r3, #1
 80044a0:	6123      	str	r3, [r4, #16]
 80044a2:	4545      	cmp	r5, r8
 80044a4:	d8f3      	bhi.n	800448e <_scanf_float+0x326>
 80044a6:	e6a5      	b.n	80041f4 <_scanf_float+0x8c>
 80044a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80044ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80044b0:	4632      	mov	r2, r6
 80044b2:	4638      	mov	r0, r7
 80044b4:	4798      	blx	r3
 80044b6:	6923      	ldr	r3, [r4, #16]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	6123      	str	r3, [r4, #16]
 80044bc:	4545      	cmp	r5, r8
 80044be:	d8f3      	bhi.n	80044a8 <_scanf_float+0x340>
 80044c0:	e698      	b.n	80041f4 <_scanf_float+0x8c>
 80044c2:	9b03      	ldr	r3, [sp, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d0bf      	beq.n	8004448 <_scanf_float+0x2e0>
 80044c8:	9904      	ldr	r1, [sp, #16]
 80044ca:	230a      	movs	r3, #10
 80044cc:	4632      	mov	r2, r6
 80044ce:	3101      	adds	r1, #1
 80044d0:	4638      	mov	r0, r7
 80044d2:	f000 feed 	bl	80052b0 <_strtol_r>
 80044d6:	9b03      	ldr	r3, [sp, #12]
 80044d8:	9d04      	ldr	r5, [sp, #16]
 80044da:	1ac2      	subs	r2, r0, r3
 80044dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80044e0:	429d      	cmp	r5, r3
 80044e2:	bf28      	it	cs
 80044e4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80044e8:	490f      	ldr	r1, [pc, #60]	; (8004528 <_scanf_float+0x3c0>)
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 f824 	bl	8004538 <siprintf>
 80044f0:	e7aa      	b.n	8004448 <_scanf_float+0x2e0>
 80044f2:	f015 0504 	ands.w	r5, r5, #4
 80044f6:	d1b8      	bne.n	800446a <_scanf_float+0x302>
 80044f8:	681f      	ldr	r7, [r3, #0]
 80044fa:	ee10 2a10 	vmov	r2, s0
 80044fe:	464b      	mov	r3, r9
 8004500:	ee10 0a10 	vmov	r0, s0
 8004504:	4649      	mov	r1, r9
 8004506:	f7fc fb11 	bl	8000b2c <__aeabi_dcmpun>
 800450a:	b128      	cbz	r0, 8004518 <_scanf_float+0x3b0>
 800450c:	4628      	mov	r0, r5
 800450e:	f000 f80d 	bl	800452c <nanf>
 8004512:	ed87 0a00 	vstr	s0, [r7]
 8004516:	e7ab      	b.n	8004470 <_scanf_float+0x308>
 8004518:	4640      	mov	r0, r8
 800451a:	4649      	mov	r1, r9
 800451c:	f7fc fb64 	bl	8000be8 <__aeabi_d2f>
 8004520:	6038      	str	r0, [r7, #0]
 8004522:	e7a5      	b.n	8004470 <_scanf_float+0x308>
 8004524:	2600      	movs	r6, #0
 8004526:	e666      	b.n	80041f6 <_scanf_float+0x8e>
 8004528:	080073ac 	.word	0x080073ac

0800452c <nanf>:
 800452c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004534 <nanf+0x8>
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	7fc00000 	.word	0x7fc00000

08004538 <siprintf>:
 8004538:	b40e      	push	{r1, r2, r3}
 800453a:	b500      	push	{lr}
 800453c:	b09c      	sub	sp, #112	; 0x70
 800453e:	ab1d      	add	r3, sp, #116	; 0x74
 8004540:	9002      	str	r0, [sp, #8]
 8004542:	9006      	str	r0, [sp, #24]
 8004544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004548:	4809      	ldr	r0, [pc, #36]	; (8004570 <siprintf+0x38>)
 800454a:	9107      	str	r1, [sp, #28]
 800454c:	9104      	str	r1, [sp, #16]
 800454e:	4909      	ldr	r1, [pc, #36]	; (8004574 <siprintf+0x3c>)
 8004550:	f853 2b04 	ldr.w	r2, [r3], #4
 8004554:	9105      	str	r1, [sp, #20]
 8004556:	6800      	ldr	r0, [r0, #0]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	a902      	add	r1, sp, #8
 800455c:	f002 fd6e 	bl	800703c <_svfiprintf_r>
 8004560:	9b02      	ldr	r3, [sp, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	b01c      	add	sp, #112	; 0x70
 8004568:	f85d eb04 	ldr.w	lr, [sp], #4
 800456c:	b003      	add	sp, #12
 800456e:	4770      	bx	lr
 8004570:	2000000c 	.word	0x2000000c
 8004574:	ffff0208 	.word	0xffff0208

08004578 <sulp>:
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	460d      	mov	r5, r1
 800457e:	ec45 4b10 	vmov	d0, r4, r5
 8004582:	4616      	mov	r6, r2
 8004584:	f002 fb16 	bl	8006bb4 <__ulp>
 8004588:	ec51 0b10 	vmov	r0, r1, d0
 800458c:	b17e      	cbz	r6, 80045ae <sulp+0x36>
 800458e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004596:	2b00      	cmp	r3, #0
 8004598:	dd09      	ble.n	80045ae <sulp+0x36>
 800459a:	051b      	lsls	r3, r3, #20
 800459c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80045a0:	2400      	movs	r4, #0
 80045a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80045a6:	4622      	mov	r2, r4
 80045a8:	462b      	mov	r3, r5
 80045aa:	f7fc f825 	bl	80005f8 <__aeabi_dmul>
 80045ae:	bd70      	pop	{r4, r5, r6, pc}

080045b0 <_strtod_l>:
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	461f      	mov	r7, r3
 80045b6:	b0a1      	sub	sp, #132	; 0x84
 80045b8:	2300      	movs	r3, #0
 80045ba:	4681      	mov	r9, r0
 80045bc:	4638      	mov	r0, r7
 80045be:	460e      	mov	r6, r1
 80045c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80045c2:	931c      	str	r3, [sp, #112]	; 0x70
 80045c4:	f001 fff5 	bl	80065b2 <__localeconv_l>
 80045c8:	4680      	mov	r8, r0
 80045ca:	6800      	ldr	r0, [r0, #0]
 80045cc:	f7fb fe00 	bl	80001d0 <strlen>
 80045d0:	f04f 0a00 	mov.w	sl, #0
 80045d4:	4604      	mov	r4, r0
 80045d6:	f04f 0b00 	mov.w	fp, #0
 80045da:	961b      	str	r6, [sp, #108]	; 0x6c
 80045dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80045de:	781a      	ldrb	r2, [r3, #0]
 80045e0:	2a0d      	cmp	r2, #13
 80045e2:	d832      	bhi.n	800464a <_strtod_l+0x9a>
 80045e4:	2a09      	cmp	r2, #9
 80045e6:	d236      	bcs.n	8004656 <_strtod_l+0xa6>
 80045e8:	2a00      	cmp	r2, #0
 80045ea:	d03e      	beq.n	800466a <_strtod_l+0xba>
 80045ec:	2300      	movs	r3, #0
 80045ee:	930d      	str	r3, [sp, #52]	; 0x34
 80045f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80045f2:	782b      	ldrb	r3, [r5, #0]
 80045f4:	2b30      	cmp	r3, #48	; 0x30
 80045f6:	f040 80ac 	bne.w	8004752 <_strtod_l+0x1a2>
 80045fa:	786b      	ldrb	r3, [r5, #1]
 80045fc:	2b58      	cmp	r3, #88	; 0x58
 80045fe:	d001      	beq.n	8004604 <_strtod_l+0x54>
 8004600:	2b78      	cmp	r3, #120	; 0x78
 8004602:	d167      	bne.n	80046d4 <_strtod_l+0x124>
 8004604:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	ab1c      	add	r3, sp, #112	; 0x70
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	9702      	str	r7, [sp, #8]
 800460e:	ab1d      	add	r3, sp, #116	; 0x74
 8004610:	4a88      	ldr	r2, [pc, #544]	; (8004834 <_strtod_l+0x284>)
 8004612:	a91b      	add	r1, sp, #108	; 0x6c
 8004614:	4648      	mov	r0, r9
 8004616:	f001 fcf2 	bl	8005ffe <__gethex>
 800461a:	f010 0407 	ands.w	r4, r0, #7
 800461e:	4606      	mov	r6, r0
 8004620:	d005      	beq.n	800462e <_strtod_l+0x7e>
 8004622:	2c06      	cmp	r4, #6
 8004624:	d12b      	bne.n	800467e <_strtod_l+0xce>
 8004626:	3501      	adds	r5, #1
 8004628:	2300      	movs	r3, #0
 800462a:	951b      	str	r5, [sp, #108]	; 0x6c
 800462c:	930d      	str	r3, [sp, #52]	; 0x34
 800462e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004630:	2b00      	cmp	r3, #0
 8004632:	f040 859a 	bne.w	800516a <_strtod_l+0xbba>
 8004636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004638:	b1e3      	cbz	r3, 8004674 <_strtod_l+0xc4>
 800463a:	4652      	mov	r2, sl
 800463c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004640:	ec43 2b10 	vmov	d0, r2, r3
 8004644:	b021      	add	sp, #132	; 0x84
 8004646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800464a:	2a2b      	cmp	r2, #43	; 0x2b
 800464c:	d015      	beq.n	800467a <_strtod_l+0xca>
 800464e:	2a2d      	cmp	r2, #45	; 0x2d
 8004650:	d004      	beq.n	800465c <_strtod_l+0xac>
 8004652:	2a20      	cmp	r2, #32
 8004654:	d1ca      	bne.n	80045ec <_strtod_l+0x3c>
 8004656:	3301      	adds	r3, #1
 8004658:	931b      	str	r3, [sp, #108]	; 0x6c
 800465a:	e7bf      	b.n	80045dc <_strtod_l+0x2c>
 800465c:	2201      	movs	r2, #1
 800465e:	920d      	str	r2, [sp, #52]	; 0x34
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	921b      	str	r2, [sp, #108]	; 0x6c
 8004664:	785b      	ldrb	r3, [r3, #1]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1c2      	bne.n	80045f0 <_strtod_l+0x40>
 800466a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800466c:	961b      	str	r6, [sp, #108]	; 0x6c
 800466e:	2b00      	cmp	r3, #0
 8004670:	f040 8579 	bne.w	8005166 <_strtod_l+0xbb6>
 8004674:	4652      	mov	r2, sl
 8004676:	465b      	mov	r3, fp
 8004678:	e7e2      	b.n	8004640 <_strtod_l+0x90>
 800467a:	2200      	movs	r2, #0
 800467c:	e7ef      	b.n	800465e <_strtod_l+0xae>
 800467e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004680:	b13a      	cbz	r2, 8004692 <_strtod_l+0xe2>
 8004682:	2135      	movs	r1, #53	; 0x35
 8004684:	a81e      	add	r0, sp, #120	; 0x78
 8004686:	f002 fb8d 	bl	8006da4 <__copybits>
 800468a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800468c:	4648      	mov	r0, r9
 800468e:	f001 fffa 	bl	8006686 <_Bfree>
 8004692:	3c01      	subs	r4, #1
 8004694:	2c04      	cmp	r4, #4
 8004696:	d806      	bhi.n	80046a6 <_strtod_l+0xf6>
 8004698:	e8df f004 	tbb	[pc, r4]
 800469c:	1714030a 	.word	0x1714030a
 80046a0:	0a          	.byte	0x0a
 80046a1:	00          	.byte	0x00
 80046a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80046a6:	0730      	lsls	r0, r6, #28
 80046a8:	d5c1      	bpl.n	800462e <_strtod_l+0x7e>
 80046aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80046ae:	e7be      	b.n	800462e <_strtod_l+0x7e>
 80046b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80046b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80046b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80046ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80046be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80046c2:	e7f0      	b.n	80046a6 <_strtod_l+0xf6>
 80046c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8004838 <_strtod_l+0x288>
 80046c8:	e7ed      	b.n	80046a6 <_strtod_l+0xf6>
 80046ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80046ce:	f04f 3aff 	mov.w	sl, #4294967295
 80046d2:	e7e8      	b.n	80046a6 <_strtod_l+0xf6>
 80046d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80046da:	785b      	ldrb	r3, [r3, #1]
 80046dc:	2b30      	cmp	r3, #48	; 0x30
 80046de:	d0f9      	beq.n	80046d4 <_strtod_l+0x124>
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0a4      	beq.n	800462e <_strtod_l+0x7e>
 80046e4:	2301      	movs	r3, #1
 80046e6:	2500      	movs	r5, #0
 80046e8:	9306      	str	r3, [sp, #24]
 80046ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046ec:	9308      	str	r3, [sp, #32]
 80046ee:	9507      	str	r5, [sp, #28]
 80046f0:	9505      	str	r5, [sp, #20]
 80046f2:	220a      	movs	r2, #10
 80046f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80046f6:	7807      	ldrb	r7, [r0, #0]
 80046f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80046fc:	b2d9      	uxtb	r1, r3
 80046fe:	2909      	cmp	r1, #9
 8004700:	d929      	bls.n	8004756 <_strtod_l+0x1a6>
 8004702:	4622      	mov	r2, r4
 8004704:	f8d8 1000 	ldr.w	r1, [r8]
 8004708:	f002 fda0 	bl	800724c <strncmp>
 800470c:	2800      	cmp	r0, #0
 800470e:	d031      	beq.n	8004774 <_strtod_l+0x1c4>
 8004710:	2000      	movs	r0, #0
 8004712:	9c05      	ldr	r4, [sp, #20]
 8004714:	9004      	str	r0, [sp, #16]
 8004716:	463b      	mov	r3, r7
 8004718:	4602      	mov	r2, r0
 800471a:	2b65      	cmp	r3, #101	; 0x65
 800471c:	d001      	beq.n	8004722 <_strtod_l+0x172>
 800471e:	2b45      	cmp	r3, #69	; 0x45
 8004720:	d114      	bne.n	800474c <_strtod_l+0x19c>
 8004722:	b924      	cbnz	r4, 800472e <_strtod_l+0x17e>
 8004724:	b910      	cbnz	r0, 800472c <_strtod_l+0x17c>
 8004726:	9b06      	ldr	r3, [sp, #24]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d09e      	beq.n	800466a <_strtod_l+0xba>
 800472c:	2400      	movs	r4, #0
 800472e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8004730:	1c73      	adds	r3, r6, #1
 8004732:	931b      	str	r3, [sp, #108]	; 0x6c
 8004734:	7873      	ldrb	r3, [r6, #1]
 8004736:	2b2b      	cmp	r3, #43	; 0x2b
 8004738:	d078      	beq.n	800482c <_strtod_l+0x27c>
 800473a:	2b2d      	cmp	r3, #45	; 0x2d
 800473c:	d070      	beq.n	8004820 <_strtod_l+0x270>
 800473e:	f04f 0c00 	mov.w	ip, #0
 8004742:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8004746:	2f09      	cmp	r7, #9
 8004748:	d97c      	bls.n	8004844 <_strtod_l+0x294>
 800474a:	961b      	str	r6, [sp, #108]	; 0x6c
 800474c:	f04f 0e00 	mov.w	lr, #0
 8004750:	e09a      	b.n	8004888 <_strtod_l+0x2d8>
 8004752:	2300      	movs	r3, #0
 8004754:	e7c7      	b.n	80046e6 <_strtod_l+0x136>
 8004756:	9905      	ldr	r1, [sp, #20]
 8004758:	2908      	cmp	r1, #8
 800475a:	bfdd      	ittte	le
 800475c:	9907      	ldrle	r1, [sp, #28]
 800475e:	fb02 3301 	mlale	r3, r2, r1, r3
 8004762:	9307      	strle	r3, [sp, #28]
 8004764:	fb02 3505 	mlagt	r5, r2, r5, r3
 8004768:	9b05      	ldr	r3, [sp, #20]
 800476a:	3001      	adds	r0, #1
 800476c:	3301      	adds	r3, #1
 800476e:	9305      	str	r3, [sp, #20]
 8004770:	901b      	str	r0, [sp, #108]	; 0x6c
 8004772:	e7bf      	b.n	80046f4 <_strtod_l+0x144>
 8004774:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004776:	191a      	adds	r2, r3, r4
 8004778:	921b      	str	r2, [sp, #108]	; 0x6c
 800477a:	9a05      	ldr	r2, [sp, #20]
 800477c:	5d1b      	ldrb	r3, [r3, r4]
 800477e:	2a00      	cmp	r2, #0
 8004780:	d037      	beq.n	80047f2 <_strtod_l+0x242>
 8004782:	9c05      	ldr	r4, [sp, #20]
 8004784:	4602      	mov	r2, r0
 8004786:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800478a:	2909      	cmp	r1, #9
 800478c:	d913      	bls.n	80047b6 <_strtod_l+0x206>
 800478e:	2101      	movs	r1, #1
 8004790:	9104      	str	r1, [sp, #16]
 8004792:	e7c2      	b.n	800471a <_strtod_l+0x16a>
 8004794:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	921b      	str	r2, [sp, #108]	; 0x6c
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	3001      	adds	r0, #1
 800479e:	2b30      	cmp	r3, #48	; 0x30
 80047a0:	d0f8      	beq.n	8004794 <_strtod_l+0x1e4>
 80047a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80047a6:	2a08      	cmp	r2, #8
 80047a8:	f200 84e4 	bhi.w	8005174 <_strtod_l+0xbc4>
 80047ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80047ae:	9208      	str	r2, [sp, #32]
 80047b0:	4602      	mov	r2, r0
 80047b2:	2000      	movs	r0, #0
 80047b4:	4604      	mov	r4, r0
 80047b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80047ba:	f100 0101 	add.w	r1, r0, #1
 80047be:	d012      	beq.n	80047e6 <_strtod_l+0x236>
 80047c0:	440a      	add	r2, r1
 80047c2:	eb00 0c04 	add.w	ip, r0, r4
 80047c6:	4621      	mov	r1, r4
 80047c8:	270a      	movs	r7, #10
 80047ca:	458c      	cmp	ip, r1
 80047cc:	d113      	bne.n	80047f6 <_strtod_l+0x246>
 80047ce:	1821      	adds	r1, r4, r0
 80047d0:	2908      	cmp	r1, #8
 80047d2:	f104 0401 	add.w	r4, r4, #1
 80047d6:	4404      	add	r4, r0
 80047d8:	dc19      	bgt.n	800480e <_strtod_l+0x25e>
 80047da:	9b07      	ldr	r3, [sp, #28]
 80047dc:	210a      	movs	r1, #10
 80047de:	fb01 e303 	mla	r3, r1, r3, lr
 80047e2:	9307      	str	r3, [sp, #28]
 80047e4:	2100      	movs	r1, #0
 80047e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80047e8:	1c58      	adds	r0, r3, #1
 80047ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80047ec:	785b      	ldrb	r3, [r3, #1]
 80047ee:	4608      	mov	r0, r1
 80047f0:	e7c9      	b.n	8004786 <_strtod_l+0x1d6>
 80047f2:	9805      	ldr	r0, [sp, #20]
 80047f4:	e7d3      	b.n	800479e <_strtod_l+0x1ee>
 80047f6:	2908      	cmp	r1, #8
 80047f8:	f101 0101 	add.w	r1, r1, #1
 80047fc:	dc03      	bgt.n	8004806 <_strtod_l+0x256>
 80047fe:	9b07      	ldr	r3, [sp, #28]
 8004800:	437b      	muls	r3, r7
 8004802:	9307      	str	r3, [sp, #28]
 8004804:	e7e1      	b.n	80047ca <_strtod_l+0x21a>
 8004806:	2910      	cmp	r1, #16
 8004808:	bfd8      	it	le
 800480a:	437d      	mulle	r5, r7
 800480c:	e7dd      	b.n	80047ca <_strtod_l+0x21a>
 800480e:	2c10      	cmp	r4, #16
 8004810:	bfdc      	itt	le
 8004812:	210a      	movle	r1, #10
 8004814:	fb01 e505 	mlale	r5, r1, r5, lr
 8004818:	e7e4      	b.n	80047e4 <_strtod_l+0x234>
 800481a:	2301      	movs	r3, #1
 800481c:	9304      	str	r3, [sp, #16]
 800481e:	e781      	b.n	8004724 <_strtod_l+0x174>
 8004820:	f04f 0c01 	mov.w	ip, #1
 8004824:	1cb3      	adds	r3, r6, #2
 8004826:	931b      	str	r3, [sp, #108]	; 0x6c
 8004828:	78b3      	ldrb	r3, [r6, #2]
 800482a:	e78a      	b.n	8004742 <_strtod_l+0x192>
 800482c:	f04f 0c00 	mov.w	ip, #0
 8004830:	e7f8      	b.n	8004824 <_strtod_l+0x274>
 8004832:	bf00      	nop
 8004834:	080073b4 	.word	0x080073b4
 8004838:	7ff00000 	.word	0x7ff00000
 800483c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800483e:	1c5f      	adds	r7, r3, #1
 8004840:	971b      	str	r7, [sp, #108]	; 0x6c
 8004842:	785b      	ldrb	r3, [r3, #1]
 8004844:	2b30      	cmp	r3, #48	; 0x30
 8004846:	d0f9      	beq.n	800483c <_strtod_l+0x28c>
 8004848:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800484c:	2f08      	cmp	r7, #8
 800484e:	f63f af7d 	bhi.w	800474c <_strtod_l+0x19c>
 8004852:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8004856:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004858:	930a      	str	r3, [sp, #40]	; 0x28
 800485a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800485c:	1c5f      	adds	r7, r3, #1
 800485e:	971b      	str	r7, [sp, #108]	; 0x6c
 8004860:	785b      	ldrb	r3, [r3, #1]
 8004862:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8004866:	f1b8 0f09 	cmp.w	r8, #9
 800486a:	d937      	bls.n	80048dc <_strtod_l+0x32c>
 800486c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800486e:	1a7f      	subs	r7, r7, r1
 8004870:	2f08      	cmp	r7, #8
 8004872:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8004876:	dc37      	bgt.n	80048e8 <_strtod_l+0x338>
 8004878:	45be      	cmp	lr, r7
 800487a:	bfa8      	it	ge
 800487c:	46be      	movge	lr, r7
 800487e:	f1bc 0f00 	cmp.w	ip, #0
 8004882:	d001      	beq.n	8004888 <_strtod_l+0x2d8>
 8004884:	f1ce 0e00 	rsb	lr, lr, #0
 8004888:	2c00      	cmp	r4, #0
 800488a:	d151      	bne.n	8004930 <_strtod_l+0x380>
 800488c:	2800      	cmp	r0, #0
 800488e:	f47f aece 	bne.w	800462e <_strtod_l+0x7e>
 8004892:	9a06      	ldr	r2, [sp, #24]
 8004894:	2a00      	cmp	r2, #0
 8004896:	f47f aeca 	bne.w	800462e <_strtod_l+0x7e>
 800489a:	9a04      	ldr	r2, [sp, #16]
 800489c:	2a00      	cmp	r2, #0
 800489e:	f47f aee4 	bne.w	800466a <_strtod_l+0xba>
 80048a2:	2b4e      	cmp	r3, #78	; 0x4e
 80048a4:	d027      	beq.n	80048f6 <_strtod_l+0x346>
 80048a6:	dc21      	bgt.n	80048ec <_strtod_l+0x33c>
 80048a8:	2b49      	cmp	r3, #73	; 0x49
 80048aa:	f47f aede 	bne.w	800466a <_strtod_l+0xba>
 80048ae:	49a0      	ldr	r1, [pc, #640]	; (8004b30 <_strtod_l+0x580>)
 80048b0:	a81b      	add	r0, sp, #108	; 0x6c
 80048b2:	f001 fdd7 	bl	8006464 <__match>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	f43f aed7 	beq.w	800466a <_strtod_l+0xba>
 80048bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048be:	499d      	ldr	r1, [pc, #628]	; (8004b34 <_strtod_l+0x584>)
 80048c0:	3b01      	subs	r3, #1
 80048c2:	a81b      	add	r0, sp, #108	; 0x6c
 80048c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80048c6:	f001 fdcd 	bl	8006464 <__match>
 80048ca:	b910      	cbnz	r0, 80048d2 <_strtod_l+0x322>
 80048cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80048ce:	3301      	adds	r3, #1
 80048d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80048d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004b48 <_strtod_l+0x598>
 80048d6:	f04f 0a00 	mov.w	sl, #0
 80048da:	e6a8      	b.n	800462e <_strtod_l+0x7e>
 80048dc:	210a      	movs	r1, #10
 80048de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80048e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80048e6:	e7b8      	b.n	800485a <_strtod_l+0x2aa>
 80048e8:	46be      	mov	lr, r7
 80048ea:	e7c8      	b.n	800487e <_strtod_l+0x2ce>
 80048ec:	2b69      	cmp	r3, #105	; 0x69
 80048ee:	d0de      	beq.n	80048ae <_strtod_l+0x2fe>
 80048f0:	2b6e      	cmp	r3, #110	; 0x6e
 80048f2:	f47f aeba 	bne.w	800466a <_strtod_l+0xba>
 80048f6:	4990      	ldr	r1, [pc, #576]	; (8004b38 <_strtod_l+0x588>)
 80048f8:	a81b      	add	r0, sp, #108	; 0x6c
 80048fa:	f001 fdb3 	bl	8006464 <__match>
 80048fe:	2800      	cmp	r0, #0
 8004900:	f43f aeb3 	beq.w	800466a <_strtod_l+0xba>
 8004904:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b28      	cmp	r3, #40	; 0x28
 800490a:	d10e      	bne.n	800492a <_strtod_l+0x37a>
 800490c:	aa1e      	add	r2, sp, #120	; 0x78
 800490e:	498b      	ldr	r1, [pc, #556]	; (8004b3c <_strtod_l+0x58c>)
 8004910:	a81b      	add	r0, sp, #108	; 0x6c
 8004912:	f001 fdbb 	bl	800648c <__hexnan>
 8004916:	2805      	cmp	r0, #5
 8004918:	d107      	bne.n	800492a <_strtod_l+0x37a>
 800491a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800491c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8004920:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004924:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004928:	e681      	b.n	800462e <_strtod_l+0x7e>
 800492a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004b50 <_strtod_l+0x5a0>
 800492e:	e7d2      	b.n	80048d6 <_strtod_l+0x326>
 8004930:	ebae 0302 	sub.w	r3, lr, r2
 8004934:	9306      	str	r3, [sp, #24]
 8004936:	9b05      	ldr	r3, [sp, #20]
 8004938:	9807      	ldr	r0, [sp, #28]
 800493a:	2b00      	cmp	r3, #0
 800493c:	bf08      	it	eq
 800493e:	4623      	moveq	r3, r4
 8004940:	2c10      	cmp	r4, #16
 8004942:	9305      	str	r3, [sp, #20]
 8004944:	46a0      	mov	r8, r4
 8004946:	bfa8      	it	ge
 8004948:	f04f 0810 	movge.w	r8, #16
 800494c:	f7fb fdda 	bl	8000504 <__aeabi_ui2d>
 8004950:	2c09      	cmp	r4, #9
 8004952:	4682      	mov	sl, r0
 8004954:	468b      	mov	fp, r1
 8004956:	dc13      	bgt.n	8004980 <_strtod_l+0x3d0>
 8004958:	9b06      	ldr	r3, [sp, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	f43f ae67 	beq.w	800462e <_strtod_l+0x7e>
 8004960:	9b06      	ldr	r3, [sp, #24]
 8004962:	dd7a      	ble.n	8004a5a <_strtod_l+0x4aa>
 8004964:	2b16      	cmp	r3, #22
 8004966:	dc61      	bgt.n	8004a2c <_strtod_l+0x47c>
 8004968:	4a75      	ldr	r2, [pc, #468]	; (8004b40 <_strtod_l+0x590>)
 800496a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800496e:	e9de 0100 	ldrd	r0, r1, [lr]
 8004972:	4652      	mov	r2, sl
 8004974:	465b      	mov	r3, fp
 8004976:	f7fb fe3f 	bl	80005f8 <__aeabi_dmul>
 800497a:	4682      	mov	sl, r0
 800497c:	468b      	mov	fp, r1
 800497e:	e656      	b.n	800462e <_strtod_l+0x7e>
 8004980:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <_strtod_l+0x590>)
 8004982:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004986:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800498a:	f7fb fe35 	bl	80005f8 <__aeabi_dmul>
 800498e:	4606      	mov	r6, r0
 8004990:	4628      	mov	r0, r5
 8004992:	460f      	mov	r7, r1
 8004994:	f7fb fdb6 	bl	8000504 <__aeabi_ui2d>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4630      	mov	r0, r6
 800499e:	4639      	mov	r1, r7
 80049a0:	f7fb fc74 	bl	800028c <__adddf3>
 80049a4:	2c0f      	cmp	r4, #15
 80049a6:	4682      	mov	sl, r0
 80049a8:	468b      	mov	fp, r1
 80049aa:	ddd5      	ble.n	8004958 <_strtod_l+0x3a8>
 80049ac:	9b06      	ldr	r3, [sp, #24]
 80049ae:	eba4 0808 	sub.w	r8, r4, r8
 80049b2:	4498      	add	r8, r3
 80049b4:	f1b8 0f00 	cmp.w	r8, #0
 80049b8:	f340 8096 	ble.w	8004ae8 <_strtod_l+0x538>
 80049bc:	f018 030f 	ands.w	r3, r8, #15
 80049c0:	d00a      	beq.n	80049d8 <_strtod_l+0x428>
 80049c2:	495f      	ldr	r1, [pc, #380]	; (8004b40 <_strtod_l+0x590>)
 80049c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049c8:	4652      	mov	r2, sl
 80049ca:	465b      	mov	r3, fp
 80049cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049d0:	f7fb fe12 	bl	80005f8 <__aeabi_dmul>
 80049d4:	4682      	mov	sl, r0
 80049d6:	468b      	mov	fp, r1
 80049d8:	f038 080f 	bics.w	r8, r8, #15
 80049dc:	d073      	beq.n	8004ac6 <_strtod_l+0x516>
 80049de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80049e2:	dd47      	ble.n	8004a74 <_strtod_l+0x4c4>
 80049e4:	2400      	movs	r4, #0
 80049e6:	46a0      	mov	r8, r4
 80049e8:	9407      	str	r4, [sp, #28]
 80049ea:	9405      	str	r4, [sp, #20]
 80049ec:	2322      	movs	r3, #34	; 0x22
 80049ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004b48 <_strtod_l+0x598>
 80049f2:	f8c9 3000 	str.w	r3, [r9]
 80049f6:	f04f 0a00 	mov.w	sl, #0
 80049fa:	9b07      	ldr	r3, [sp, #28]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f43f ae16 	beq.w	800462e <_strtod_l+0x7e>
 8004a02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004a04:	4648      	mov	r0, r9
 8004a06:	f001 fe3e 	bl	8006686 <_Bfree>
 8004a0a:	9905      	ldr	r1, [sp, #20]
 8004a0c:	4648      	mov	r0, r9
 8004a0e:	f001 fe3a 	bl	8006686 <_Bfree>
 8004a12:	4641      	mov	r1, r8
 8004a14:	4648      	mov	r0, r9
 8004a16:	f001 fe36 	bl	8006686 <_Bfree>
 8004a1a:	9907      	ldr	r1, [sp, #28]
 8004a1c:	4648      	mov	r0, r9
 8004a1e:	f001 fe32 	bl	8006686 <_Bfree>
 8004a22:	4621      	mov	r1, r4
 8004a24:	4648      	mov	r0, r9
 8004a26:	f001 fe2e 	bl	8006686 <_Bfree>
 8004a2a:	e600      	b.n	800462e <_strtod_l+0x7e>
 8004a2c:	9a06      	ldr	r2, [sp, #24]
 8004a2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8004a32:	4293      	cmp	r3, r2
 8004a34:	dbba      	blt.n	80049ac <_strtod_l+0x3fc>
 8004a36:	4d42      	ldr	r5, [pc, #264]	; (8004b40 <_strtod_l+0x590>)
 8004a38:	f1c4 040f 	rsb	r4, r4, #15
 8004a3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8004a40:	4652      	mov	r2, sl
 8004a42:	465b      	mov	r3, fp
 8004a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a48:	f7fb fdd6 	bl	80005f8 <__aeabi_dmul>
 8004a4c:	9b06      	ldr	r3, [sp, #24]
 8004a4e:	1b1c      	subs	r4, r3, r4
 8004a50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004a54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a58:	e78d      	b.n	8004976 <_strtod_l+0x3c6>
 8004a5a:	f113 0f16 	cmn.w	r3, #22
 8004a5e:	dba5      	blt.n	80049ac <_strtod_l+0x3fc>
 8004a60:	4a37      	ldr	r2, [pc, #220]	; (8004b40 <_strtod_l+0x590>)
 8004a62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8004a66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8004a6a:	4650      	mov	r0, sl
 8004a6c:	4659      	mov	r1, fp
 8004a6e:	f7fb feed 	bl	800084c <__aeabi_ddiv>
 8004a72:	e782      	b.n	800497a <_strtod_l+0x3ca>
 8004a74:	2300      	movs	r3, #0
 8004a76:	4e33      	ldr	r6, [pc, #204]	; (8004b44 <_strtod_l+0x594>)
 8004a78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8004a7c:	4650      	mov	r0, sl
 8004a7e:	4659      	mov	r1, fp
 8004a80:	461d      	mov	r5, r3
 8004a82:	f1b8 0f01 	cmp.w	r8, #1
 8004a86:	dc21      	bgt.n	8004acc <_strtod_l+0x51c>
 8004a88:	b10b      	cbz	r3, 8004a8e <_strtod_l+0x4de>
 8004a8a:	4682      	mov	sl, r0
 8004a8c:	468b      	mov	fp, r1
 8004a8e:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <_strtod_l+0x594>)
 8004a90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004a94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8004a98:	4652      	mov	r2, sl
 8004a9a:	465b      	mov	r3, fp
 8004a9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8004aa0:	f7fb fdaa 	bl	80005f8 <__aeabi_dmul>
 8004aa4:	4b28      	ldr	r3, [pc, #160]	; (8004b48 <_strtod_l+0x598>)
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	400b      	ands	r3, r1
 8004aaa:	4928      	ldr	r1, [pc, #160]	; (8004b4c <_strtod_l+0x59c>)
 8004aac:	428b      	cmp	r3, r1
 8004aae:	4682      	mov	sl, r0
 8004ab0:	d898      	bhi.n	80049e4 <_strtod_l+0x434>
 8004ab2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004ab6:	428b      	cmp	r3, r1
 8004ab8:	bf86      	itte	hi
 8004aba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8004b54 <_strtod_l+0x5a4>
 8004abe:	f04f 3aff 	movhi.w	sl, #4294967295
 8004ac2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	9304      	str	r3, [sp, #16]
 8004aca:	e077      	b.n	8004bbc <_strtod_l+0x60c>
 8004acc:	f018 0f01 	tst.w	r8, #1
 8004ad0:	d006      	beq.n	8004ae0 <_strtod_l+0x530>
 8004ad2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f7fb fd8d 	bl	80005f8 <__aeabi_dmul>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	3501      	adds	r5, #1
 8004ae2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004ae6:	e7cc      	b.n	8004a82 <_strtod_l+0x4d2>
 8004ae8:	d0ed      	beq.n	8004ac6 <_strtod_l+0x516>
 8004aea:	f1c8 0800 	rsb	r8, r8, #0
 8004aee:	f018 020f 	ands.w	r2, r8, #15
 8004af2:	d00a      	beq.n	8004b0a <_strtod_l+0x55a>
 8004af4:	4b12      	ldr	r3, [pc, #72]	; (8004b40 <_strtod_l+0x590>)
 8004af6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004afa:	4650      	mov	r0, sl
 8004afc:	4659      	mov	r1, fp
 8004afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b02:	f7fb fea3 	bl	800084c <__aeabi_ddiv>
 8004b06:	4682      	mov	sl, r0
 8004b08:	468b      	mov	fp, r1
 8004b0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004b0e:	d0da      	beq.n	8004ac6 <_strtod_l+0x516>
 8004b10:	f1b8 0f1f 	cmp.w	r8, #31
 8004b14:	dd20      	ble.n	8004b58 <_strtod_l+0x5a8>
 8004b16:	2400      	movs	r4, #0
 8004b18:	46a0      	mov	r8, r4
 8004b1a:	9407      	str	r4, [sp, #28]
 8004b1c:	9405      	str	r4, [sp, #20]
 8004b1e:	2322      	movs	r3, #34	; 0x22
 8004b20:	f04f 0a00 	mov.w	sl, #0
 8004b24:	f04f 0b00 	mov.w	fp, #0
 8004b28:	f8c9 3000 	str.w	r3, [r9]
 8004b2c:	e765      	b.n	80049fa <_strtod_l+0x44a>
 8004b2e:	bf00      	nop
 8004b30:	0800737d 	.word	0x0800737d
 8004b34:	0800740b 	.word	0x0800740b
 8004b38:	08007385 	.word	0x08007385
 8004b3c:	080073c8 	.word	0x080073c8
 8004b40:	08007448 	.word	0x08007448
 8004b44:	08007420 	.word	0x08007420
 8004b48:	7ff00000 	.word	0x7ff00000
 8004b4c:	7ca00000 	.word	0x7ca00000
 8004b50:	fff80000 	.word	0xfff80000
 8004b54:	7fefffff 	.word	0x7fefffff
 8004b58:	f018 0310 	ands.w	r3, r8, #16
 8004b5c:	bf18      	it	ne
 8004b5e:	236a      	movne	r3, #106	; 0x6a
 8004b60:	4da0      	ldr	r5, [pc, #640]	; (8004de4 <_strtod_l+0x834>)
 8004b62:	9304      	str	r3, [sp, #16]
 8004b64:	4650      	mov	r0, sl
 8004b66:	4659      	mov	r1, fp
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f1b8 0f00 	cmp.w	r8, #0
 8004b6e:	f300 810a 	bgt.w	8004d86 <_strtod_l+0x7d6>
 8004b72:	b10b      	cbz	r3, 8004b78 <_strtod_l+0x5c8>
 8004b74:	4682      	mov	sl, r0
 8004b76:	468b      	mov	fp, r1
 8004b78:	9b04      	ldr	r3, [sp, #16]
 8004b7a:	b1bb      	cbz	r3, 8004bac <_strtod_l+0x5fc>
 8004b7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8004b80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	4659      	mov	r1, fp
 8004b88:	dd10      	ble.n	8004bac <_strtod_l+0x5fc>
 8004b8a:	2b1f      	cmp	r3, #31
 8004b8c:	f340 8107 	ble.w	8004d9e <_strtod_l+0x7ee>
 8004b90:	2b34      	cmp	r3, #52	; 0x34
 8004b92:	bfde      	ittt	le
 8004b94:	3b20      	suble	r3, #32
 8004b96:	f04f 32ff 	movle.w	r2, #4294967295
 8004b9a:	fa02 f303 	lslle.w	r3, r2, r3
 8004b9e:	f04f 0a00 	mov.w	sl, #0
 8004ba2:	bfcc      	ite	gt
 8004ba4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004ba8:	ea03 0b01 	andle.w	fp, r3, r1
 8004bac:	2200      	movs	r2, #0
 8004bae:	2300      	movs	r3, #0
 8004bb0:	4650      	mov	r0, sl
 8004bb2:	4659      	mov	r1, fp
 8004bb4:	f7fb ff88 	bl	8000ac8 <__aeabi_dcmpeq>
 8004bb8:	2800      	cmp	r0, #0
 8004bba:	d1ac      	bne.n	8004b16 <_strtod_l+0x566>
 8004bbc:	9b07      	ldr	r3, [sp, #28]
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	9a05      	ldr	r2, [sp, #20]
 8004bc2:	9908      	ldr	r1, [sp, #32]
 8004bc4:	4623      	mov	r3, r4
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f001 fdaf 	bl	800672a <__s2b>
 8004bcc:	9007      	str	r0, [sp, #28]
 8004bce:	2800      	cmp	r0, #0
 8004bd0:	f43f af08 	beq.w	80049e4 <_strtod_l+0x434>
 8004bd4:	9a06      	ldr	r2, [sp, #24]
 8004bd6:	9b06      	ldr	r3, [sp, #24]
 8004bd8:	2a00      	cmp	r2, #0
 8004bda:	f1c3 0300 	rsb	r3, r3, #0
 8004bde:	bfa8      	it	ge
 8004be0:	2300      	movge	r3, #0
 8004be2:	930e      	str	r3, [sp, #56]	; 0x38
 8004be4:	2400      	movs	r4, #0
 8004be6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004bea:	9316      	str	r3, [sp, #88]	; 0x58
 8004bec:	46a0      	mov	r8, r4
 8004bee:	9b07      	ldr	r3, [sp, #28]
 8004bf0:	4648      	mov	r0, r9
 8004bf2:	6859      	ldr	r1, [r3, #4]
 8004bf4:	f001 fd13 	bl	800661e <_Balloc>
 8004bf8:	9005      	str	r0, [sp, #20]
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f43f aef6 	beq.w	80049ec <_strtod_l+0x43c>
 8004c00:	9b07      	ldr	r3, [sp, #28]
 8004c02:	691a      	ldr	r2, [r3, #16]
 8004c04:	3202      	adds	r2, #2
 8004c06:	f103 010c 	add.w	r1, r3, #12
 8004c0a:	0092      	lsls	r2, r2, #2
 8004c0c:	300c      	adds	r0, #12
 8004c0e:	f001 fcfb 	bl	8006608 <memcpy>
 8004c12:	aa1e      	add	r2, sp, #120	; 0x78
 8004c14:	a91d      	add	r1, sp, #116	; 0x74
 8004c16:	ec4b ab10 	vmov	d0, sl, fp
 8004c1a:	4648      	mov	r0, r9
 8004c1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004c20:	f002 f83e 	bl	8006ca0 <__d2b>
 8004c24:	901c      	str	r0, [sp, #112]	; 0x70
 8004c26:	2800      	cmp	r0, #0
 8004c28:	f43f aee0 	beq.w	80049ec <_strtod_l+0x43c>
 8004c2c:	2101      	movs	r1, #1
 8004c2e:	4648      	mov	r0, r9
 8004c30:	f001 fe07 	bl	8006842 <__i2b>
 8004c34:	4680      	mov	r8, r0
 8004c36:	2800      	cmp	r0, #0
 8004c38:	f43f aed8 	beq.w	80049ec <_strtod_l+0x43c>
 8004c3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004c3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	bfab      	itete	ge
 8004c44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004c46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004c48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004c4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004c4c:	bfac      	ite	ge
 8004c4e:	18f7      	addge	r7, r6, r3
 8004c50:	1b9d      	sublt	r5, r3, r6
 8004c52:	9b04      	ldr	r3, [sp, #16]
 8004c54:	1af6      	subs	r6, r6, r3
 8004c56:	4416      	add	r6, r2
 8004c58:	4b63      	ldr	r3, [pc, #396]	; (8004de8 <_strtod_l+0x838>)
 8004c5a:	3e01      	subs	r6, #1
 8004c5c:	429e      	cmp	r6, r3
 8004c5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004c62:	f280 80af 	bge.w	8004dc4 <_strtod_l+0x814>
 8004c66:	1b9b      	subs	r3, r3, r6
 8004c68:	2b1f      	cmp	r3, #31
 8004c6a:	eba2 0203 	sub.w	r2, r2, r3
 8004c6e:	f04f 0101 	mov.w	r1, #1
 8004c72:	f300 809b 	bgt.w	8004dac <_strtod_l+0x7fc>
 8004c76:	fa01 f303 	lsl.w	r3, r1, r3
 8004c7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	930a      	str	r3, [sp, #40]	; 0x28
 8004c80:	18be      	adds	r6, r7, r2
 8004c82:	9b04      	ldr	r3, [sp, #16]
 8004c84:	42b7      	cmp	r7, r6
 8004c86:	4415      	add	r5, r2
 8004c88:	441d      	add	r5, r3
 8004c8a:	463b      	mov	r3, r7
 8004c8c:	bfa8      	it	ge
 8004c8e:	4633      	movge	r3, r6
 8004c90:	42ab      	cmp	r3, r5
 8004c92:	bfa8      	it	ge
 8004c94:	462b      	movge	r3, r5
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bfc2      	ittt	gt
 8004c9a:	1af6      	subgt	r6, r6, r3
 8004c9c:	1aed      	subgt	r5, r5, r3
 8004c9e:	1aff      	subgt	r7, r7, r3
 8004ca0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ca2:	b1bb      	cbz	r3, 8004cd4 <_strtod_l+0x724>
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4648      	mov	r0, r9
 8004caa:	f001 fe69 	bl	8006980 <__pow5mult>
 8004cae:	4680      	mov	r8, r0
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	f43f ae9b 	beq.w	80049ec <_strtod_l+0x43c>
 8004cb6:	4601      	mov	r1, r0
 8004cb8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8004cba:	4648      	mov	r0, r9
 8004cbc:	f001 fdca 	bl	8006854 <__multiply>
 8004cc0:	900c      	str	r0, [sp, #48]	; 0x30
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	f43f ae92 	beq.w	80049ec <_strtod_l+0x43c>
 8004cc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004cca:	4648      	mov	r0, r9
 8004ccc:	f001 fcdb 	bl	8006686 <_Bfree>
 8004cd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004cd2:	931c      	str	r3, [sp, #112]	; 0x70
 8004cd4:	2e00      	cmp	r6, #0
 8004cd6:	dc7a      	bgt.n	8004dce <_strtod_l+0x81e>
 8004cd8:	9b06      	ldr	r3, [sp, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	dd08      	ble.n	8004cf0 <_strtod_l+0x740>
 8004cde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004ce0:	9905      	ldr	r1, [sp, #20]
 8004ce2:	4648      	mov	r0, r9
 8004ce4:	f001 fe4c 	bl	8006980 <__pow5mult>
 8004ce8:	9005      	str	r0, [sp, #20]
 8004cea:	2800      	cmp	r0, #0
 8004cec:	f43f ae7e 	beq.w	80049ec <_strtod_l+0x43c>
 8004cf0:	2d00      	cmp	r5, #0
 8004cf2:	dd08      	ble.n	8004d06 <_strtod_l+0x756>
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	9905      	ldr	r1, [sp, #20]
 8004cf8:	4648      	mov	r0, r9
 8004cfa:	f001 fe8f 	bl	8006a1c <__lshift>
 8004cfe:	9005      	str	r0, [sp, #20]
 8004d00:	2800      	cmp	r0, #0
 8004d02:	f43f ae73 	beq.w	80049ec <_strtod_l+0x43c>
 8004d06:	2f00      	cmp	r7, #0
 8004d08:	dd08      	ble.n	8004d1c <_strtod_l+0x76c>
 8004d0a:	4641      	mov	r1, r8
 8004d0c:	463a      	mov	r2, r7
 8004d0e:	4648      	mov	r0, r9
 8004d10:	f001 fe84 	bl	8006a1c <__lshift>
 8004d14:	4680      	mov	r8, r0
 8004d16:	2800      	cmp	r0, #0
 8004d18:	f43f ae68 	beq.w	80049ec <_strtod_l+0x43c>
 8004d1c:	9a05      	ldr	r2, [sp, #20]
 8004d1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004d20:	4648      	mov	r0, r9
 8004d22:	f001 fee9 	bl	8006af8 <__mdiff>
 8004d26:	4604      	mov	r4, r0
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	f43f ae5f 	beq.w	80049ec <_strtod_l+0x43c>
 8004d2e:	68c3      	ldr	r3, [r0, #12]
 8004d30:	930c      	str	r3, [sp, #48]	; 0x30
 8004d32:	2300      	movs	r3, #0
 8004d34:	60c3      	str	r3, [r0, #12]
 8004d36:	4641      	mov	r1, r8
 8004d38:	f001 fec4 	bl	8006ac4 <__mcmp>
 8004d3c:	2800      	cmp	r0, #0
 8004d3e:	da55      	bge.n	8004dec <_strtod_l+0x83c>
 8004d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004d42:	b9e3      	cbnz	r3, 8004d7e <_strtod_l+0x7ce>
 8004d44:	f1ba 0f00 	cmp.w	sl, #0
 8004d48:	d119      	bne.n	8004d7e <_strtod_l+0x7ce>
 8004d4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d4e:	b9b3      	cbnz	r3, 8004d7e <_strtod_l+0x7ce>
 8004d50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004d54:	0d1b      	lsrs	r3, r3, #20
 8004d56:	051b      	lsls	r3, r3, #20
 8004d58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004d5c:	d90f      	bls.n	8004d7e <_strtod_l+0x7ce>
 8004d5e:	6963      	ldr	r3, [r4, #20]
 8004d60:	b913      	cbnz	r3, 8004d68 <_strtod_l+0x7b8>
 8004d62:	6923      	ldr	r3, [r4, #16]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	dd0a      	ble.n	8004d7e <_strtod_l+0x7ce>
 8004d68:	4621      	mov	r1, r4
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4648      	mov	r0, r9
 8004d6e:	f001 fe55 	bl	8006a1c <__lshift>
 8004d72:	4641      	mov	r1, r8
 8004d74:	4604      	mov	r4, r0
 8004d76:	f001 fea5 	bl	8006ac4 <__mcmp>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	dc67      	bgt.n	8004e4e <_strtod_l+0x89e>
 8004d7e:	9b04      	ldr	r3, [sp, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d171      	bne.n	8004e68 <_strtod_l+0x8b8>
 8004d84:	e63d      	b.n	8004a02 <_strtod_l+0x452>
 8004d86:	f018 0f01 	tst.w	r8, #1
 8004d8a:	d004      	beq.n	8004d96 <_strtod_l+0x7e6>
 8004d8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004d90:	f7fb fc32 	bl	80005f8 <__aeabi_dmul>
 8004d94:	2301      	movs	r3, #1
 8004d96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004d9a:	3508      	adds	r5, #8
 8004d9c:	e6e5      	b.n	8004b6a <_strtod_l+0x5ba>
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	ea03 0a0a 	and.w	sl, r3, sl
 8004daa:	e6ff      	b.n	8004bac <_strtod_l+0x5fc>
 8004dac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8004db0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8004db4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8004db8:	36e2      	adds	r6, #226	; 0xe2
 8004dba:	fa01 f306 	lsl.w	r3, r1, r6
 8004dbe:	930a      	str	r3, [sp, #40]	; 0x28
 8004dc0:	910f      	str	r1, [sp, #60]	; 0x3c
 8004dc2:	e75d      	b.n	8004c80 <_strtod_l+0x6d0>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	930a      	str	r3, [sp, #40]	; 0x28
 8004dc8:	2301      	movs	r3, #1
 8004dca:	930f      	str	r3, [sp, #60]	; 0x3c
 8004dcc:	e758      	b.n	8004c80 <_strtod_l+0x6d0>
 8004dce:	4632      	mov	r2, r6
 8004dd0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004dd2:	4648      	mov	r0, r9
 8004dd4:	f001 fe22 	bl	8006a1c <__lshift>
 8004dd8:	901c      	str	r0, [sp, #112]	; 0x70
 8004dda:	2800      	cmp	r0, #0
 8004ddc:	f47f af7c 	bne.w	8004cd8 <_strtod_l+0x728>
 8004de0:	e604      	b.n	80049ec <_strtod_l+0x43c>
 8004de2:	bf00      	nop
 8004de4:	080073e0 	.word	0x080073e0
 8004de8:	fffffc02 	.word	0xfffffc02
 8004dec:	465d      	mov	r5, fp
 8004dee:	f040 8086 	bne.w	8004efe <_strtod_l+0x94e>
 8004df2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004df4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004df8:	b32a      	cbz	r2, 8004e46 <_strtod_l+0x896>
 8004dfa:	4aaf      	ldr	r2, [pc, #700]	; (80050b8 <_strtod_l+0xb08>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d153      	bne.n	8004ea8 <_strtod_l+0x8f8>
 8004e00:	9b04      	ldr	r3, [sp, #16]
 8004e02:	4650      	mov	r0, sl
 8004e04:	b1d3      	cbz	r3, 8004e3c <_strtod_l+0x88c>
 8004e06:	4aad      	ldr	r2, [pc, #692]	; (80050bc <_strtod_l+0xb0c>)
 8004e08:	402a      	ands	r2, r5
 8004e0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8004e12:	d816      	bhi.n	8004e42 <_strtod_l+0x892>
 8004e14:	0d12      	lsrs	r2, r2, #20
 8004e16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e1e:	4298      	cmp	r0, r3
 8004e20:	d142      	bne.n	8004ea8 <_strtod_l+0x8f8>
 8004e22:	4ba7      	ldr	r3, [pc, #668]	; (80050c0 <_strtod_l+0xb10>)
 8004e24:	429d      	cmp	r5, r3
 8004e26:	d102      	bne.n	8004e2e <_strtod_l+0x87e>
 8004e28:	3001      	adds	r0, #1
 8004e2a:	f43f addf 	beq.w	80049ec <_strtod_l+0x43c>
 8004e2e:	4ba3      	ldr	r3, [pc, #652]	; (80050bc <_strtod_l+0xb0c>)
 8004e30:	402b      	ands	r3, r5
 8004e32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004e36:	f04f 0a00 	mov.w	sl, #0
 8004e3a:	e7a0      	b.n	8004d7e <_strtod_l+0x7ce>
 8004e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e40:	e7ed      	b.n	8004e1e <_strtod_l+0x86e>
 8004e42:	460b      	mov	r3, r1
 8004e44:	e7eb      	b.n	8004e1e <_strtod_l+0x86e>
 8004e46:	bb7b      	cbnz	r3, 8004ea8 <_strtod_l+0x8f8>
 8004e48:	f1ba 0f00 	cmp.w	sl, #0
 8004e4c:	d12c      	bne.n	8004ea8 <_strtod_l+0x8f8>
 8004e4e:	9904      	ldr	r1, [sp, #16]
 8004e50:	4a9a      	ldr	r2, [pc, #616]	; (80050bc <_strtod_l+0xb0c>)
 8004e52:	465b      	mov	r3, fp
 8004e54:	b1f1      	cbz	r1, 8004e94 <_strtod_l+0x8e4>
 8004e56:	ea02 010b 	and.w	r1, r2, fp
 8004e5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004e5e:	dc19      	bgt.n	8004e94 <_strtod_l+0x8e4>
 8004e60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004e64:	f77f ae5b 	ble.w	8004b1e <_strtod_l+0x56e>
 8004e68:	4a96      	ldr	r2, [pc, #600]	; (80050c4 <_strtod_l+0xb14>)
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8004e70:	4650      	mov	r0, sl
 8004e72:	4659      	mov	r1, fp
 8004e74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8004e78:	f7fb fbbe 	bl	80005f8 <__aeabi_dmul>
 8004e7c:	4682      	mov	sl, r0
 8004e7e:	468b      	mov	fp, r1
 8004e80:	2900      	cmp	r1, #0
 8004e82:	f47f adbe 	bne.w	8004a02 <_strtod_l+0x452>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	f47f adbb 	bne.w	8004a02 <_strtod_l+0x452>
 8004e8c:	2322      	movs	r3, #34	; 0x22
 8004e8e:	f8c9 3000 	str.w	r3, [r9]
 8004e92:	e5b6      	b.n	8004a02 <_strtod_l+0x452>
 8004e94:	4013      	ands	r3, r2
 8004e96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004e9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004e9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004ea2:	f04f 3aff 	mov.w	sl, #4294967295
 8004ea6:	e76a      	b.n	8004d7e <_strtod_l+0x7ce>
 8004ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004eaa:	b193      	cbz	r3, 8004ed2 <_strtod_l+0x922>
 8004eac:	422b      	tst	r3, r5
 8004eae:	f43f af66 	beq.w	8004d7e <_strtod_l+0x7ce>
 8004eb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004eb4:	9a04      	ldr	r2, [sp, #16]
 8004eb6:	4650      	mov	r0, sl
 8004eb8:	4659      	mov	r1, fp
 8004eba:	b173      	cbz	r3, 8004eda <_strtod_l+0x92a>
 8004ebc:	f7ff fb5c 	bl	8004578 <sulp>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ec8:	f7fb f9e0 	bl	800028c <__adddf3>
 8004ecc:	4682      	mov	sl, r0
 8004ece:	468b      	mov	fp, r1
 8004ed0:	e755      	b.n	8004d7e <_strtod_l+0x7ce>
 8004ed2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004ed4:	ea13 0f0a 	tst.w	r3, sl
 8004ed8:	e7e9      	b.n	8004eae <_strtod_l+0x8fe>
 8004eda:	f7ff fb4d 	bl	8004578 <sulp>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004ee6:	f7fb f9cf 	bl	8000288 <__aeabi_dsub>
 8004eea:	2200      	movs	r2, #0
 8004eec:	2300      	movs	r3, #0
 8004eee:	4682      	mov	sl, r0
 8004ef0:	468b      	mov	fp, r1
 8004ef2:	f7fb fde9 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	f47f ae11 	bne.w	8004b1e <_strtod_l+0x56e>
 8004efc:	e73f      	b.n	8004d7e <_strtod_l+0x7ce>
 8004efe:	4641      	mov	r1, r8
 8004f00:	4620      	mov	r0, r4
 8004f02:	f001 ff1c 	bl	8006d3e <__ratio>
 8004f06:	ec57 6b10 	vmov	r6, r7, d0
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f10:	ee10 0a10 	vmov	r0, s0
 8004f14:	4639      	mov	r1, r7
 8004f16:	f7fb fdeb 	bl	8000af0 <__aeabi_dcmple>
 8004f1a:	2800      	cmp	r0, #0
 8004f1c:	d077      	beq.n	800500e <_strtod_l+0xa5e>
 8004f1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d04a      	beq.n	8004fba <_strtod_l+0xa0a>
 8004f24:	4b68      	ldr	r3, [pc, #416]	; (80050c8 <_strtod_l+0xb18>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004f2c:	4f66      	ldr	r7, [pc, #408]	; (80050c8 <_strtod_l+0xb18>)
 8004f2e:	2600      	movs	r6, #0
 8004f30:	4b62      	ldr	r3, [pc, #392]	; (80050bc <_strtod_l+0xb0c>)
 8004f32:	402b      	ands	r3, r5
 8004f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f36:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f38:	4b64      	ldr	r3, [pc, #400]	; (80050cc <_strtod_l+0xb1c>)
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	f040 80ce 	bne.w	80050dc <_strtod_l+0xb2c>
 8004f40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004f44:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f48:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004f4c:	ec4b ab10 	vmov	d0, sl, fp
 8004f50:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004f54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004f58:	f001 fe2c 	bl	8006bb4 <__ulp>
 8004f5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004f60:	ec53 2b10 	vmov	r2, r3, d0
 8004f64:	f7fb fb48 	bl	80005f8 <__aeabi_dmul>
 8004f68:	4652      	mov	r2, sl
 8004f6a:	465b      	mov	r3, fp
 8004f6c:	f7fb f98e 	bl	800028c <__adddf3>
 8004f70:	460b      	mov	r3, r1
 8004f72:	4952      	ldr	r1, [pc, #328]	; (80050bc <_strtod_l+0xb0c>)
 8004f74:	4a56      	ldr	r2, [pc, #344]	; (80050d0 <_strtod_l+0xb20>)
 8004f76:	4019      	ands	r1, r3
 8004f78:	4291      	cmp	r1, r2
 8004f7a:	4682      	mov	sl, r0
 8004f7c:	d95b      	bls.n	8005036 <_strtod_l+0xa86>
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d103      	bne.n	8004f90 <_strtod_l+0x9e0>
 8004f88:	9b08      	ldr	r3, [sp, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	f43f ad2e 	beq.w	80049ec <_strtod_l+0x43c>
 8004f90:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80050c0 <_strtod_l+0xb10>
 8004f94:	f04f 3aff 	mov.w	sl, #4294967295
 8004f98:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004f9a:	4648      	mov	r0, r9
 8004f9c:	f001 fb73 	bl	8006686 <_Bfree>
 8004fa0:	9905      	ldr	r1, [sp, #20]
 8004fa2:	4648      	mov	r0, r9
 8004fa4:	f001 fb6f 	bl	8006686 <_Bfree>
 8004fa8:	4641      	mov	r1, r8
 8004faa:	4648      	mov	r0, r9
 8004fac:	f001 fb6b 	bl	8006686 <_Bfree>
 8004fb0:	4621      	mov	r1, r4
 8004fb2:	4648      	mov	r0, r9
 8004fb4:	f001 fb67 	bl	8006686 <_Bfree>
 8004fb8:	e619      	b.n	8004bee <_strtod_l+0x63e>
 8004fba:	f1ba 0f00 	cmp.w	sl, #0
 8004fbe:	d11a      	bne.n	8004ff6 <_strtod_l+0xa46>
 8004fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004fc4:	b9eb      	cbnz	r3, 8005002 <_strtod_l+0xa52>
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4b3f      	ldr	r3, [pc, #252]	; (80050c8 <_strtod_l+0xb18>)
 8004fca:	4630      	mov	r0, r6
 8004fcc:	4639      	mov	r1, r7
 8004fce:	f7fb fd85 	bl	8000adc <__aeabi_dcmplt>
 8004fd2:	b9c8      	cbnz	r0, 8005008 <_strtod_l+0xa58>
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	4639      	mov	r1, r7
 8004fd8:	2200      	movs	r2, #0
 8004fda:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <_strtod_l+0xb24>)
 8004fdc:	f7fb fb0c 	bl	80005f8 <__aeabi_dmul>
 8004fe0:	4606      	mov	r6, r0
 8004fe2:	460f      	mov	r7, r1
 8004fe4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004fe8:	9618      	str	r6, [sp, #96]	; 0x60
 8004fea:	9319      	str	r3, [sp, #100]	; 0x64
 8004fec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004ff0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004ff4:	e79c      	b.n	8004f30 <_strtod_l+0x980>
 8004ff6:	f1ba 0f01 	cmp.w	sl, #1
 8004ffa:	d102      	bne.n	8005002 <_strtod_l+0xa52>
 8004ffc:	2d00      	cmp	r5, #0
 8004ffe:	f43f ad8e 	beq.w	8004b1e <_strtod_l+0x56e>
 8005002:	2200      	movs	r2, #0
 8005004:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <_strtod_l+0xb28>)
 8005006:	e78f      	b.n	8004f28 <_strtod_l+0x978>
 8005008:	2600      	movs	r6, #0
 800500a:	4f32      	ldr	r7, [pc, #200]	; (80050d4 <_strtod_l+0xb24>)
 800500c:	e7ea      	b.n	8004fe4 <_strtod_l+0xa34>
 800500e:	4b31      	ldr	r3, [pc, #196]	; (80050d4 <_strtod_l+0xb24>)
 8005010:	4630      	mov	r0, r6
 8005012:	4639      	mov	r1, r7
 8005014:	2200      	movs	r2, #0
 8005016:	f7fb faef 	bl	80005f8 <__aeabi_dmul>
 800501a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800501c:	4606      	mov	r6, r0
 800501e:	460f      	mov	r7, r1
 8005020:	b933      	cbnz	r3, 8005030 <_strtod_l+0xa80>
 8005022:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005026:	9010      	str	r0, [sp, #64]	; 0x40
 8005028:	9311      	str	r3, [sp, #68]	; 0x44
 800502a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800502e:	e7df      	b.n	8004ff0 <_strtod_l+0xa40>
 8005030:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8005034:	e7f9      	b.n	800502a <_strtod_l+0xa7a>
 8005036:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800503a:	9b04      	ldr	r3, [sp, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d1ab      	bne.n	8004f98 <_strtod_l+0x9e8>
 8005040:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005044:	0d1b      	lsrs	r3, r3, #20
 8005046:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005048:	051b      	lsls	r3, r3, #20
 800504a:	429a      	cmp	r2, r3
 800504c:	465d      	mov	r5, fp
 800504e:	d1a3      	bne.n	8004f98 <_strtod_l+0x9e8>
 8005050:	4639      	mov	r1, r7
 8005052:	4630      	mov	r0, r6
 8005054:	f7fb fd80 	bl	8000b58 <__aeabi_d2iz>
 8005058:	f7fb fa64 	bl	8000524 <__aeabi_i2d>
 800505c:	460b      	mov	r3, r1
 800505e:	4602      	mov	r2, r0
 8005060:	4639      	mov	r1, r7
 8005062:	4630      	mov	r0, r6
 8005064:	f7fb f910 	bl	8000288 <__aeabi_dsub>
 8005068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800506a:	4606      	mov	r6, r0
 800506c:	460f      	mov	r7, r1
 800506e:	b933      	cbnz	r3, 800507e <_strtod_l+0xace>
 8005070:	f1ba 0f00 	cmp.w	sl, #0
 8005074:	d103      	bne.n	800507e <_strtod_l+0xace>
 8005076:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800507a:	2d00      	cmp	r5, #0
 800507c:	d06d      	beq.n	800515a <_strtod_l+0xbaa>
 800507e:	a30a      	add	r3, pc, #40	; (adr r3, 80050a8 <_strtod_l+0xaf8>)
 8005080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005084:	4630      	mov	r0, r6
 8005086:	4639      	mov	r1, r7
 8005088:	f7fb fd28 	bl	8000adc <__aeabi_dcmplt>
 800508c:	2800      	cmp	r0, #0
 800508e:	f47f acb8 	bne.w	8004a02 <_strtod_l+0x452>
 8005092:	a307      	add	r3, pc, #28	; (adr r3, 80050b0 <_strtod_l+0xb00>)
 8005094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005098:	4630      	mov	r0, r6
 800509a:	4639      	mov	r1, r7
 800509c:	f7fb fd3c 	bl	8000b18 <__aeabi_dcmpgt>
 80050a0:	2800      	cmp	r0, #0
 80050a2:	f43f af79 	beq.w	8004f98 <_strtod_l+0x9e8>
 80050a6:	e4ac      	b.n	8004a02 <_strtod_l+0x452>
 80050a8:	94a03595 	.word	0x94a03595
 80050ac:	3fdfffff 	.word	0x3fdfffff
 80050b0:	35afe535 	.word	0x35afe535
 80050b4:	3fe00000 	.word	0x3fe00000
 80050b8:	000fffff 	.word	0x000fffff
 80050bc:	7ff00000 	.word	0x7ff00000
 80050c0:	7fefffff 	.word	0x7fefffff
 80050c4:	39500000 	.word	0x39500000
 80050c8:	3ff00000 	.word	0x3ff00000
 80050cc:	7fe00000 	.word	0x7fe00000
 80050d0:	7c9fffff 	.word	0x7c9fffff
 80050d4:	3fe00000 	.word	0x3fe00000
 80050d8:	bff00000 	.word	0xbff00000
 80050dc:	9b04      	ldr	r3, [sp, #16]
 80050de:	b333      	cbz	r3, 800512e <_strtod_l+0xb7e>
 80050e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80050e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80050e6:	d822      	bhi.n	800512e <_strtod_l+0xb7e>
 80050e8:	a327      	add	r3, pc, #156	; (adr r3, 8005188 <_strtod_l+0xbd8>)
 80050ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ee:	4630      	mov	r0, r6
 80050f0:	4639      	mov	r1, r7
 80050f2:	f7fb fcfd 	bl	8000af0 <__aeabi_dcmple>
 80050f6:	b1a0      	cbz	r0, 8005122 <_strtod_l+0xb72>
 80050f8:	4639      	mov	r1, r7
 80050fa:	4630      	mov	r0, r6
 80050fc:	f7fb fd54 	bl	8000ba8 <__aeabi_d2uiz>
 8005100:	2800      	cmp	r0, #0
 8005102:	bf08      	it	eq
 8005104:	2001      	moveq	r0, #1
 8005106:	f7fb f9fd 	bl	8000504 <__aeabi_ui2d>
 800510a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800510c:	4606      	mov	r6, r0
 800510e:	460f      	mov	r7, r1
 8005110:	bb03      	cbnz	r3, 8005154 <_strtod_l+0xba4>
 8005112:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005116:	9012      	str	r0, [sp, #72]	; 0x48
 8005118:	9313      	str	r3, [sp, #76]	; 0x4c
 800511a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800511e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005124:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005126:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800512a:	1a9b      	subs	r3, r3, r2
 800512c:	930b      	str	r3, [sp, #44]	; 0x2c
 800512e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8005132:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8005136:	f001 fd3d 	bl	8006bb4 <__ulp>
 800513a:	4650      	mov	r0, sl
 800513c:	ec53 2b10 	vmov	r2, r3, d0
 8005140:	4659      	mov	r1, fp
 8005142:	f7fb fa59 	bl	80005f8 <__aeabi_dmul>
 8005146:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800514a:	f7fb f89f 	bl	800028c <__adddf3>
 800514e:	4682      	mov	sl, r0
 8005150:	468b      	mov	fp, r1
 8005152:	e772      	b.n	800503a <_strtod_l+0xa8a>
 8005154:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8005158:	e7df      	b.n	800511a <_strtod_l+0xb6a>
 800515a:	a30d      	add	r3, pc, #52	; (adr r3, 8005190 <_strtod_l+0xbe0>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	f7fb fcbc 	bl	8000adc <__aeabi_dcmplt>
 8005164:	e79c      	b.n	80050a0 <_strtod_l+0xaf0>
 8005166:	2300      	movs	r3, #0
 8005168:	930d      	str	r3, [sp, #52]	; 0x34
 800516a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800516c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800516e:	6013      	str	r3, [r2, #0]
 8005170:	f7ff ba61 	b.w	8004636 <_strtod_l+0x86>
 8005174:	2b65      	cmp	r3, #101	; 0x65
 8005176:	f04f 0200 	mov.w	r2, #0
 800517a:	f43f ab4e 	beq.w	800481a <_strtod_l+0x26a>
 800517e:	2101      	movs	r1, #1
 8005180:	4614      	mov	r4, r2
 8005182:	9104      	str	r1, [sp, #16]
 8005184:	f7ff bacb 	b.w	800471e <_strtod_l+0x16e>
 8005188:	ffc00000 	.word	0xffc00000
 800518c:	41dfffff 	.word	0x41dfffff
 8005190:	94a03595 	.word	0x94a03595
 8005194:	3fcfffff 	.word	0x3fcfffff

08005198 <_strtod_r>:
 8005198:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <_strtod_r+0x18>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b410      	push	{r4}
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	4c04      	ldr	r4, [pc, #16]	; (80051b4 <_strtod_r+0x1c>)
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	bf08      	it	eq
 80051a6:	4623      	moveq	r3, r4
 80051a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ac:	f7ff ba00 	b.w	80045b0 <_strtod_l>
 80051b0:	2000000c 	.word	0x2000000c
 80051b4:	20000070 	.word	0x20000070

080051b8 <_strtol_l.isra.0>:
 80051b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051bc:	4680      	mov	r8, r0
 80051be:	4689      	mov	r9, r1
 80051c0:	4692      	mov	sl, r2
 80051c2:	461e      	mov	r6, r3
 80051c4:	460f      	mov	r7, r1
 80051c6:	463d      	mov	r5, r7
 80051c8:	9808      	ldr	r0, [sp, #32]
 80051ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051ce:	f001 f9ed 	bl	80065ac <__locale_ctype_ptr_l>
 80051d2:	4420      	add	r0, r4
 80051d4:	7843      	ldrb	r3, [r0, #1]
 80051d6:	f013 0308 	ands.w	r3, r3, #8
 80051da:	d132      	bne.n	8005242 <_strtol_l.isra.0+0x8a>
 80051dc:	2c2d      	cmp	r4, #45	; 0x2d
 80051de:	d132      	bne.n	8005246 <_strtol_l.isra.0+0x8e>
 80051e0:	787c      	ldrb	r4, [r7, #1]
 80051e2:	1cbd      	adds	r5, r7, #2
 80051e4:	2201      	movs	r2, #1
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	d05d      	beq.n	80052a6 <_strtol_l.isra.0+0xee>
 80051ea:	2e10      	cmp	r6, #16
 80051ec:	d109      	bne.n	8005202 <_strtol_l.isra.0+0x4a>
 80051ee:	2c30      	cmp	r4, #48	; 0x30
 80051f0:	d107      	bne.n	8005202 <_strtol_l.isra.0+0x4a>
 80051f2:	782b      	ldrb	r3, [r5, #0]
 80051f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80051f8:	2b58      	cmp	r3, #88	; 0x58
 80051fa:	d14f      	bne.n	800529c <_strtol_l.isra.0+0xe4>
 80051fc:	786c      	ldrb	r4, [r5, #1]
 80051fe:	2610      	movs	r6, #16
 8005200:	3502      	adds	r5, #2
 8005202:	2a00      	cmp	r2, #0
 8005204:	bf14      	ite	ne
 8005206:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800520a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800520e:	2700      	movs	r7, #0
 8005210:	fbb1 fcf6 	udiv	ip, r1, r6
 8005214:	4638      	mov	r0, r7
 8005216:	fb06 1e1c 	mls	lr, r6, ip, r1
 800521a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800521e:	2b09      	cmp	r3, #9
 8005220:	d817      	bhi.n	8005252 <_strtol_l.isra.0+0x9a>
 8005222:	461c      	mov	r4, r3
 8005224:	42a6      	cmp	r6, r4
 8005226:	dd23      	ble.n	8005270 <_strtol_l.isra.0+0xb8>
 8005228:	1c7b      	adds	r3, r7, #1
 800522a:	d007      	beq.n	800523c <_strtol_l.isra.0+0x84>
 800522c:	4584      	cmp	ip, r0
 800522e:	d31c      	bcc.n	800526a <_strtol_l.isra.0+0xb2>
 8005230:	d101      	bne.n	8005236 <_strtol_l.isra.0+0x7e>
 8005232:	45a6      	cmp	lr, r4
 8005234:	db19      	blt.n	800526a <_strtol_l.isra.0+0xb2>
 8005236:	fb00 4006 	mla	r0, r0, r6, r4
 800523a:	2701      	movs	r7, #1
 800523c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005240:	e7eb      	b.n	800521a <_strtol_l.isra.0+0x62>
 8005242:	462f      	mov	r7, r5
 8005244:	e7bf      	b.n	80051c6 <_strtol_l.isra.0+0xe>
 8005246:	2c2b      	cmp	r4, #43	; 0x2b
 8005248:	bf04      	itt	eq
 800524a:	1cbd      	addeq	r5, r7, #2
 800524c:	787c      	ldrbeq	r4, [r7, #1]
 800524e:	461a      	mov	r2, r3
 8005250:	e7c9      	b.n	80051e6 <_strtol_l.isra.0+0x2e>
 8005252:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005256:	2b19      	cmp	r3, #25
 8005258:	d801      	bhi.n	800525e <_strtol_l.isra.0+0xa6>
 800525a:	3c37      	subs	r4, #55	; 0x37
 800525c:	e7e2      	b.n	8005224 <_strtol_l.isra.0+0x6c>
 800525e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005262:	2b19      	cmp	r3, #25
 8005264:	d804      	bhi.n	8005270 <_strtol_l.isra.0+0xb8>
 8005266:	3c57      	subs	r4, #87	; 0x57
 8005268:	e7dc      	b.n	8005224 <_strtol_l.isra.0+0x6c>
 800526a:	f04f 37ff 	mov.w	r7, #4294967295
 800526e:	e7e5      	b.n	800523c <_strtol_l.isra.0+0x84>
 8005270:	1c7b      	adds	r3, r7, #1
 8005272:	d108      	bne.n	8005286 <_strtol_l.isra.0+0xce>
 8005274:	2322      	movs	r3, #34	; 0x22
 8005276:	f8c8 3000 	str.w	r3, [r8]
 800527a:	4608      	mov	r0, r1
 800527c:	f1ba 0f00 	cmp.w	sl, #0
 8005280:	d107      	bne.n	8005292 <_strtol_l.isra.0+0xda>
 8005282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005286:	b102      	cbz	r2, 800528a <_strtol_l.isra.0+0xd2>
 8005288:	4240      	negs	r0, r0
 800528a:	f1ba 0f00 	cmp.w	sl, #0
 800528e:	d0f8      	beq.n	8005282 <_strtol_l.isra.0+0xca>
 8005290:	b10f      	cbz	r7, 8005296 <_strtol_l.isra.0+0xde>
 8005292:	f105 39ff 	add.w	r9, r5, #4294967295
 8005296:	f8ca 9000 	str.w	r9, [sl]
 800529a:	e7f2      	b.n	8005282 <_strtol_l.isra.0+0xca>
 800529c:	2430      	movs	r4, #48	; 0x30
 800529e:	2e00      	cmp	r6, #0
 80052a0:	d1af      	bne.n	8005202 <_strtol_l.isra.0+0x4a>
 80052a2:	2608      	movs	r6, #8
 80052a4:	e7ad      	b.n	8005202 <_strtol_l.isra.0+0x4a>
 80052a6:	2c30      	cmp	r4, #48	; 0x30
 80052a8:	d0a3      	beq.n	80051f2 <_strtol_l.isra.0+0x3a>
 80052aa:	260a      	movs	r6, #10
 80052ac:	e7a9      	b.n	8005202 <_strtol_l.isra.0+0x4a>
	...

080052b0 <_strtol_r>:
 80052b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80052b2:	4c06      	ldr	r4, [pc, #24]	; (80052cc <_strtol_r+0x1c>)
 80052b4:	4d06      	ldr	r5, [pc, #24]	; (80052d0 <_strtol_r+0x20>)
 80052b6:	6824      	ldr	r4, [r4, #0]
 80052b8:	6a24      	ldr	r4, [r4, #32]
 80052ba:	2c00      	cmp	r4, #0
 80052bc:	bf08      	it	eq
 80052be:	462c      	moveq	r4, r5
 80052c0:	9400      	str	r4, [sp, #0]
 80052c2:	f7ff ff79 	bl	80051b8 <_strtol_l.isra.0>
 80052c6:	b003      	add	sp, #12
 80052c8:	bd30      	pop	{r4, r5, pc}
 80052ca:	bf00      	nop
 80052cc:	2000000c 	.word	0x2000000c
 80052d0:	20000070 	.word	0x20000070

080052d4 <quorem>:
 80052d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d8:	6903      	ldr	r3, [r0, #16]
 80052da:	690c      	ldr	r4, [r1, #16]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	4680      	mov	r8, r0
 80052e0:	f2c0 8082 	blt.w	80053e8 <quorem+0x114>
 80052e4:	3c01      	subs	r4, #1
 80052e6:	f101 0714 	add.w	r7, r1, #20
 80052ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80052ee:	f100 0614 	add.w	r6, r0, #20
 80052f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80052f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80052fa:	eb06 030c 	add.w	r3, r6, ip
 80052fe:	3501      	adds	r5, #1
 8005300:	eb07 090c 	add.w	r9, r7, ip
 8005304:	9301      	str	r3, [sp, #4]
 8005306:	fbb0 f5f5 	udiv	r5, r0, r5
 800530a:	b395      	cbz	r5, 8005372 <quorem+0x9e>
 800530c:	f04f 0a00 	mov.w	sl, #0
 8005310:	4638      	mov	r0, r7
 8005312:	46b6      	mov	lr, r6
 8005314:	46d3      	mov	fp, sl
 8005316:	f850 2b04 	ldr.w	r2, [r0], #4
 800531a:	b293      	uxth	r3, r2
 800531c:	fb05 a303 	mla	r3, r5, r3, sl
 8005320:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005324:	b29b      	uxth	r3, r3
 8005326:	ebab 0303 	sub.w	r3, fp, r3
 800532a:	0c12      	lsrs	r2, r2, #16
 800532c:	f8de b000 	ldr.w	fp, [lr]
 8005330:	fb05 a202 	mla	r2, r5, r2, sl
 8005334:	fa13 f38b 	uxtah	r3, r3, fp
 8005338:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800533c:	fa1f fb82 	uxth.w	fp, r2
 8005340:	f8de 2000 	ldr.w	r2, [lr]
 8005344:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800534c:	b29b      	uxth	r3, r3
 800534e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005352:	4581      	cmp	r9, r0
 8005354:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005358:	f84e 3b04 	str.w	r3, [lr], #4
 800535c:	d2db      	bcs.n	8005316 <quorem+0x42>
 800535e:	f856 300c 	ldr.w	r3, [r6, ip]
 8005362:	b933      	cbnz	r3, 8005372 <quorem+0x9e>
 8005364:	9b01      	ldr	r3, [sp, #4]
 8005366:	3b04      	subs	r3, #4
 8005368:	429e      	cmp	r6, r3
 800536a:	461a      	mov	r2, r3
 800536c:	d330      	bcc.n	80053d0 <quorem+0xfc>
 800536e:	f8c8 4010 	str.w	r4, [r8, #16]
 8005372:	4640      	mov	r0, r8
 8005374:	f001 fba6 	bl	8006ac4 <__mcmp>
 8005378:	2800      	cmp	r0, #0
 800537a:	db25      	blt.n	80053c8 <quorem+0xf4>
 800537c:	3501      	adds	r5, #1
 800537e:	4630      	mov	r0, r6
 8005380:	f04f 0c00 	mov.w	ip, #0
 8005384:	f857 2b04 	ldr.w	r2, [r7], #4
 8005388:	f8d0 e000 	ldr.w	lr, [r0]
 800538c:	b293      	uxth	r3, r2
 800538e:	ebac 0303 	sub.w	r3, ip, r3
 8005392:	0c12      	lsrs	r2, r2, #16
 8005394:	fa13 f38e 	uxtah	r3, r3, lr
 8005398:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800539c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053a6:	45b9      	cmp	r9, r7
 80053a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80053ac:	f840 3b04 	str.w	r3, [r0], #4
 80053b0:	d2e8      	bcs.n	8005384 <quorem+0xb0>
 80053b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80053b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80053ba:	b92a      	cbnz	r2, 80053c8 <quorem+0xf4>
 80053bc:	3b04      	subs	r3, #4
 80053be:	429e      	cmp	r6, r3
 80053c0:	461a      	mov	r2, r3
 80053c2:	d30b      	bcc.n	80053dc <quorem+0x108>
 80053c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80053c8:	4628      	mov	r0, r5
 80053ca:	b003      	add	sp, #12
 80053cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d0:	6812      	ldr	r2, [r2, #0]
 80053d2:	3b04      	subs	r3, #4
 80053d4:	2a00      	cmp	r2, #0
 80053d6:	d1ca      	bne.n	800536e <quorem+0x9a>
 80053d8:	3c01      	subs	r4, #1
 80053da:	e7c5      	b.n	8005368 <quorem+0x94>
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	3b04      	subs	r3, #4
 80053e0:	2a00      	cmp	r2, #0
 80053e2:	d1ef      	bne.n	80053c4 <quorem+0xf0>
 80053e4:	3c01      	subs	r4, #1
 80053e6:	e7ea      	b.n	80053be <quorem+0xea>
 80053e8:	2000      	movs	r0, #0
 80053ea:	e7ee      	b.n	80053ca <quorem+0xf6>
 80053ec:	0000      	movs	r0, r0
	...

080053f0 <_dtoa_r>:
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	ec57 6b10 	vmov	r6, r7, d0
 80053f8:	b097      	sub	sp, #92	; 0x5c
 80053fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053fc:	9106      	str	r1, [sp, #24]
 80053fe:	4604      	mov	r4, r0
 8005400:	920b      	str	r2, [sp, #44]	; 0x2c
 8005402:	9312      	str	r3, [sp, #72]	; 0x48
 8005404:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005408:	e9cd 6700 	strd	r6, r7, [sp]
 800540c:	b93d      	cbnz	r5, 800541e <_dtoa_r+0x2e>
 800540e:	2010      	movs	r0, #16
 8005410:	f001 f8e0 	bl	80065d4 <malloc>
 8005414:	6260      	str	r0, [r4, #36]	; 0x24
 8005416:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800541a:	6005      	str	r5, [r0, #0]
 800541c:	60c5      	str	r5, [r0, #12]
 800541e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005420:	6819      	ldr	r1, [r3, #0]
 8005422:	b151      	cbz	r1, 800543a <_dtoa_r+0x4a>
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	604a      	str	r2, [r1, #4]
 8005428:	2301      	movs	r3, #1
 800542a:	4093      	lsls	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
 800542e:	4620      	mov	r0, r4
 8005430:	f001 f929 	bl	8006686 <_Bfree>
 8005434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	1e3b      	subs	r3, r7, #0
 800543c:	bfbb      	ittet	lt
 800543e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005442:	9301      	strlt	r3, [sp, #4]
 8005444:	2300      	movge	r3, #0
 8005446:	2201      	movlt	r2, #1
 8005448:	bfac      	ite	ge
 800544a:	f8c8 3000 	strge.w	r3, [r8]
 800544e:	f8c8 2000 	strlt.w	r2, [r8]
 8005452:	4baf      	ldr	r3, [pc, #700]	; (8005710 <_dtoa_r+0x320>)
 8005454:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005458:	ea33 0308 	bics.w	r3, r3, r8
 800545c:	d114      	bne.n	8005488 <_dtoa_r+0x98>
 800545e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005460:	f242 730f 	movw	r3, #9999	; 0x270f
 8005464:	6013      	str	r3, [r2, #0]
 8005466:	9b00      	ldr	r3, [sp, #0]
 8005468:	b923      	cbnz	r3, 8005474 <_dtoa_r+0x84>
 800546a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800546e:	2800      	cmp	r0, #0
 8005470:	f000 8542 	beq.w	8005ef8 <_dtoa_r+0xb08>
 8005474:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005476:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8005724 <_dtoa_r+0x334>
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 8544 	beq.w	8005f08 <_dtoa_r+0xb18>
 8005480:	f10b 0303 	add.w	r3, fp, #3
 8005484:	f000 bd3e 	b.w	8005f04 <_dtoa_r+0xb14>
 8005488:	e9dd 6700 	ldrd	r6, r7, [sp]
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	4630      	mov	r0, r6
 8005492:	4639      	mov	r1, r7
 8005494:	f7fb fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8005498:	4681      	mov	r9, r0
 800549a:	b168      	cbz	r0, 80054b8 <_dtoa_r+0xc8>
 800549c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800549e:	2301      	movs	r3, #1
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 8524 	beq.w	8005ef2 <_dtoa_r+0xb02>
 80054aa:	4b9a      	ldr	r3, [pc, #616]	; (8005714 <_dtoa_r+0x324>)
 80054ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80054ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	f000 bd28 	b.w	8005f08 <_dtoa_r+0xb18>
 80054b8:	aa14      	add	r2, sp, #80	; 0x50
 80054ba:	a915      	add	r1, sp, #84	; 0x54
 80054bc:	ec47 6b10 	vmov	d0, r6, r7
 80054c0:	4620      	mov	r0, r4
 80054c2:	f001 fbed 	bl	8006ca0 <__d2b>
 80054c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80054ca:	9004      	str	r0, [sp, #16]
 80054cc:	2d00      	cmp	r5, #0
 80054ce:	d07c      	beq.n	80055ca <_dtoa_r+0x1da>
 80054d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80054d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80054d8:	46b2      	mov	sl, r6
 80054da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80054de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80054e6:	2200      	movs	r2, #0
 80054e8:	4b8b      	ldr	r3, [pc, #556]	; (8005718 <_dtoa_r+0x328>)
 80054ea:	4650      	mov	r0, sl
 80054ec:	4659      	mov	r1, fp
 80054ee:	f7fa fecb 	bl	8000288 <__aeabi_dsub>
 80054f2:	a381      	add	r3, pc, #516	; (adr r3, 80056f8 <_dtoa_r+0x308>)
 80054f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f8:	f7fb f87e 	bl	80005f8 <__aeabi_dmul>
 80054fc:	a380      	add	r3, pc, #512	; (adr r3, 8005700 <_dtoa_r+0x310>)
 80054fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005502:	f7fa fec3 	bl	800028c <__adddf3>
 8005506:	4606      	mov	r6, r0
 8005508:	4628      	mov	r0, r5
 800550a:	460f      	mov	r7, r1
 800550c:	f7fb f80a 	bl	8000524 <__aeabi_i2d>
 8005510:	a37d      	add	r3, pc, #500	; (adr r3, 8005708 <_dtoa_r+0x318>)
 8005512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005516:	f7fb f86f 	bl	80005f8 <__aeabi_dmul>
 800551a:	4602      	mov	r2, r0
 800551c:	460b      	mov	r3, r1
 800551e:	4630      	mov	r0, r6
 8005520:	4639      	mov	r1, r7
 8005522:	f7fa feb3 	bl	800028c <__adddf3>
 8005526:	4606      	mov	r6, r0
 8005528:	460f      	mov	r7, r1
 800552a:	f7fb fb15 	bl	8000b58 <__aeabi_d2iz>
 800552e:	2200      	movs	r2, #0
 8005530:	4682      	mov	sl, r0
 8005532:	2300      	movs	r3, #0
 8005534:	4630      	mov	r0, r6
 8005536:	4639      	mov	r1, r7
 8005538:	f7fb fad0 	bl	8000adc <__aeabi_dcmplt>
 800553c:	b148      	cbz	r0, 8005552 <_dtoa_r+0x162>
 800553e:	4650      	mov	r0, sl
 8005540:	f7fa fff0 	bl	8000524 <__aeabi_i2d>
 8005544:	4632      	mov	r2, r6
 8005546:	463b      	mov	r3, r7
 8005548:	f7fb fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 800554c:	b908      	cbnz	r0, 8005552 <_dtoa_r+0x162>
 800554e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005552:	f1ba 0f16 	cmp.w	sl, #22
 8005556:	d859      	bhi.n	800560c <_dtoa_r+0x21c>
 8005558:	4970      	ldr	r1, [pc, #448]	; (800571c <_dtoa_r+0x32c>)
 800555a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800555e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005562:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005566:	f7fb fad7 	bl	8000b18 <__aeabi_dcmpgt>
 800556a:	2800      	cmp	r0, #0
 800556c:	d050      	beq.n	8005610 <_dtoa_r+0x220>
 800556e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005572:	2300      	movs	r3, #0
 8005574:	930f      	str	r3, [sp, #60]	; 0x3c
 8005576:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005578:	1b5d      	subs	r5, r3, r5
 800557a:	f1b5 0801 	subs.w	r8, r5, #1
 800557e:	bf49      	itett	mi
 8005580:	f1c5 0301 	rsbmi	r3, r5, #1
 8005584:	2300      	movpl	r3, #0
 8005586:	9305      	strmi	r3, [sp, #20]
 8005588:	f04f 0800 	movmi.w	r8, #0
 800558c:	bf58      	it	pl
 800558e:	9305      	strpl	r3, [sp, #20]
 8005590:	f1ba 0f00 	cmp.w	sl, #0
 8005594:	db3e      	blt.n	8005614 <_dtoa_r+0x224>
 8005596:	2300      	movs	r3, #0
 8005598:	44d0      	add	r8, sl
 800559a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800559e:	9307      	str	r3, [sp, #28]
 80055a0:	9b06      	ldr	r3, [sp, #24]
 80055a2:	2b09      	cmp	r3, #9
 80055a4:	f200 8090 	bhi.w	80056c8 <_dtoa_r+0x2d8>
 80055a8:	2b05      	cmp	r3, #5
 80055aa:	bfc4      	itt	gt
 80055ac:	3b04      	subgt	r3, #4
 80055ae:	9306      	strgt	r3, [sp, #24]
 80055b0:	9b06      	ldr	r3, [sp, #24]
 80055b2:	f1a3 0302 	sub.w	r3, r3, #2
 80055b6:	bfcc      	ite	gt
 80055b8:	2500      	movgt	r5, #0
 80055ba:	2501      	movle	r5, #1
 80055bc:	2b03      	cmp	r3, #3
 80055be:	f200 808f 	bhi.w	80056e0 <_dtoa_r+0x2f0>
 80055c2:	e8df f003 	tbb	[pc, r3]
 80055c6:	7f7d      	.short	0x7f7d
 80055c8:	7131      	.short	0x7131
 80055ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80055ce:	441d      	add	r5, r3
 80055d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80055d4:	2820      	cmp	r0, #32
 80055d6:	dd13      	ble.n	8005600 <_dtoa_r+0x210>
 80055d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80055dc:	9b00      	ldr	r3, [sp, #0]
 80055de:	fa08 f800 	lsl.w	r8, r8, r0
 80055e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80055e6:	fa23 f000 	lsr.w	r0, r3, r0
 80055ea:	ea48 0000 	orr.w	r0, r8, r0
 80055ee:	f7fa ff89 	bl	8000504 <__aeabi_ui2d>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4682      	mov	sl, r0
 80055f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80055fa:	3d01      	subs	r5, #1
 80055fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80055fe:	e772      	b.n	80054e6 <_dtoa_r+0xf6>
 8005600:	9b00      	ldr	r3, [sp, #0]
 8005602:	f1c0 0020 	rsb	r0, r0, #32
 8005606:	fa03 f000 	lsl.w	r0, r3, r0
 800560a:	e7f0      	b.n	80055ee <_dtoa_r+0x1fe>
 800560c:	2301      	movs	r3, #1
 800560e:	e7b1      	b.n	8005574 <_dtoa_r+0x184>
 8005610:	900f      	str	r0, [sp, #60]	; 0x3c
 8005612:	e7b0      	b.n	8005576 <_dtoa_r+0x186>
 8005614:	9b05      	ldr	r3, [sp, #20]
 8005616:	eba3 030a 	sub.w	r3, r3, sl
 800561a:	9305      	str	r3, [sp, #20]
 800561c:	f1ca 0300 	rsb	r3, sl, #0
 8005620:	9307      	str	r3, [sp, #28]
 8005622:	2300      	movs	r3, #0
 8005624:	930e      	str	r3, [sp, #56]	; 0x38
 8005626:	e7bb      	b.n	80055a0 <_dtoa_r+0x1b0>
 8005628:	2301      	movs	r3, #1
 800562a:	930a      	str	r3, [sp, #40]	; 0x28
 800562c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800562e:	2b00      	cmp	r3, #0
 8005630:	dd59      	ble.n	80056e6 <_dtoa_r+0x2f6>
 8005632:	9302      	str	r3, [sp, #8]
 8005634:	4699      	mov	r9, r3
 8005636:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005638:	2200      	movs	r2, #0
 800563a:	6072      	str	r2, [r6, #4]
 800563c:	2204      	movs	r2, #4
 800563e:	f102 0014 	add.w	r0, r2, #20
 8005642:	4298      	cmp	r0, r3
 8005644:	6871      	ldr	r1, [r6, #4]
 8005646:	d953      	bls.n	80056f0 <_dtoa_r+0x300>
 8005648:	4620      	mov	r0, r4
 800564a:	f000 ffe8 	bl	800661e <_Balloc>
 800564e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005650:	6030      	str	r0, [r6, #0]
 8005652:	f1b9 0f0e 	cmp.w	r9, #14
 8005656:	f8d3 b000 	ldr.w	fp, [r3]
 800565a:	f200 80e6 	bhi.w	800582a <_dtoa_r+0x43a>
 800565e:	2d00      	cmp	r5, #0
 8005660:	f000 80e3 	beq.w	800582a <_dtoa_r+0x43a>
 8005664:	ed9d 7b00 	vldr	d7, [sp]
 8005668:	f1ba 0f00 	cmp.w	sl, #0
 800566c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8005670:	dd74      	ble.n	800575c <_dtoa_r+0x36c>
 8005672:	4a2a      	ldr	r2, [pc, #168]	; (800571c <_dtoa_r+0x32c>)
 8005674:	f00a 030f 	and.w	r3, sl, #15
 8005678:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800567c:	ed93 7b00 	vldr	d7, [r3]
 8005680:	ea4f 162a 	mov.w	r6, sl, asr #4
 8005684:	06f0      	lsls	r0, r6, #27
 8005686:	ed8d 7b08 	vstr	d7, [sp, #32]
 800568a:	d565      	bpl.n	8005758 <_dtoa_r+0x368>
 800568c:	4b24      	ldr	r3, [pc, #144]	; (8005720 <_dtoa_r+0x330>)
 800568e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005692:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005696:	f7fb f8d9 	bl	800084c <__aeabi_ddiv>
 800569a:	e9cd 0100 	strd	r0, r1, [sp]
 800569e:	f006 060f 	and.w	r6, r6, #15
 80056a2:	2503      	movs	r5, #3
 80056a4:	4f1e      	ldr	r7, [pc, #120]	; (8005720 <_dtoa_r+0x330>)
 80056a6:	e04c      	b.n	8005742 <_dtoa_r+0x352>
 80056a8:	2301      	movs	r3, #1
 80056aa:	930a      	str	r3, [sp, #40]	; 0x28
 80056ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ae:	4453      	add	r3, sl
 80056b0:	f103 0901 	add.w	r9, r3, #1
 80056b4:	9302      	str	r3, [sp, #8]
 80056b6:	464b      	mov	r3, r9
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	bfb8      	it	lt
 80056bc:	2301      	movlt	r3, #1
 80056be:	e7ba      	b.n	8005636 <_dtoa_r+0x246>
 80056c0:	2300      	movs	r3, #0
 80056c2:	e7b2      	b.n	800562a <_dtoa_r+0x23a>
 80056c4:	2300      	movs	r3, #0
 80056c6:	e7f0      	b.n	80056aa <_dtoa_r+0x2ba>
 80056c8:	2501      	movs	r5, #1
 80056ca:	2300      	movs	r3, #0
 80056cc:	9306      	str	r3, [sp, #24]
 80056ce:	950a      	str	r5, [sp, #40]	; 0x28
 80056d0:	f04f 33ff 	mov.w	r3, #4294967295
 80056d4:	9302      	str	r3, [sp, #8]
 80056d6:	4699      	mov	r9, r3
 80056d8:	2200      	movs	r2, #0
 80056da:	2312      	movs	r3, #18
 80056dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80056de:	e7aa      	b.n	8005636 <_dtoa_r+0x246>
 80056e0:	2301      	movs	r3, #1
 80056e2:	930a      	str	r3, [sp, #40]	; 0x28
 80056e4:	e7f4      	b.n	80056d0 <_dtoa_r+0x2e0>
 80056e6:	2301      	movs	r3, #1
 80056e8:	9302      	str	r3, [sp, #8]
 80056ea:	4699      	mov	r9, r3
 80056ec:	461a      	mov	r2, r3
 80056ee:	e7f5      	b.n	80056dc <_dtoa_r+0x2ec>
 80056f0:	3101      	adds	r1, #1
 80056f2:	6071      	str	r1, [r6, #4]
 80056f4:	0052      	lsls	r2, r2, #1
 80056f6:	e7a2      	b.n	800563e <_dtoa_r+0x24e>
 80056f8:	636f4361 	.word	0x636f4361
 80056fc:	3fd287a7 	.word	0x3fd287a7
 8005700:	8b60c8b3 	.word	0x8b60c8b3
 8005704:	3fc68a28 	.word	0x3fc68a28
 8005708:	509f79fb 	.word	0x509f79fb
 800570c:	3fd34413 	.word	0x3fd34413
 8005710:	7ff00000 	.word	0x7ff00000
 8005714:	08007389 	.word	0x08007389
 8005718:	3ff80000 	.word	0x3ff80000
 800571c:	08007448 	.word	0x08007448
 8005720:	08007420 	.word	0x08007420
 8005724:	08007411 	.word	0x08007411
 8005728:	07f1      	lsls	r1, r6, #31
 800572a:	d508      	bpl.n	800573e <_dtoa_r+0x34e>
 800572c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8005730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005734:	f7fa ff60 	bl	80005f8 <__aeabi_dmul>
 8005738:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800573c:	3501      	adds	r5, #1
 800573e:	1076      	asrs	r6, r6, #1
 8005740:	3708      	adds	r7, #8
 8005742:	2e00      	cmp	r6, #0
 8005744:	d1f0      	bne.n	8005728 <_dtoa_r+0x338>
 8005746:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800574a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800574e:	f7fb f87d 	bl	800084c <__aeabi_ddiv>
 8005752:	e9cd 0100 	strd	r0, r1, [sp]
 8005756:	e01a      	b.n	800578e <_dtoa_r+0x39e>
 8005758:	2502      	movs	r5, #2
 800575a:	e7a3      	b.n	80056a4 <_dtoa_r+0x2b4>
 800575c:	f000 80a0 	beq.w	80058a0 <_dtoa_r+0x4b0>
 8005760:	f1ca 0600 	rsb	r6, sl, #0
 8005764:	4b9f      	ldr	r3, [pc, #636]	; (80059e4 <_dtoa_r+0x5f4>)
 8005766:	4fa0      	ldr	r7, [pc, #640]	; (80059e8 <_dtoa_r+0x5f8>)
 8005768:	f006 020f 	and.w	r2, r6, #15
 800576c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005774:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005778:	f7fa ff3e 	bl	80005f8 <__aeabi_dmul>
 800577c:	e9cd 0100 	strd	r0, r1, [sp]
 8005780:	1136      	asrs	r6, r6, #4
 8005782:	2300      	movs	r3, #0
 8005784:	2502      	movs	r5, #2
 8005786:	2e00      	cmp	r6, #0
 8005788:	d17f      	bne.n	800588a <_dtoa_r+0x49a>
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e1      	bne.n	8005752 <_dtoa_r+0x362>
 800578e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005790:	2b00      	cmp	r3, #0
 8005792:	f000 8087 	beq.w	80058a4 <_dtoa_r+0x4b4>
 8005796:	e9dd 6700 	ldrd	r6, r7, [sp]
 800579a:	2200      	movs	r2, #0
 800579c:	4b93      	ldr	r3, [pc, #588]	; (80059ec <_dtoa_r+0x5fc>)
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fb f99b 	bl	8000adc <__aeabi_dcmplt>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	d07c      	beq.n	80058a4 <_dtoa_r+0x4b4>
 80057aa:	f1b9 0f00 	cmp.w	r9, #0
 80057ae:	d079      	beq.n	80058a4 <_dtoa_r+0x4b4>
 80057b0:	9b02      	ldr	r3, [sp, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	dd35      	ble.n	8005822 <_dtoa_r+0x432>
 80057b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80057ba:	9308      	str	r3, [sp, #32]
 80057bc:	4639      	mov	r1, r7
 80057be:	2200      	movs	r2, #0
 80057c0:	4b8b      	ldr	r3, [pc, #556]	; (80059f0 <_dtoa_r+0x600>)
 80057c2:	4630      	mov	r0, r6
 80057c4:	f7fa ff18 	bl	80005f8 <__aeabi_dmul>
 80057c8:	e9cd 0100 	strd	r0, r1, [sp]
 80057cc:	9f02      	ldr	r7, [sp, #8]
 80057ce:	3501      	adds	r5, #1
 80057d0:	4628      	mov	r0, r5
 80057d2:	f7fa fea7 	bl	8000524 <__aeabi_i2d>
 80057d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057da:	f7fa ff0d 	bl	80005f8 <__aeabi_dmul>
 80057de:	2200      	movs	r2, #0
 80057e0:	4b84      	ldr	r3, [pc, #528]	; (80059f4 <_dtoa_r+0x604>)
 80057e2:	f7fa fd53 	bl	800028c <__adddf3>
 80057e6:	4605      	mov	r5, r0
 80057e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80057ec:	2f00      	cmp	r7, #0
 80057ee:	d15d      	bne.n	80058ac <_dtoa_r+0x4bc>
 80057f0:	2200      	movs	r2, #0
 80057f2:	4b81      	ldr	r3, [pc, #516]	; (80059f8 <_dtoa_r+0x608>)
 80057f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057f8:	f7fa fd46 	bl	8000288 <__aeabi_dsub>
 80057fc:	462a      	mov	r2, r5
 80057fe:	4633      	mov	r3, r6
 8005800:	e9cd 0100 	strd	r0, r1, [sp]
 8005804:	f7fb f988 	bl	8000b18 <__aeabi_dcmpgt>
 8005808:	2800      	cmp	r0, #0
 800580a:	f040 8288 	bne.w	8005d1e <_dtoa_r+0x92e>
 800580e:	462a      	mov	r2, r5
 8005810:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005814:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005818:	f7fb f960 	bl	8000adc <__aeabi_dcmplt>
 800581c:	2800      	cmp	r0, #0
 800581e:	f040 827c 	bne.w	8005d1a <_dtoa_r+0x92a>
 8005822:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005826:	e9cd 2300 	strd	r2, r3, [sp]
 800582a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800582c:	2b00      	cmp	r3, #0
 800582e:	f2c0 8150 	blt.w	8005ad2 <_dtoa_r+0x6e2>
 8005832:	f1ba 0f0e 	cmp.w	sl, #14
 8005836:	f300 814c 	bgt.w	8005ad2 <_dtoa_r+0x6e2>
 800583a:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <_dtoa_r+0x5f4>)
 800583c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005840:	ed93 7b00 	vldr	d7, [r3]
 8005844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005846:	2b00      	cmp	r3, #0
 8005848:	ed8d 7b02 	vstr	d7, [sp, #8]
 800584c:	f280 80d8 	bge.w	8005a00 <_dtoa_r+0x610>
 8005850:	f1b9 0f00 	cmp.w	r9, #0
 8005854:	f300 80d4 	bgt.w	8005a00 <_dtoa_r+0x610>
 8005858:	f040 825e 	bne.w	8005d18 <_dtoa_r+0x928>
 800585c:	2200      	movs	r2, #0
 800585e:	4b66      	ldr	r3, [pc, #408]	; (80059f8 <_dtoa_r+0x608>)
 8005860:	ec51 0b17 	vmov	r0, r1, d7
 8005864:	f7fa fec8 	bl	80005f8 <__aeabi_dmul>
 8005868:	e9dd 2300 	ldrd	r2, r3, [sp]
 800586c:	f7fb f94a 	bl	8000b04 <__aeabi_dcmpge>
 8005870:	464f      	mov	r7, r9
 8005872:	464e      	mov	r6, r9
 8005874:	2800      	cmp	r0, #0
 8005876:	f040 8234 	bne.w	8005ce2 <_dtoa_r+0x8f2>
 800587a:	2331      	movs	r3, #49	; 0x31
 800587c:	f10b 0501 	add.w	r5, fp, #1
 8005880:	f88b 3000 	strb.w	r3, [fp]
 8005884:	f10a 0a01 	add.w	sl, sl, #1
 8005888:	e22f      	b.n	8005cea <_dtoa_r+0x8fa>
 800588a:	07f2      	lsls	r2, r6, #31
 800588c:	d505      	bpl.n	800589a <_dtoa_r+0x4aa>
 800588e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005892:	f7fa feb1 	bl	80005f8 <__aeabi_dmul>
 8005896:	3501      	adds	r5, #1
 8005898:	2301      	movs	r3, #1
 800589a:	1076      	asrs	r6, r6, #1
 800589c:	3708      	adds	r7, #8
 800589e:	e772      	b.n	8005786 <_dtoa_r+0x396>
 80058a0:	2502      	movs	r5, #2
 80058a2:	e774      	b.n	800578e <_dtoa_r+0x39e>
 80058a4:	f8cd a020 	str.w	sl, [sp, #32]
 80058a8:	464f      	mov	r7, r9
 80058aa:	e791      	b.n	80057d0 <_dtoa_r+0x3e0>
 80058ac:	4b4d      	ldr	r3, [pc, #308]	; (80059e4 <_dtoa_r+0x5f4>)
 80058ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80058b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80058b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d047      	beq.n	800594c <_dtoa_r+0x55c>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	2000      	movs	r0, #0
 80058c2:	494e      	ldr	r1, [pc, #312]	; (80059fc <_dtoa_r+0x60c>)
 80058c4:	f7fa ffc2 	bl	800084c <__aeabi_ddiv>
 80058c8:	462a      	mov	r2, r5
 80058ca:	4633      	mov	r3, r6
 80058cc:	f7fa fcdc 	bl	8000288 <__aeabi_dsub>
 80058d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80058d4:	465d      	mov	r5, fp
 80058d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058da:	f7fb f93d 	bl	8000b58 <__aeabi_d2iz>
 80058de:	4606      	mov	r6, r0
 80058e0:	f7fa fe20 	bl	8000524 <__aeabi_i2d>
 80058e4:	4602      	mov	r2, r0
 80058e6:	460b      	mov	r3, r1
 80058e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058ec:	f7fa fccc 	bl	8000288 <__aeabi_dsub>
 80058f0:	3630      	adds	r6, #48	; 0x30
 80058f2:	f805 6b01 	strb.w	r6, [r5], #1
 80058f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80058fa:	e9cd 0100 	strd	r0, r1, [sp]
 80058fe:	f7fb f8ed 	bl	8000adc <__aeabi_dcmplt>
 8005902:	2800      	cmp	r0, #0
 8005904:	d163      	bne.n	80059ce <_dtoa_r+0x5de>
 8005906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800590a:	2000      	movs	r0, #0
 800590c:	4937      	ldr	r1, [pc, #220]	; (80059ec <_dtoa_r+0x5fc>)
 800590e:	f7fa fcbb 	bl	8000288 <__aeabi_dsub>
 8005912:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005916:	f7fb f8e1 	bl	8000adc <__aeabi_dcmplt>
 800591a:	2800      	cmp	r0, #0
 800591c:	f040 80b7 	bne.w	8005a8e <_dtoa_r+0x69e>
 8005920:	eba5 030b 	sub.w	r3, r5, fp
 8005924:	429f      	cmp	r7, r3
 8005926:	f77f af7c 	ble.w	8005822 <_dtoa_r+0x432>
 800592a:	2200      	movs	r2, #0
 800592c:	4b30      	ldr	r3, [pc, #192]	; (80059f0 <_dtoa_r+0x600>)
 800592e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005932:	f7fa fe61 	bl	80005f8 <__aeabi_dmul>
 8005936:	2200      	movs	r2, #0
 8005938:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800593c:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <_dtoa_r+0x600>)
 800593e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005942:	f7fa fe59 	bl	80005f8 <__aeabi_dmul>
 8005946:	e9cd 0100 	strd	r0, r1, [sp]
 800594a:	e7c4      	b.n	80058d6 <_dtoa_r+0x4e6>
 800594c:	462a      	mov	r2, r5
 800594e:	4633      	mov	r3, r6
 8005950:	f7fa fe52 	bl	80005f8 <__aeabi_dmul>
 8005954:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8005958:	eb0b 0507 	add.w	r5, fp, r7
 800595c:	465e      	mov	r6, fp
 800595e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005962:	f7fb f8f9 	bl	8000b58 <__aeabi_d2iz>
 8005966:	4607      	mov	r7, r0
 8005968:	f7fa fddc 	bl	8000524 <__aeabi_i2d>
 800596c:	3730      	adds	r7, #48	; 0x30
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005976:	f7fa fc87 	bl	8000288 <__aeabi_dsub>
 800597a:	f806 7b01 	strb.w	r7, [r6], #1
 800597e:	42ae      	cmp	r6, r5
 8005980:	e9cd 0100 	strd	r0, r1, [sp]
 8005984:	f04f 0200 	mov.w	r2, #0
 8005988:	d126      	bne.n	80059d8 <_dtoa_r+0x5e8>
 800598a:	4b1c      	ldr	r3, [pc, #112]	; (80059fc <_dtoa_r+0x60c>)
 800598c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005990:	f7fa fc7c 	bl	800028c <__adddf3>
 8005994:	4602      	mov	r2, r0
 8005996:	460b      	mov	r3, r1
 8005998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800599c:	f7fb f8bc 	bl	8000b18 <__aeabi_dcmpgt>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	d174      	bne.n	8005a8e <_dtoa_r+0x69e>
 80059a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80059a8:	2000      	movs	r0, #0
 80059aa:	4914      	ldr	r1, [pc, #80]	; (80059fc <_dtoa_r+0x60c>)
 80059ac:	f7fa fc6c 	bl	8000288 <__aeabi_dsub>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b8:	f7fb f890 	bl	8000adc <__aeabi_dcmplt>
 80059bc:	2800      	cmp	r0, #0
 80059be:	f43f af30 	beq.w	8005822 <_dtoa_r+0x432>
 80059c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059c6:	2b30      	cmp	r3, #48	; 0x30
 80059c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80059cc:	d002      	beq.n	80059d4 <_dtoa_r+0x5e4>
 80059ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80059d2:	e04a      	b.n	8005a6a <_dtoa_r+0x67a>
 80059d4:	4615      	mov	r5, r2
 80059d6:	e7f4      	b.n	80059c2 <_dtoa_r+0x5d2>
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <_dtoa_r+0x600>)
 80059da:	f7fa fe0d 	bl	80005f8 <__aeabi_dmul>
 80059de:	e9cd 0100 	strd	r0, r1, [sp]
 80059e2:	e7bc      	b.n	800595e <_dtoa_r+0x56e>
 80059e4:	08007448 	.word	0x08007448
 80059e8:	08007420 	.word	0x08007420
 80059ec:	3ff00000 	.word	0x3ff00000
 80059f0:	40240000 	.word	0x40240000
 80059f4:	401c0000 	.word	0x401c0000
 80059f8:	40140000 	.word	0x40140000
 80059fc:	3fe00000 	.word	0x3fe00000
 8005a00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005a04:	465d      	mov	r5, fp
 8005a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	4639      	mov	r1, r7
 8005a0e:	f7fa ff1d 	bl	800084c <__aeabi_ddiv>
 8005a12:	f7fb f8a1 	bl	8000b58 <__aeabi_d2iz>
 8005a16:	4680      	mov	r8, r0
 8005a18:	f7fa fd84 	bl	8000524 <__aeabi_i2d>
 8005a1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a20:	f7fa fdea 	bl	80005f8 <__aeabi_dmul>
 8005a24:	4602      	mov	r2, r0
 8005a26:	460b      	mov	r3, r1
 8005a28:	4630      	mov	r0, r6
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005a30:	f7fa fc2a 	bl	8000288 <__aeabi_dsub>
 8005a34:	f805 6b01 	strb.w	r6, [r5], #1
 8005a38:	eba5 060b 	sub.w	r6, r5, fp
 8005a3c:	45b1      	cmp	r9, r6
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	d139      	bne.n	8005ab8 <_dtoa_r+0x6c8>
 8005a44:	f7fa fc22 	bl	800028c <__adddf3>
 8005a48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460f      	mov	r7, r1
 8005a50:	f7fb f862 	bl	8000b18 <__aeabi_dcmpgt>
 8005a54:	b9c8      	cbnz	r0, 8005a8a <_dtoa_r+0x69a>
 8005a56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	4639      	mov	r1, r7
 8005a5e:	f7fb f833 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a62:	b110      	cbz	r0, 8005a6a <_dtoa_r+0x67a>
 8005a64:	f018 0f01 	tst.w	r8, #1
 8005a68:	d10f      	bne.n	8005a8a <_dtoa_r+0x69a>
 8005a6a:	9904      	ldr	r1, [sp, #16]
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fe0a 	bl	8006686 <_Bfree>
 8005a72:	2300      	movs	r3, #0
 8005a74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005a76:	702b      	strb	r3, [r5, #0]
 8005a78:	f10a 0301 	add.w	r3, sl, #1
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	f000 8241 	beq.w	8005f08 <_dtoa_r+0xb18>
 8005a86:	601d      	str	r5, [r3, #0]
 8005a88:	e23e      	b.n	8005f08 <_dtoa_r+0xb18>
 8005a8a:	f8cd a020 	str.w	sl, [sp, #32]
 8005a8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005a92:	2a39      	cmp	r2, #57	; 0x39
 8005a94:	f105 33ff 	add.w	r3, r5, #4294967295
 8005a98:	d108      	bne.n	8005aac <_dtoa_r+0x6bc>
 8005a9a:	459b      	cmp	fp, r3
 8005a9c:	d10a      	bne.n	8005ab4 <_dtoa_r+0x6c4>
 8005a9e:	9b08      	ldr	r3, [sp, #32]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	9308      	str	r3, [sp, #32]
 8005aa4:	2330      	movs	r3, #48	; 0x30
 8005aa6:	f88b 3000 	strb.w	r3, [fp]
 8005aaa:	465b      	mov	r3, fp
 8005aac:	781a      	ldrb	r2, [r3, #0]
 8005aae:	3201      	adds	r2, #1
 8005ab0:	701a      	strb	r2, [r3, #0]
 8005ab2:	e78c      	b.n	80059ce <_dtoa_r+0x5de>
 8005ab4:	461d      	mov	r5, r3
 8005ab6:	e7ea      	b.n	8005a8e <_dtoa_r+0x69e>
 8005ab8:	2200      	movs	r2, #0
 8005aba:	4b9b      	ldr	r3, [pc, #620]	; (8005d28 <_dtoa_r+0x938>)
 8005abc:	f7fa fd9c 	bl	80005f8 <__aeabi_dmul>
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	4606      	mov	r6, r0
 8005ac6:	460f      	mov	r7, r1
 8005ac8:	f7fa fffe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d09a      	beq.n	8005a06 <_dtoa_r+0x616>
 8005ad0:	e7cb      	b.n	8005a6a <_dtoa_r+0x67a>
 8005ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	f000 808b 	beq.w	8005bf0 <_dtoa_r+0x800>
 8005ada:	9a06      	ldr	r2, [sp, #24]
 8005adc:	2a01      	cmp	r2, #1
 8005ade:	dc6e      	bgt.n	8005bbe <_dtoa_r+0x7ce>
 8005ae0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005ae2:	2a00      	cmp	r2, #0
 8005ae4:	d067      	beq.n	8005bb6 <_dtoa_r+0x7c6>
 8005ae6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005aea:	9f07      	ldr	r7, [sp, #28]
 8005aec:	9d05      	ldr	r5, [sp, #20]
 8005aee:	9a05      	ldr	r2, [sp, #20]
 8005af0:	2101      	movs	r1, #1
 8005af2:	441a      	add	r2, r3
 8005af4:	4620      	mov	r0, r4
 8005af6:	9205      	str	r2, [sp, #20]
 8005af8:	4498      	add	r8, r3
 8005afa:	f000 fea2 	bl	8006842 <__i2b>
 8005afe:	4606      	mov	r6, r0
 8005b00:	2d00      	cmp	r5, #0
 8005b02:	dd0c      	ble.n	8005b1e <_dtoa_r+0x72e>
 8005b04:	f1b8 0f00 	cmp.w	r8, #0
 8005b08:	dd09      	ble.n	8005b1e <_dtoa_r+0x72e>
 8005b0a:	4545      	cmp	r5, r8
 8005b0c:	9a05      	ldr	r2, [sp, #20]
 8005b0e:	462b      	mov	r3, r5
 8005b10:	bfa8      	it	ge
 8005b12:	4643      	movge	r3, r8
 8005b14:	1ad2      	subs	r2, r2, r3
 8005b16:	9205      	str	r2, [sp, #20]
 8005b18:	1aed      	subs	r5, r5, r3
 8005b1a:	eba8 0803 	sub.w	r8, r8, r3
 8005b1e:	9b07      	ldr	r3, [sp, #28]
 8005b20:	b1eb      	cbz	r3, 8005b5e <_dtoa_r+0x76e>
 8005b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d067      	beq.n	8005bf8 <_dtoa_r+0x808>
 8005b28:	b18f      	cbz	r7, 8005b4e <_dtoa_r+0x75e>
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	463a      	mov	r2, r7
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 ff26 	bl	8006980 <__pow5mult>
 8005b34:	9a04      	ldr	r2, [sp, #16]
 8005b36:	4601      	mov	r1, r0
 8005b38:	4606      	mov	r6, r0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fe8a 	bl	8006854 <__multiply>
 8005b40:	9904      	ldr	r1, [sp, #16]
 8005b42:	9008      	str	r0, [sp, #32]
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 fd9e 	bl	8006686 <_Bfree>
 8005b4a:	9b08      	ldr	r3, [sp, #32]
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	9b07      	ldr	r3, [sp, #28]
 8005b50:	1bda      	subs	r2, r3, r7
 8005b52:	d004      	beq.n	8005b5e <_dtoa_r+0x76e>
 8005b54:	9904      	ldr	r1, [sp, #16]
 8005b56:	4620      	mov	r0, r4
 8005b58:	f000 ff12 	bl	8006980 <__pow5mult>
 8005b5c:	9004      	str	r0, [sp, #16]
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4620      	mov	r0, r4
 8005b62:	f000 fe6e 	bl	8006842 <__i2b>
 8005b66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b68:	4607      	mov	r7, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 81d0 	beq.w	8005f10 <_dtoa_r+0xb20>
 8005b70:	461a      	mov	r2, r3
 8005b72:	4601      	mov	r1, r0
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 ff03 	bl	8006980 <__pow5mult>
 8005b7a:	9b06      	ldr	r3, [sp, #24]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	4607      	mov	r7, r0
 8005b80:	dc40      	bgt.n	8005c04 <_dtoa_r+0x814>
 8005b82:	9b00      	ldr	r3, [sp, #0]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d139      	bne.n	8005bfc <_dtoa_r+0x80c>
 8005b88:	9b01      	ldr	r3, [sp, #4]
 8005b8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d136      	bne.n	8005c00 <_dtoa_r+0x810>
 8005b92:	9b01      	ldr	r3, [sp, #4]
 8005b94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b98:	0d1b      	lsrs	r3, r3, #20
 8005b9a:	051b      	lsls	r3, r3, #20
 8005b9c:	b12b      	cbz	r3, 8005baa <_dtoa_r+0x7ba>
 8005b9e:	9b05      	ldr	r3, [sp, #20]
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	9305      	str	r3, [sp, #20]
 8005ba4:	f108 0801 	add.w	r8, r8, #1
 8005ba8:	2301      	movs	r3, #1
 8005baa:	9307      	str	r3, [sp, #28]
 8005bac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d12a      	bne.n	8005c08 <_dtoa_r+0x818>
 8005bb2:	2001      	movs	r0, #1
 8005bb4:	e030      	b.n	8005c18 <_dtoa_r+0x828>
 8005bb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005bb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005bbc:	e795      	b.n	8005aea <_dtoa_r+0x6fa>
 8005bbe:	9b07      	ldr	r3, [sp, #28]
 8005bc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8005bc4:	42bb      	cmp	r3, r7
 8005bc6:	bfbf      	itttt	lt
 8005bc8:	9b07      	ldrlt	r3, [sp, #28]
 8005bca:	9707      	strlt	r7, [sp, #28]
 8005bcc:	1afa      	sublt	r2, r7, r3
 8005bce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005bd0:	bfbb      	ittet	lt
 8005bd2:	189b      	addlt	r3, r3, r2
 8005bd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005bd6:	1bdf      	subge	r7, r3, r7
 8005bd8:	2700      	movlt	r7, #0
 8005bda:	f1b9 0f00 	cmp.w	r9, #0
 8005bde:	bfb5      	itete	lt
 8005be0:	9b05      	ldrlt	r3, [sp, #20]
 8005be2:	9d05      	ldrge	r5, [sp, #20]
 8005be4:	eba3 0509 	sublt.w	r5, r3, r9
 8005be8:	464b      	movge	r3, r9
 8005bea:	bfb8      	it	lt
 8005bec:	2300      	movlt	r3, #0
 8005bee:	e77e      	b.n	8005aee <_dtoa_r+0x6fe>
 8005bf0:	9f07      	ldr	r7, [sp, #28]
 8005bf2:	9d05      	ldr	r5, [sp, #20]
 8005bf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005bf6:	e783      	b.n	8005b00 <_dtoa_r+0x710>
 8005bf8:	9a07      	ldr	r2, [sp, #28]
 8005bfa:	e7ab      	b.n	8005b54 <_dtoa_r+0x764>
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	e7d4      	b.n	8005baa <_dtoa_r+0x7ba>
 8005c00:	9b00      	ldr	r3, [sp, #0]
 8005c02:	e7d2      	b.n	8005baa <_dtoa_r+0x7ba>
 8005c04:	2300      	movs	r3, #0
 8005c06:	9307      	str	r3, [sp, #28]
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005c0e:	6918      	ldr	r0, [r3, #16]
 8005c10:	f000 fdc9 	bl	80067a6 <__hi0bits>
 8005c14:	f1c0 0020 	rsb	r0, r0, #32
 8005c18:	4440      	add	r0, r8
 8005c1a:	f010 001f 	ands.w	r0, r0, #31
 8005c1e:	d047      	beq.n	8005cb0 <_dtoa_r+0x8c0>
 8005c20:	f1c0 0320 	rsb	r3, r0, #32
 8005c24:	2b04      	cmp	r3, #4
 8005c26:	dd3b      	ble.n	8005ca0 <_dtoa_r+0x8b0>
 8005c28:	9b05      	ldr	r3, [sp, #20]
 8005c2a:	f1c0 001c 	rsb	r0, r0, #28
 8005c2e:	4403      	add	r3, r0
 8005c30:	9305      	str	r3, [sp, #20]
 8005c32:	4405      	add	r5, r0
 8005c34:	4480      	add	r8, r0
 8005c36:	9b05      	ldr	r3, [sp, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	dd05      	ble.n	8005c48 <_dtoa_r+0x858>
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	9904      	ldr	r1, [sp, #16]
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 feeb 	bl	8006a1c <__lshift>
 8005c46:	9004      	str	r0, [sp, #16]
 8005c48:	f1b8 0f00 	cmp.w	r8, #0
 8005c4c:	dd05      	ble.n	8005c5a <_dtoa_r+0x86a>
 8005c4e:	4639      	mov	r1, r7
 8005c50:	4642      	mov	r2, r8
 8005c52:	4620      	mov	r0, r4
 8005c54:	f000 fee2 	bl	8006a1c <__lshift>
 8005c58:	4607      	mov	r7, r0
 8005c5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005c5c:	b353      	cbz	r3, 8005cb4 <_dtoa_r+0x8c4>
 8005c5e:	4639      	mov	r1, r7
 8005c60:	9804      	ldr	r0, [sp, #16]
 8005c62:	f000 ff2f 	bl	8006ac4 <__mcmp>
 8005c66:	2800      	cmp	r0, #0
 8005c68:	da24      	bge.n	8005cb4 <_dtoa_r+0x8c4>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	220a      	movs	r2, #10
 8005c6e:	9904      	ldr	r1, [sp, #16]
 8005c70:	4620      	mov	r0, r4
 8005c72:	f000 fd1f 	bl	80066b4 <__multadd>
 8005c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c78:	9004      	str	r0, [sp, #16]
 8005c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 814d 	beq.w	8005f1e <_dtoa_r+0xb2e>
 8005c84:	2300      	movs	r3, #0
 8005c86:	4631      	mov	r1, r6
 8005c88:	220a      	movs	r2, #10
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f000 fd12 	bl	80066b4 <__multadd>
 8005c90:	9b02      	ldr	r3, [sp, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	4606      	mov	r6, r0
 8005c96:	dc4f      	bgt.n	8005d38 <_dtoa_r+0x948>
 8005c98:	9b06      	ldr	r3, [sp, #24]
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	dd4c      	ble.n	8005d38 <_dtoa_r+0x948>
 8005c9e:	e011      	b.n	8005cc4 <_dtoa_r+0x8d4>
 8005ca0:	d0c9      	beq.n	8005c36 <_dtoa_r+0x846>
 8005ca2:	9a05      	ldr	r2, [sp, #20]
 8005ca4:	331c      	adds	r3, #28
 8005ca6:	441a      	add	r2, r3
 8005ca8:	9205      	str	r2, [sp, #20]
 8005caa:	441d      	add	r5, r3
 8005cac:	4498      	add	r8, r3
 8005cae:	e7c2      	b.n	8005c36 <_dtoa_r+0x846>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	e7f6      	b.n	8005ca2 <_dtoa_r+0x8b2>
 8005cb4:	f1b9 0f00 	cmp.w	r9, #0
 8005cb8:	dc38      	bgt.n	8005d2c <_dtoa_r+0x93c>
 8005cba:	9b06      	ldr	r3, [sp, #24]
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	dd35      	ble.n	8005d2c <_dtoa_r+0x93c>
 8005cc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8005cc4:	9b02      	ldr	r3, [sp, #8]
 8005cc6:	b963      	cbnz	r3, 8005ce2 <_dtoa_r+0x8f2>
 8005cc8:	4639      	mov	r1, r7
 8005cca:	2205      	movs	r2, #5
 8005ccc:	4620      	mov	r0, r4
 8005cce:	f000 fcf1 	bl	80066b4 <__multadd>
 8005cd2:	4601      	mov	r1, r0
 8005cd4:	4607      	mov	r7, r0
 8005cd6:	9804      	ldr	r0, [sp, #16]
 8005cd8:	f000 fef4 	bl	8006ac4 <__mcmp>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	f73f adcc 	bgt.w	800587a <_dtoa_r+0x48a>
 8005ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ce4:	465d      	mov	r5, fp
 8005ce6:	ea6f 0a03 	mvn.w	sl, r3
 8005cea:	f04f 0900 	mov.w	r9, #0
 8005cee:	4639      	mov	r1, r7
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 fcc8 	bl	8006686 <_Bfree>
 8005cf6:	2e00      	cmp	r6, #0
 8005cf8:	f43f aeb7 	beq.w	8005a6a <_dtoa_r+0x67a>
 8005cfc:	f1b9 0f00 	cmp.w	r9, #0
 8005d00:	d005      	beq.n	8005d0e <_dtoa_r+0x91e>
 8005d02:	45b1      	cmp	r9, r6
 8005d04:	d003      	beq.n	8005d0e <_dtoa_r+0x91e>
 8005d06:	4649      	mov	r1, r9
 8005d08:	4620      	mov	r0, r4
 8005d0a:	f000 fcbc 	bl	8006686 <_Bfree>
 8005d0e:	4631      	mov	r1, r6
 8005d10:	4620      	mov	r0, r4
 8005d12:	f000 fcb8 	bl	8006686 <_Bfree>
 8005d16:	e6a8      	b.n	8005a6a <_dtoa_r+0x67a>
 8005d18:	2700      	movs	r7, #0
 8005d1a:	463e      	mov	r6, r7
 8005d1c:	e7e1      	b.n	8005ce2 <_dtoa_r+0x8f2>
 8005d1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005d22:	463e      	mov	r6, r7
 8005d24:	e5a9      	b.n	800587a <_dtoa_r+0x48a>
 8005d26:	bf00      	nop
 8005d28:	40240000 	.word	0x40240000
 8005d2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f000 80fa 	beq.w	8005f2c <_dtoa_r+0xb3c>
 8005d38:	2d00      	cmp	r5, #0
 8005d3a:	dd05      	ble.n	8005d48 <_dtoa_r+0x958>
 8005d3c:	4631      	mov	r1, r6
 8005d3e:	462a      	mov	r2, r5
 8005d40:	4620      	mov	r0, r4
 8005d42:	f000 fe6b 	bl	8006a1c <__lshift>
 8005d46:	4606      	mov	r6, r0
 8005d48:	9b07      	ldr	r3, [sp, #28]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d04c      	beq.n	8005de8 <_dtoa_r+0x9f8>
 8005d4e:	6871      	ldr	r1, [r6, #4]
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fc64 	bl	800661e <_Balloc>
 8005d56:	6932      	ldr	r2, [r6, #16]
 8005d58:	3202      	adds	r2, #2
 8005d5a:	4605      	mov	r5, r0
 8005d5c:	0092      	lsls	r2, r2, #2
 8005d5e:	f106 010c 	add.w	r1, r6, #12
 8005d62:	300c      	adds	r0, #12
 8005d64:	f000 fc50 	bl	8006608 <memcpy>
 8005d68:	2201      	movs	r2, #1
 8005d6a:	4629      	mov	r1, r5
 8005d6c:	4620      	mov	r0, r4
 8005d6e:	f000 fe55 	bl	8006a1c <__lshift>
 8005d72:	9b00      	ldr	r3, [sp, #0]
 8005d74:	f8cd b014 	str.w	fp, [sp, #20]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	46b1      	mov	r9, r6
 8005d7e:	9307      	str	r3, [sp, #28]
 8005d80:	4606      	mov	r6, r0
 8005d82:	4639      	mov	r1, r7
 8005d84:	9804      	ldr	r0, [sp, #16]
 8005d86:	f7ff faa5 	bl	80052d4 <quorem>
 8005d8a:	4649      	mov	r1, r9
 8005d8c:	4605      	mov	r5, r0
 8005d8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005d92:	9804      	ldr	r0, [sp, #16]
 8005d94:	f000 fe96 	bl	8006ac4 <__mcmp>
 8005d98:	4632      	mov	r2, r6
 8005d9a:	9000      	str	r0, [sp, #0]
 8005d9c:	4639      	mov	r1, r7
 8005d9e:	4620      	mov	r0, r4
 8005da0:	f000 feaa 	bl	8006af8 <__mdiff>
 8005da4:	68c3      	ldr	r3, [r0, #12]
 8005da6:	4602      	mov	r2, r0
 8005da8:	bb03      	cbnz	r3, 8005dec <_dtoa_r+0x9fc>
 8005daa:	4601      	mov	r1, r0
 8005dac:	9008      	str	r0, [sp, #32]
 8005dae:	9804      	ldr	r0, [sp, #16]
 8005db0:	f000 fe88 	bl	8006ac4 <__mcmp>
 8005db4:	9a08      	ldr	r2, [sp, #32]
 8005db6:	4603      	mov	r3, r0
 8005db8:	4611      	mov	r1, r2
 8005dba:	4620      	mov	r0, r4
 8005dbc:	9308      	str	r3, [sp, #32]
 8005dbe:	f000 fc62 	bl	8006686 <_Bfree>
 8005dc2:	9b08      	ldr	r3, [sp, #32]
 8005dc4:	b9a3      	cbnz	r3, 8005df0 <_dtoa_r+0xa00>
 8005dc6:	9a06      	ldr	r2, [sp, #24]
 8005dc8:	b992      	cbnz	r2, 8005df0 <_dtoa_r+0xa00>
 8005dca:	9a07      	ldr	r2, [sp, #28]
 8005dcc:	b982      	cbnz	r2, 8005df0 <_dtoa_r+0xa00>
 8005dce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005dd2:	d029      	beq.n	8005e28 <_dtoa_r+0xa38>
 8005dd4:	9b00      	ldr	r3, [sp, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	dd01      	ble.n	8005dde <_dtoa_r+0x9ee>
 8005dda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005dde:	9b05      	ldr	r3, [sp, #20]
 8005de0:	1c5d      	adds	r5, r3, #1
 8005de2:	f883 8000 	strb.w	r8, [r3]
 8005de6:	e782      	b.n	8005cee <_dtoa_r+0x8fe>
 8005de8:	4630      	mov	r0, r6
 8005dea:	e7c2      	b.n	8005d72 <_dtoa_r+0x982>
 8005dec:	2301      	movs	r3, #1
 8005dee:	e7e3      	b.n	8005db8 <_dtoa_r+0x9c8>
 8005df0:	9a00      	ldr	r2, [sp, #0]
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	db04      	blt.n	8005e00 <_dtoa_r+0xa10>
 8005df6:	d125      	bne.n	8005e44 <_dtoa_r+0xa54>
 8005df8:	9a06      	ldr	r2, [sp, #24]
 8005dfa:	bb1a      	cbnz	r2, 8005e44 <_dtoa_r+0xa54>
 8005dfc:	9a07      	ldr	r2, [sp, #28]
 8005dfe:	bb0a      	cbnz	r2, 8005e44 <_dtoa_r+0xa54>
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	ddec      	ble.n	8005dde <_dtoa_r+0x9ee>
 8005e04:	2201      	movs	r2, #1
 8005e06:	9904      	ldr	r1, [sp, #16]
 8005e08:	4620      	mov	r0, r4
 8005e0a:	f000 fe07 	bl	8006a1c <__lshift>
 8005e0e:	4639      	mov	r1, r7
 8005e10:	9004      	str	r0, [sp, #16]
 8005e12:	f000 fe57 	bl	8006ac4 <__mcmp>
 8005e16:	2800      	cmp	r0, #0
 8005e18:	dc03      	bgt.n	8005e22 <_dtoa_r+0xa32>
 8005e1a:	d1e0      	bne.n	8005dde <_dtoa_r+0x9ee>
 8005e1c:	f018 0f01 	tst.w	r8, #1
 8005e20:	d0dd      	beq.n	8005dde <_dtoa_r+0x9ee>
 8005e22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e26:	d1d8      	bne.n	8005dda <_dtoa_r+0x9ea>
 8005e28:	9b05      	ldr	r3, [sp, #20]
 8005e2a:	9a05      	ldr	r2, [sp, #20]
 8005e2c:	1c5d      	adds	r5, r3, #1
 8005e2e:	2339      	movs	r3, #57	; 0x39
 8005e30:	7013      	strb	r3, [r2, #0]
 8005e32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005e36:	2b39      	cmp	r3, #57	; 0x39
 8005e38:	f105 32ff 	add.w	r2, r5, #4294967295
 8005e3c:	d04f      	beq.n	8005ede <_dtoa_r+0xaee>
 8005e3e:	3301      	adds	r3, #1
 8005e40:	7013      	strb	r3, [r2, #0]
 8005e42:	e754      	b.n	8005cee <_dtoa_r+0x8fe>
 8005e44:	9a05      	ldr	r2, [sp, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	f102 0501 	add.w	r5, r2, #1
 8005e4c:	dd06      	ble.n	8005e5c <_dtoa_r+0xa6c>
 8005e4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005e52:	d0e9      	beq.n	8005e28 <_dtoa_r+0xa38>
 8005e54:	f108 0801 	add.w	r8, r8, #1
 8005e58:	9b05      	ldr	r3, [sp, #20]
 8005e5a:	e7c2      	b.n	8005de2 <_dtoa_r+0x9f2>
 8005e5c:	9a02      	ldr	r2, [sp, #8]
 8005e5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005e62:	eba5 030b 	sub.w	r3, r5, fp
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d021      	beq.n	8005eae <_dtoa_r+0xabe>
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	220a      	movs	r2, #10
 8005e6e:	9904      	ldr	r1, [sp, #16]
 8005e70:	4620      	mov	r0, r4
 8005e72:	f000 fc1f 	bl	80066b4 <__multadd>
 8005e76:	45b1      	cmp	r9, r6
 8005e78:	9004      	str	r0, [sp, #16]
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	f04f 020a 	mov.w	r2, #10
 8005e82:	4649      	mov	r1, r9
 8005e84:	4620      	mov	r0, r4
 8005e86:	d105      	bne.n	8005e94 <_dtoa_r+0xaa4>
 8005e88:	f000 fc14 	bl	80066b4 <__multadd>
 8005e8c:	4681      	mov	r9, r0
 8005e8e:	4606      	mov	r6, r0
 8005e90:	9505      	str	r5, [sp, #20]
 8005e92:	e776      	b.n	8005d82 <_dtoa_r+0x992>
 8005e94:	f000 fc0e 	bl	80066b4 <__multadd>
 8005e98:	4631      	mov	r1, r6
 8005e9a:	4681      	mov	r9, r0
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	220a      	movs	r2, #10
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 fc07 	bl	80066b4 <__multadd>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	e7f2      	b.n	8005e90 <_dtoa_r+0xaa0>
 8005eaa:	f04f 0900 	mov.w	r9, #0
 8005eae:	2201      	movs	r2, #1
 8005eb0:	9904      	ldr	r1, [sp, #16]
 8005eb2:	4620      	mov	r0, r4
 8005eb4:	f000 fdb2 	bl	8006a1c <__lshift>
 8005eb8:	4639      	mov	r1, r7
 8005eba:	9004      	str	r0, [sp, #16]
 8005ebc:	f000 fe02 	bl	8006ac4 <__mcmp>
 8005ec0:	2800      	cmp	r0, #0
 8005ec2:	dcb6      	bgt.n	8005e32 <_dtoa_r+0xa42>
 8005ec4:	d102      	bne.n	8005ecc <_dtoa_r+0xadc>
 8005ec6:	f018 0f01 	tst.w	r8, #1
 8005eca:	d1b2      	bne.n	8005e32 <_dtoa_r+0xa42>
 8005ecc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005ed0:	2b30      	cmp	r3, #48	; 0x30
 8005ed2:	f105 32ff 	add.w	r2, r5, #4294967295
 8005ed6:	f47f af0a 	bne.w	8005cee <_dtoa_r+0x8fe>
 8005eda:	4615      	mov	r5, r2
 8005edc:	e7f6      	b.n	8005ecc <_dtoa_r+0xadc>
 8005ede:	4593      	cmp	fp, r2
 8005ee0:	d105      	bne.n	8005eee <_dtoa_r+0xafe>
 8005ee2:	2331      	movs	r3, #49	; 0x31
 8005ee4:	f10a 0a01 	add.w	sl, sl, #1
 8005ee8:	f88b 3000 	strb.w	r3, [fp]
 8005eec:	e6ff      	b.n	8005cee <_dtoa_r+0x8fe>
 8005eee:	4615      	mov	r5, r2
 8005ef0:	e79f      	b.n	8005e32 <_dtoa_r+0xa42>
 8005ef2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005f58 <_dtoa_r+0xb68>
 8005ef6:	e007      	b.n	8005f08 <_dtoa_r+0xb18>
 8005ef8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005efa:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005f5c <_dtoa_r+0xb6c>
 8005efe:	b11b      	cbz	r3, 8005f08 <_dtoa_r+0xb18>
 8005f00:	f10b 0308 	add.w	r3, fp, #8
 8005f04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4658      	mov	r0, fp
 8005f0a:	b017      	add	sp, #92	; 0x5c
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f10:	9b06      	ldr	r3, [sp, #24]
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	f77f ae35 	ble.w	8005b82 <_dtoa_r+0x792>
 8005f18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f1a:	9307      	str	r3, [sp, #28]
 8005f1c:	e649      	b.n	8005bb2 <_dtoa_r+0x7c2>
 8005f1e:	9b02      	ldr	r3, [sp, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	dc03      	bgt.n	8005f2c <_dtoa_r+0xb3c>
 8005f24:	9b06      	ldr	r3, [sp, #24]
 8005f26:	2b02      	cmp	r3, #2
 8005f28:	f73f aecc 	bgt.w	8005cc4 <_dtoa_r+0x8d4>
 8005f2c:	465d      	mov	r5, fp
 8005f2e:	4639      	mov	r1, r7
 8005f30:	9804      	ldr	r0, [sp, #16]
 8005f32:	f7ff f9cf 	bl	80052d4 <quorem>
 8005f36:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005f3a:	f805 8b01 	strb.w	r8, [r5], #1
 8005f3e:	9a02      	ldr	r2, [sp, #8]
 8005f40:	eba5 030b 	sub.w	r3, r5, fp
 8005f44:	429a      	cmp	r2, r3
 8005f46:	ddb0      	ble.n	8005eaa <_dtoa_r+0xaba>
 8005f48:	2300      	movs	r3, #0
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	9904      	ldr	r1, [sp, #16]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 fbb0 	bl	80066b4 <__multadd>
 8005f54:	9004      	str	r0, [sp, #16]
 8005f56:	e7ea      	b.n	8005f2e <_dtoa_r+0xb3e>
 8005f58:	08007388 	.word	0x08007388
 8005f5c:	08007408 	.word	0x08007408

08005f60 <rshift>:
 8005f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f62:	6906      	ldr	r6, [r0, #16]
 8005f64:	114b      	asrs	r3, r1, #5
 8005f66:	429e      	cmp	r6, r3
 8005f68:	f100 0414 	add.w	r4, r0, #20
 8005f6c:	dd30      	ble.n	8005fd0 <rshift+0x70>
 8005f6e:	f011 011f 	ands.w	r1, r1, #31
 8005f72:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8005f76:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005f7a:	d108      	bne.n	8005f8e <rshift+0x2e>
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	42b2      	cmp	r2, r6
 8005f80:	460b      	mov	r3, r1
 8005f82:	d211      	bcs.n	8005fa8 <rshift+0x48>
 8005f84:	f852 3b04 	ldr.w	r3, [r2], #4
 8005f88:	f841 3b04 	str.w	r3, [r1], #4
 8005f8c:	e7f7      	b.n	8005f7e <rshift+0x1e>
 8005f8e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005f92:	f1c1 0c20 	rsb	ip, r1, #32
 8005f96:	40cd      	lsrs	r5, r1
 8005f98:	3204      	adds	r2, #4
 8005f9a:	4623      	mov	r3, r4
 8005f9c:	42b2      	cmp	r2, r6
 8005f9e:	4617      	mov	r7, r2
 8005fa0:	d30c      	bcc.n	8005fbc <rshift+0x5c>
 8005fa2:	601d      	str	r5, [r3, #0]
 8005fa4:	b105      	cbz	r5, 8005fa8 <rshift+0x48>
 8005fa6:	3304      	adds	r3, #4
 8005fa8:	1b1a      	subs	r2, r3, r4
 8005faa:	42a3      	cmp	r3, r4
 8005fac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005fb0:	bf08      	it	eq
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	6102      	str	r2, [r0, #16]
 8005fb6:	bf08      	it	eq
 8005fb8:	6143      	streq	r3, [r0, #20]
 8005fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fbc:	683f      	ldr	r7, [r7, #0]
 8005fbe:	fa07 f70c 	lsl.w	r7, r7, ip
 8005fc2:	433d      	orrs	r5, r7
 8005fc4:	f843 5b04 	str.w	r5, [r3], #4
 8005fc8:	f852 5b04 	ldr.w	r5, [r2], #4
 8005fcc:	40cd      	lsrs	r5, r1
 8005fce:	e7e5      	b.n	8005f9c <rshift+0x3c>
 8005fd0:	4623      	mov	r3, r4
 8005fd2:	e7e9      	b.n	8005fa8 <rshift+0x48>

08005fd4 <__hexdig_fun>:
 8005fd4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d802      	bhi.n	8005fe2 <__hexdig_fun+0xe>
 8005fdc:	3820      	subs	r0, #32
 8005fde:	b2c0      	uxtb	r0, r0
 8005fe0:	4770      	bx	lr
 8005fe2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005fe6:	2b05      	cmp	r3, #5
 8005fe8:	d801      	bhi.n	8005fee <__hexdig_fun+0x1a>
 8005fea:	3847      	subs	r0, #71	; 0x47
 8005fec:	e7f7      	b.n	8005fde <__hexdig_fun+0xa>
 8005fee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d801      	bhi.n	8005ffa <__hexdig_fun+0x26>
 8005ff6:	3827      	subs	r0, #39	; 0x27
 8005ff8:	e7f1      	b.n	8005fde <__hexdig_fun+0xa>
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	4770      	bx	lr

08005ffe <__gethex>:
 8005ffe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006002:	b08b      	sub	sp, #44	; 0x2c
 8006004:	468a      	mov	sl, r1
 8006006:	9002      	str	r0, [sp, #8]
 8006008:	9816      	ldr	r0, [sp, #88]	; 0x58
 800600a:	9306      	str	r3, [sp, #24]
 800600c:	4690      	mov	r8, r2
 800600e:	f000 fad0 	bl	80065b2 <__localeconv_l>
 8006012:	6803      	ldr	r3, [r0, #0]
 8006014:	9303      	str	r3, [sp, #12]
 8006016:	4618      	mov	r0, r3
 8006018:	f7fa f8da 	bl	80001d0 <strlen>
 800601c:	9b03      	ldr	r3, [sp, #12]
 800601e:	9001      	str	r0, [sp, #4]
 8006020:	4403      	add	r3, r0
 8006022:	f04f 0b00 	mov.w	fp, #0
 8006026:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800602a:	9307      	str	r3, [sp, #28]
 800602c:	f8da 3000 	ldr.w	r3, [sl]
 8006030:	3302      	adds	r3, #2
 8006032:	461f      	mov	r7, r3
 8006034:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006038:	2830      	cmp	r0, #48	; 0x30
 800603a:	d06c      	beq.n	8006116 <__gethex+0x118>
 800603c:	f7ff ffca 	bl	8005fd4 <__hexdig_fun>
 8006040:	4604      	mov	r4, r0
 8006042:	2800      	cmp	r0, #0
 8006044:	d16a      	bne.n	800611c <__gethex+0x11e>
 8006046:	9a01      	ldr	r2, [sp, #4]
 8006048:	9903      	ldr	r1, [sp, #12]
 800604a:	4638      	mov	r0, r7
 800604c:	f001 f8fe 	bl	800724c <strncmp>
 8006050:	2800      	cmp	r0, #0
 8006052:	d166      	bne.n	8006122 <__gethex+0x124>
 8006054:	9b01      	ldr	r3, [sp, #4]
 8006056:	5cf8      	ldrb	r0, [r7, r3]
 8006058:	18fe      	adds	r6, r7, r3
 800605a:	f7ff ffbb 	bl	8005fd4 <__hexdig_fun>
 800605e:	2800      	cmp	r0, #0
 8006060:	d062      	beq.n	8006128 <__gethex+0x12a>
 8006062:	4633      	mov	r3, r6
 8006064:	7818      	ldrb	r0, [r3, #0]
 8006066:	2830      	cmp	r0, #48	; 0x30
 8006068:	461f      	mov	r7, r3
 800606a:	f103 0301 	add.w	r3, r3, #1
 800606e:	d0f9      	beq.n	8006064 <__gethex+0x66>
 8006070:	f7ff ffb0 	bl	8005fd4 <__hexdig_fun>
 8006074:	fab0 f580 	clz	r5, r0
 8006078:	096d      	lsrs	r5, r5, #5
 800607a:	4634      	mov	r4, r6
 800607c:	f04f 0b01 	mov.w	fp, #1
 8006080:	463a      	mov	r2, r7
 8006082:	4616      	mov	r6, r2
 8006084:	3201      	adds	r2, #1
 8006086:	7830      	ldrb	r0, [r6, #0]
 8006088:	f7ff ffa4 	bl	8005fd4 <__hexdig_fun>
 800608c:	2800      	cmp	r0, #0
 800608e:	d1f8      	bne.n	8006082 <__gethex+0x84>
 8006090:	9a01      	ldr	r2, [sp, #4]
 8006092:	9903      	ldr	r1, [sp, #12]
 8006094:	4630      	mov	r0, r6
 8006096:	f001 f8d9 	bl	800724c <strncmp>
 800609a:	b950      	cbnz	r0, 80060b2 <__gethex+0xb4>
 800609c:	b954      	cbnz	r4, 80060b4 <__gethex+0xb6>
 800609e:	9b01      	ldr	r3, [sp, #4]
 80060a0:	18f4      	adds	r4, r6, r3
 80060a2:	4622      	mov	r2, r4
 80060a4:	4616      	mov	r6, r2
 80060a6:	3201      	adds	r2, #1
 80060a8:	7830      	ldrb	r0, [r6, #0]
 80060aa:	f7ff ff93 	bl	8005fd4 <__hexdig_fun>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	d1f8      	bne.n	80060a4 <__gethex+0xa6>
 80060b2:	b10c      	cbz	r4, 80060b8 <__gethex+0xba>
 80060b4:	1ba4      	subs	r4, r4, r6
 80060b6:	00a4      	lsls	r4, r4, #2
 80060b8:	7833      	ldrb	r3, [r6, #0]
 80060ba:	2b50      	cmp	r3, #80	; 0x50
 80060bc:	d001      	beq.n	80060c2 <__gethex+0xc4>
 80060be:	2b70      	cmp	r3, #112	; 0x70
 80060c0:	d140      	bne.n	8006144 <__gethex+0x146>
 80060c2:	7873      	ldrb	r3, [r6, #1]
 80060c4:	2b2b      	cmp	r3, #43	; 0x2b
 80060c6:	d031      	beq.n	800612c <__gethex+0x12e>
 80060c8:	2b2d      	cmp	r3, #45	; 0x2d
 80060ca:	d033      	beq.n	8006134 <__gethex+0x136>
 80060cc:	1c71      	adds	r1, r6, #1
 80060ce:	f04f 0900 	mov.w	r9, #0
 80060d2:	7808      	ldrb	r0, [r1, #0]
 80060d4:	f7ff ff7e 	bl	8005fd4 <__hexdig_fun>
 80060d8:	1e43      	subs	r3, r0, #1
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b18      	cmp	r3, #24
 80060de:	d831      	bhi.n	8006144 <__gethex+0x146>
 80060e0:	f1a0 0210 	sub.w	r2, r0, #16
 80060e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80060e8:	f7ff ff74 	bl	8005fd4 <__hexdig_fun>
 80060ec:	1e43      	subs	r3, r0, #1
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b18      	cmp	r3, #24
 80060f2:	d922      	bls.n	800613a <__gethex+0x13c>
 80060f4:	f1b9 0f00 	cmp.w	r9, #0
 80060f8:	d000      	beq.n	80060fc <__gethex+0xfe>
 80060fa:	4252      	negs	r2, r2
 80060fc:	4414      	add	r4, r2
 80060fe:	f8ca 1000 	str.w	r1, [sl]
 8006102:	b30d      	cbz	r5, 8006148 <__gethex+0x14a>
 8006104:	f1bb 0f00 	cmp.w	fp, #0
 8006108:	bf0c      	ite	eq
 800610a:	2706      	moveq	r7, #6
 800610c:	2700      	movne	r7, #0
 800610e:	4638      	mov	r0, r7
 8006110:	b00b      	add	sp, #44	; 0x2c
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	f10b 0b01 	add.w	fp, fp, #1
 800611a:	e78a      	b.n	8006032 <__gethex+0x34>
 800611c:	2500      	movs	r5, #0
 800611e:	462c      	mov	r4, r5
 8006120:	e7ae      	b.n	8006080 <__gethex+0x82>
 8006122:	463e      	mov	r6, r7
 8006124:	2501      	movs	r5, #1
 8006126:	e7c7      	b.n	80060b8 <__gethex+0xba>
 8006128:	4604      	mov	r4, r0
 800612a:	e7fb      	b.n	8006124 <__gethex+0x126>
 800612c:	f04f 0900 	mov.w	r9, #0
 8006130:	1cb1      	adds	r1, r6, #2
 8006132:	e7ce      	b.n	80060d2 <__gethex+0xd4>
 8006134:	f04f 0901 	mov.w	r9, #1
 8006138:	e7fa      	b.n	8006130 <__gethex+0x132>
 800613a:	230a      	movs	r3, #10
 800613c:	fb03 0202 	mla	r2, r3, r2, r0
 8006140:	3a10      	subs	r2, #16
 8006142:	e7cf      	b.n	80060e4 <__gethex+0xe6>
 8006144:	4631      	mov	r1, r6
 8006146:	e7da      	b.n	80060fe <__gethex+0x100>
 8006148:	1bf3      	subs	r3, r6, r7
 800614a:	3b01      	subs	r3, #1
 800614c:	4629      	mov	r1, r5
 800614e:	2b07      	cmp	r3, #7
 8006150:	dc49      	bgt.n	80061e6 <__gethex+0x1e8>
 8006152:	9802      	ldr	r0, [sp, #8]
 8006154:	f000 fa63 	bl	800661e <_Balloc>
 8006158:	9b01      	ldr	r3, [sp, #4]
 800615a:	f100 0914 	add.w	r9, r0, #20
 800615e:	f04f 0b00 	mov.w	fp, #0
 8006162:	f1c3 0301 	rsb	r3, r3, #1
 8006166:	4605      	mov	r5, r0
 8006168:	f8cd 9010 	str.w	r9, [sp, #16]
 800616c:	46da      	mov	sl, fp
 800616e:	9308      	str	r3, [sp, #32]
 8006170:	42b7      	cmp	r7, r6
 8006172:	d33b      	bcc.n	80061ec <__gethex+0x1ee>
 8006174:	9804      	ldr	r0, [sp, #16]
 8006176:	f840 ab04 	str.w	sl, [r0], #4
 800617a:	eba0 0009 	sub.w	r0, r0, r9
 800617e:	1080      	asrs	r0, r0, #2
 8006180:	6128      	str	r0, [r5, #16]
 8006182:	0147      	lsls	r7, r0, #5
 8006184:	4650      	mov	r0, sl
 8006186:	f000 fb0e 	bl	80067a6 <__hi0bits>
 800618a:	f8d8 6000 	ldr.w	r6, [r8]
 800618e:	1a3f      	subs	r7, r7, r0
 8006190:	42b7      	cmp	r7, r6
 8006192:	dd64      	ble.n	800625e <__gethex+0x260>
 8006194:	1bbf      	subs	r7, r7, r6
 8006196:	4639      	mov	r1, r7
 8006198:	4628      	mov	r0, r5
 800619a:	f000 fe1d 	bl	8006dd8 <__any_on>
 800619e:	4682      	mov	sl, r0
 80061a0:	b178      	cbz	r0, 80061c2 <__gethex+0x1c4>
 80061a2:	1e7b      	subs	r3, r7, #1
 80061a4:	1159      	asrs	r1, r3, #5
 80061a6:	f003 021f 	and.w	r2, r3, #31
 80061aa:	f04f 0a01 	mov.w	sl, #1
 80061ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80061b2:	fa0a f202 	lsl.w	r2, sl, r2
 80061b6:	420a      	tst	r2, r1
 80061b8:	d003      	beq.n	80061c2 <__gethex+0x1c4>
 80061ba:	4553      	cmp	r3, sl
 80061bc:	dc46      	bgt.n	800624c <__gethex+0x24e>
 80061be:	f04f 0a02 	mov.w	sl, #2
 80061c2:	4639      	mov	r1, r7
 80061c4:	4628      	mov	r0, r5
 80061c6:	f7ff fecb 	bl	8005f60 <rshift>
 80061ca:	443c      	add	r4, r7
 80061cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	da52      	bge.n	800627a <__gethex+0x27c>
 80061d4:	4629      	mov	r1, r5
 80061d6:	9802      	ldr	r0, [sp, #8]
 80061d8:	f000 fa55 	bl	8006686 <_Bfree>
 80061dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80061de:	2300      	movs	r3, #0
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	27a3      	movs	r7, #163	; 0xa3
 80061e4:	e793      	b.n	800610e <__gethex+0x110>
 80061e6:	3101      	adds	r1, #1
 80061e8:	105b      	asrs	r3, r3, #1
 80061ea:	e7b0      	b.n	800614e <__gethex+0x150>
 80061ec:	1e73      	subs	r3, r6, #1
 80061ee:	9305      	str	r3, [sp, #20]
 80061f0:	9a07      	ldr	r2, [sp, #28]
 80061f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d018      	beq.n	800622c <__gethex+0x22e>
 80061fa:	f1bb 0f20 	cmp.w	fp, #32
 80061fe:	d107      	bne.n	8006210 <__gethex+0x212>
 8006200:	9b04      	ldr	r3, [sp, #16]
 8006202:	f8c3 a000 	str.w	sl, [r3]
 8006206:	3304      	adds	r3, #4
 8006208:	f04f 0a00 	mov.w	sl, #0
 800620c:	9304      	str	r3, [sp, #16]
 800620e:	46d3      	mov	fp, sl
 8006210:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006214:	f7ff fede 	bl	8005fd4 <__hexdig_fun>
 8006218:	f000 000f 	and.w	r0, r0, #15
 800621c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006220:	ea4a 0a00 	orr.w	sl, sl, r0
 8006224:	f10b 0b04 	add.w	fp, fp, #4
 8006228:	9b05      	ldr	r3, [sp, #20]
 800622a:	e00d      	b.n	8006248 <__gethex+0x24a>
 800622c:	9b05      	ldr	r3, [sp, #20]
 800622e:	9a08      	ldr	r2, [sp, #32]
 8006230:	4413      	add	r3, r2
 8006232:	42bb      	cmp	r3, r7
 8006234:	d3e1      	bcc.n	80061fa <__gethex+0x1fc>
 8006236:	4618      	mov	r0, r3
 8006238:	9a01      	ldr	r2, [sp, #4]
 800623a:	9903      	ldr	r1, [sp, #12]
 800623c:	9309      	str	r3, [sp, #36]	; 0x24
 800623e:	f001 f805 	bl	800724c <strncmp>
 8006242:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006244:	2800      	cmp	r0, #0
 8006246:	d1d8      	bne.n	80061fa <__gethex+0x1fc>
 8006248:	461e      	mov	r6, r3
 800624a:	e791      	b.n	8006170 <__gethex+0x172>
 800624c:	1eb9      	subs	r1, r7, #2
 800624e:	4628      	mov	r0, r5
 8006250:	f000 fdc2 	bl	8006dd8 <__any_on>
 8006254:	2800      	cmp	r0, #0
 8006256:	d0b2      	beq.n	80061be <__gethex+0x1c0>
 8006258:	f04f 0a03 	mov.w	sl, #3
 800625c:	e7b1      	b.n	80061c2 <__gethex+0x1c4>
 800625e:	da09      	bge.n	8006274 <__gethex+0x276>
 8006260:	1bf7      	subs	r7, r6, r7
 8006262:	4629      	mov	r1, r5
 8006264:	463a      	mov	r2, r7
 8006266:	9802      	ldr	r0, [sp, #8]
 8006268:	f000 fbd8 	bl	8006a1c <__lshift>
 800626c:	1be4      	subs	r4, r4, r7
 800626e:	4605      	mov	r5, r0
 8006270:	f100 0914 	add.w	r9, r0, #20
 8006274:	f04f 0a00 	mov.w	sl, #0
 8006278:	e7a8      	b.n	80061cc <__gethex+0x1ce>
 800627a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800627e:	42a0      	cmp	r0, r4
 8006280:	dd6a      	ble.n	8006358 <__gethex+0x35a>
 8006282:	1b04      	subs	r4, r0, r4
 8006284:	42a6      	cmp	r6, r4
 8006286:	dc2e      	bgt.n	80062e6 <__gethex+0x2e8>
 8006288:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800628c:	2b02      	cmp	r3, #2
 800628e:	d022      	beq.n	80062d6 <__gethex+0x2d8>
 8006290:	2b03      	cmp	r3, #3
 8006292:	d024      	beq.n	80062de <__gethex+0x2e0>
 8006294:	2b01      	cmp	r3, #1
 8006296:	d115      	bne.n	80062c4 <__gethex+0x2c6>
 8006298:	42a6      	cmp	r6, r4
 800629a:	d113      	bne.n	80062c4 <__gethex+0x2c6>
 800629c:	2e01      	cmp	r6, #1
 800629e:	dc0b      	bgt.n	80062b8 <__gethex+0x2ba>
 80062a0:	9a06      	ldr	r2, [sp, #24]
 80062a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80062a6:	6013      	str	r3, [r2, #0]
 80062a8:	2301      	movs	r3, #1
 80062aa:	612b      	str	r3, [r5, #16]
 80062ac:	f8c9 3000 	str.w	r3, [r9]
 80062b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80062b2:	2762      	movs	r7, #98	; 0x62
 80062b4:	601d      	str	r5, [r3, #0]
 80062b6:	e72a      	b.n	800610e <__gethex+0x110>
 80062b8:	1e71      	subs	r1, r6, #1
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 fd8c 	bl	8006dd8 <__any_on>
 80062c0:	2800      	cmp	r0, #0
 80062c2:	d1ed      	bne.n	80062a0 <__gethex+0x2a2>
 80062c4:	4629      	mov	r1, r5
 80062c6:	9802      	ldr	r0, [sp, #8]
 80062c8:	f000 f9dd 	bl	8006686 <_Bfree>
 80062cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80062ce:	2300      	movs	r3, #0
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	2750      	movs	r7, #80	; 0x50
 80062d4:	e71b      	b.n	800610e <__gethex+0x110>
 80062d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0e1      	beq.n	80062a0 <__gethex+0x2a2>
 80062dc:	e7f2      	b.n	80062c4 <__gethex+0x2c6>
 80062de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d1dd      	bne.n	80062a0 <__gethex+0x2a2>
 80062e4:	e7ee      	b.n	80062c4 <__gethex+0x2c6>
 80062e6:	1e67      	subs	r7, r4, #1
 80062e8:	f1ba 0f00 	cmp.w	sl, #0
 80062ec:	d131      	bne.n	8006352 <__gethex+0x354>
 80062ee:	b127      	cbz	r7, 80062fa <__gethex+0x2fc>
 80062f0:	4639      	mov	r1, r7
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 fd70 	bl	8006dd8 <__any_on>
 80062f8:	4682      	mov	sl, r0
 80062fa:	117a      	asrs	r2, r7, #5
 80062fc:	2301      	movs	r3, #1
 80062fe:	f007 071f 	and.w	r7, r7, #31
 8006302:	fa03 f707 	lsl.w	r7, r3, r7
 8006306:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800630a:	4621      	mov	r1, r4
 800630c:	421f      	tst	r7, r3
 800630e:	4628      	mov	r0, r5
 8006310:	bf18      	it	ne
 8006312:	f04a 0a02 	orrne.w	sl, sl, #2
 8006316:	1b36      	subs	r6, r6, r4
 8006318:	f7ff fe22 	bl	8005f60 <rshift>
 800631c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8006320:	2702      	movs	r7, #2
 8006322:	f1ba 0f00 	cmp.w	sl, #0
 8006326:	d048      	beq.n	80063ba <__gethex+0x3bc>
 8006328:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800632c:	2b02      	cmp	r3, #2
 800632e:	d015      	beq.n	800635c <__gethex+0x35e>
 8006330:	2b03      	cmp	r3, #3
 8006332:	d017      	beq.n	8006364 <__gethex+0x366>
 8006334:	2b01      	cmp	r3, #1
 8006336:	d109      	bne.n	800634c <__gethex+0x34e>
 8006338:	f01a 0f02 	tst.w	sl, #2
 800633c:	d006      	beq.n	800634c <__gethex+0x34e>
 800633e:	f8d9 3000 	ldr.w	r3, [r9]
 8006342:	ea4a 0a03 	orr.w	sl, sl, r3
 8006346:	f01a 0f01 	tst.w	sl, #1
 800634a:	d10e      	bne.n	800636a <__gethex+0x36c>
 800634c:	f047 0710 	orr.w	r7, r7, #16
 8006350:	e033      	b.n	80063ba <__gethex+0x3bc>
 8006352:	f04f 0a01 	mov.w	sl, #1
 8006356:	e7d0      	b.n	80062fa <__gethex+0x2fc>
 8006358:	2701      	movs	r7, #1
 800635a:	e7e2      	b.n	8006322 <__gethex+0x324>
 800635c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800635e:	f1c3 0301 	rsb	r3, r3, #1
 8006362:	9315      	str	r3, [sp, #84]	; 0x54
 8006364:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006366:	2b00      	cmp	r3, #0
 8006368:	d0f0      	beq.n	800634c <__gethex+0x34e>
 800636a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800636e:	f105 0314 	add.w	r3, r5, #20
 8006372:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8006376:	eb03 010a 	add.w	r1, r3, sl
 800637a:	f04f 0c00 	mov.w	ip, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006388:	d01c      	beq.n	80063c4 <__gethex+0x3c6>
 800638a:	3201      	adds	r2, #1
 800638c:	6002      	str	r2, [r0, #0]
 800638e:	2f02      	cmp	r7, #2
 8006390:	f105 0314 	add.w	r3, r5, #20
 8006394:	d138      	bne.n	8006408 <__gethex+0x40a>
 8006396:	f8d8 2000 	ldr.w	r2, [r8]
 800639a:	3a01      	subs	r2, #1
 800639c:	42b2      	cmp	r2, r6
 800639e:	d10a      	bne.n	80063b6 <__gethex+0x3b8>
 80063a0:	1171      	asrs	r1, r6, #5
 80063a2:	2201      	movs	r2, #1
 80063a4:	f006 061f 	and.w	r6, r6, #31
 80063a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80063ac:	fa02 f606 	lsl.w	r6, r2, r6
 80063b0:	421e      	tst	r6, r3
 80063b2:	bf18      	it	ne
 80063b4:	4617      	movne	r7, r2
 80063b6:	f047 0720 	orr.w	r7, r7, #32
 80063ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80063bc:	601d      	str	r5, [r3, #0]
 80063be:	9b06      	ldr	r3, [sp, #24]
 80063c0:	601c      	str	r4, [r3, #0]
 80063c2:	e6a4      	b.n	800610e <__gethex+0x110>
 80063c4:	4299      	cmp	r1, r3
 80063c6:	f843 cc04 	str.w	ip, [r3, #-4]
 80063ca:	d8d8      	bhi.n	800637e <__gethex+0x380>
 80063cc:	68ab      	ldr	r3, [r5, #8]
 80063ce:	4599      	cmp	r9, r3
 80063d0:	db12      	blt.n	80063f8 <__gethex+0x3fa>
 80063d2:	6869      	ldr	r1, [r5, #4]
 80063d4:	9802      	ldr	r0, [sp, #8]
 80063d6:	3101      	adds	r1, #1
 80063d8:	f000 f921 	bl	800661e <_Balloc>
 80063dc:	692a      	ldr	r2, [r5, #16]
 80063de:	3202      	adds	r2, #2
 80063e0:	f105 010c 	add.w	r1, r5, #12
 80063e4:	4683      	mov	fp, r0
 80063e6:	0092      	lsls	r2, r2, #2
 80063e8:	300c      	adds	r0, #12
 80063ea:	f000 f90d 	bl	8006608 <memcpy>
 80063ee:	4629      	mov	r1, r5
 80063f0:	9802      	ldr	r0, [sp, #8]
 80063f2:	f000 f948 	bl	8006686 <_Bfree>
 80063f6:	465d      	mov	r5, fp
 80063f8:	692b      	ldr	r3, [r5, #16]
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006400:	612a      	str	r2, [r5, #16]
 8006402:	2201      	movs	r2, #1
 8006404:	615a      	str	r2, [r3, #20]
 8006406:	e7c2      	b.n	800638e <__gethex+0x390>
 8006408:	692a      	ldr	r2, [r5, #16]
 800640a:	454a      	cmp	r2, r9
 800640c:	dd0b      	ble.n	8006426 <__gethex+0x428>
 800640e:	2101      	movs	r1, #1
 8006410:	4628      	mov	r0, r5
 8006412:	f7ff fda5 	bl	8005f60 <rshift>
 8006416:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800641a:	3401      	adds	r4, #1
 800641c:	42a3      	cmp	r3, r4
 800641e:	f6ff aed9 	blt.w	80061d4 <__gethex+0x1d6>
 8006422:	2701      	movs	r7, #1
 8006424:	e7c7      	b.n	80063b6 <__gethex+0x3b8>
 8006426:	f016 061f 	ands.w	r6, r6, #31
 800642a:	d0fa      	beq.n	8006422 <__gethex+0x424>
 800642c:	449a      	add	sl, r3
 800642e:	f1c6 0620 	rsb	r6, r6, #32
 8006432:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8006436:	f000 f9b6 	bl	80067a6 <__hi0bits>
 800643a:	42b0      	cmp	r0, r6
 800643c:	dbe7      	blt.n	800640e <__gethex+0x410>
 800643e:	e7f0      	b.n	8006422 <__gethex+0x424>

08006440 <L_shift>:
 8006440:	f1c2 0208 	rsb	r2, r2, #8
 8006444:	0092      	lsls	r2, r2, #2
 8006446:	b570      	push	{r4, r5, r6, lr}
 8006448:	f1c2 0620 	rsb	r6, r2, #32
 800644c:	6843      	ldr	r3, [r0, #4]
 800644e:	6804      	ldr	r4, [r0, #0]
 8006450:	fa03 f506 	lsl.w	r5, r3, r6
 8006454:	432c      	orrs	r4, r5
 8006456:	40d3      	lsrs	r3, r2
 8006458:	6004      	str	r4, [r0, #0]
 800645a:	f840 3f04 	str.w	r3, [r0, #4]!
 800645e:	4288      	cmp	r0, r1
 8006460:	d3f4      	bcc.n	800644c <L_shift+0xc>
 8006462:	bd70      	pop	{r4, r5, r6, pc}

08006464 <__match>:
 8006464:	b530      	push	{r4, r5, lr}
 8006466:	6803      	ldr	r3, [r0, #0]
 8006468:	3301      	adds	r3, #1
 800646a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800646e:	b914      	cbnz	r4, 8006476 <__match+0x12>
 8006470:	6003      	str	r3, [r0, #0]
 8006472:	2001      	movs	r0, #1
 8006474:	bd30      	pop	{r4, r5, pc}
 8006476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800647a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800647e:	2d19      	cmp	r5, #25
 8006480:	bf98      	it	ls
 8006482:	3220      	addls	r2, #32
 8006484:	42a2      	cmp	r2, r4
 8006486:	d0f0      	beq.n	800646a <__match+0x6>
 8006488:	2000      	movs	r0, #0
 800648a:	e7f3      	b.n	8006474 <__match+0x10>

0800648c <__hexnan>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	680b      	ldr	r3, [r1, #0]
 8006492:	6801      	ldr	r1, [r0, #0]
 8006494:	115f      	asrs	r7, r3, #5
 8006496:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800649a:	f013 031f 	ands.w	r3, r3, #31
 800649e:	b087      	sub	sp, #28
 80064a0:	bf18      	it	ne
 80064a2:	3704      	addne	r7, #4
 80064a4:	2500      	movs	r5, #0
 80064a6:	1f3e      	subs	r6, r7, #4
 80064a8:	4682      	mov	sl, r0
 80064aa:	4690      	mov	r8, r2
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	f847 5c04 	str.w	r5, [r7, #-4]
 80064b2:	46b1      	mov	r9, r6
 80064b4:	4634      	mov	r4, r6
 80064b6:	9502      	str	r5, [sp, #8]
 80064b8:	46ab      	mov	fp, r5
 80064ba:	784a      	ldrb	r2, [r1, #1]
 80064bc:	1c4b      	adds	r3, r1, #1
 80064be:	9303      	str	r3, [sp, #12]
 80064c0:	b342      	cbz	r2, 8006514 <__hexnan+0x88>
 80064c2:	4610      	mov	r0, r2
 80064c4:	9105      	str	r1, [sp, #20]
 80064c6:	9204      	str	r2, [sp, #16]
 80064c8:	f7ff fd84 	bl	8005fd4 <__hexdig_fun>
 80064cc:	2800      	cmp	r0, #0
 80064ce:	d143      	bne.n	8006558 <__hexnan+0xcc>
 80064d0:	9a04      	ldr	r2, [sp, #16]
 80064d2:	9905      	ldr	r1, [sp, #20]
 80064d4:	2a20      	cmp	r2, #32
 80064d6:	d818      	bhi.n	800650a <__hexnan+0x7e>
 80064d8:	9b02      	ldr	r3, [sp, #8]
 80064da:	459b      	cmp	fp, r3
 80064dc:	dd13      	ble.n	8006506 <__hexnan+0x7a>
 80064de:	454c      	cmp	r4, r9
 80064e0:	d206      	bcs.n	80064f0 <__hexnan+0x64>
 80064e2:	2d07      	cmp	r5, #7
 80064e4:	dc04      	bgt.n	80064f0 <__hexnan+0x64>
 80064e6:	462a      	mov	r2, r5
 80064e8:	4649      	mov	r1, r9
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff ffa8 	bl	8006440 <L_shift>
 80064f0:	4544      	cmp	r4, r8
 80064f2:	d944      	bls.n	800657e <__hexnan+0xf2>
 80064f4:	2300      	movs	r3, #0
 80064f6:	f1a4 0904 	sub.w	r9, r4, #4
 80064fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80064fe:	f8cd b008 	str.w	fp, [sp, #8]
 8006502:	464c      	mov	r4, r9
 8006504:	461d      	mov	r5, r3
 8006506:	9903      	ldr	r1, [sp, #12]
 8006508:	e7d7      	b.n	80064ba <__hexnan+0x2e>
 800650a:	2a29      	cmp	r2, #41	; 0x29
 800650c:	d14a      	bne.n	80065a4 <__hexnan+0x118>
 800650e:	3102      	adds	r1, #2
 8006510:	f8ca 1000 	str.w	r1, [sl]
 8006514:	f1bb 0f00 	cmp.w	fp, #0
 8006518:	d044      	beq.n	80065a4 <__hexnan+0x118>
 800651a:	454c      	cmp	r4, r9
 800651c:	d206      	bcs.n	800652c <__hexnan+0xa0>
 800651e:	2d07      	cmp	r5, #7
 8006520:	dc04      	bgt.n	800652c <__hexnan+0xa0>
 8006522:	462a      	mov	r2, r5
 8006524:	4649      	mov	r1, r9
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff ff8a 	bl	8006440 <L_shift>
 800652c:	4544      	cmp	r4, r8
 800652e:	d928      	bls.n	8006582 <__hexnan+0xf6>
 8006530:	4643      	mov	r3, r8
 8006532:	f854 2b04 	ldr.w	r2, [r4], #4
 8006536:	f843 2b04 	str.w	r2, [r3], #4
 800653a:	42a6      	cmp	r6, r4
 800653c:	d2f9      	bcs.n	8006532 <__hexnan+0xa6>
 800653e:	2200      	movs	r2, #0
 8006540:	f843 2b04 	str.w	r2, [r3], #4
 8006544:	429e      	cmp	r6, r3
 8006546:	d2fb      	bcs.n	8006540 <__hexnan+0xb4>
 8006548:	6833      	ldr	r3, [r6, #0]
 800654a:	b91b      	cbnz	r3, 8006554 <__hexnan+0xc8>
 800654c:	4546      	cmp	r6, r8
 800654e:	d127      	bne.n	80065a0 <__hexnan+0x114>
 8006550:	2301      	movs	r3, #1
 8006552:	6033      	str	r3, [r6, #0]
 8006554:	2005      	movs	r0, #5
 8006556:	e026      	b.n	80065a6 <__hexnan+0x11a>
 8006558:	3501      	adds	r5, #1
 800655a:	2d08      	cmp	r5, #8
 800655c:	f10b 0b01 	add.w	fp, fp, #1
 8006560:	dd06      	ble.n	8006570 <__hexnan+0xe4>
 8006562:	4544      	cmp	r4, r8
 8006564:	d9cf      	bls.n	8006506 <__hexnan+0x7a>
 8006566:	2300      	movs	r3, #0
 8006568:	f844 3c04 	str.w	r3, [r4, #-4]
 800656c:	2501      	movs	r5, #1
 800656e:	3c04      	subs	r4, #4
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	f000 000f 	and.w	r0, r0, #15
 8006576:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800657a:	6020      	str	r0, [r4, #0]
 800657c:	e7c3      	b.n	8006506 <__hexnan+0x7a>
 800657e:	2508      	movs	r5, #8
 8006580:	e7c1      	b.n	8006506 <__hexnan+0x7a>
 8006582:	9b01      	ldr	r3, [sp, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0df      	beq.n	8006548 <__hexnan+0xbc>
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	f1c3 0320 	rsb	r3, r3, #32
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
 8006594:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8006598:	401a      	ands	r2, r3
 800659a:	f847 2c04 	str.w	r2, [r7, #-4]
 800659e:	e7d3      	b.n	8006548 <__hexnan+0xbc>
 80065a0:	3e04      	subs	r6, #4
 80065a2:	e7d1      	b.n	8006548 <__hexnan+0xbc>
 80065a4:	2004      	movs	r0, #4
 80065a6:	b007      	add	sp, #28
 80065a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065ac <__locale_ctype_ptr_l>:
 80065ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80065b0:	4770      	bx	lr

080065b2 <__localeconv_l>:
 80065b2:	30f0      	adds	r0, #240	; 0xf0
 80065b4:	4770      	bx	lr
	...

080065b8 <_localeconv_r>:
 80065b8:	4b04      	ldr	r3, [pc, #16]	; (80065cc <_localeconv_r+0x14>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6a18      	ldr	r0, [r3, #32]
 80065be:	4b04      	ldr	r3, [pc, #16]	; (80065d0 <_localeconv_r+0x18>)
 80065c0:	2800      	cmp	r0, #0
 80065c2:	bf08      	it	eq
 80065c4:	4618      	moveq	r0, r3
 80065c6:	30f0      	adds	r0, #240	; 0xf0
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	20000070 	.word	0x20000070

080065d4 <malloc>:
 80065d4:	4b02      	ldr	r3, [pc, #8]	; (80065e0 <malloc+0xc>)
 80065d6:	4601      	mov	r1, r0
 80065d8:	6818      	ldr	r0, [r3, #0]
 80065da:	f000 bc7b 	b.w	8006ed4 <_malloc_r>
 80065de:	bf00      	nop
 80065e0:	2000000c 	.word	0x2000000c

080065e4 <__ascii_mbtowc>:
 80065e4:	b082      	sub	sp, #8
 80065e6:	b901      	cbnz	r1, 80065ea <__ascii_mbtowc+0x6>
 80065e8:	a901      	add	r1, sp, #4
 80065ea:	b142      	cbz	r2, 80065fe <__ascii_mbtowc+0x1a>
 80065ec:	b14b      	cbz	r3, 8006602 <__ascii_mbtowc+0x1e>
 80065ee:	7813      	ldrb	r3, [r2, #0]
 80065f0:	600b      	str	r3, [r1, #0]
 80065f2:	7812      	ldrb	r2, [r2, #0]
 80065f4:	1c10      	adds	r0, r2, #0
 80065f6:	bf18      	it	ne
 80065f8:	2001      	movne	r0, #1
 80065fa:	b002      	add	sp, #8
 80065fc:	4770      	bx	lr
 80065fe:	4610      	mov	r0, r2
 8006600:	e7fb      	b.n	80065fa <__ascii_mbtowc+0x16>
 8006602:	f06f 0001 	mvn.w	r0, #1
 8006606:	e7f8      	b.n	80065fa <__ascii_mbtowc+0x16>

08006608 <memcpy>:
 8006608:	b510      	push	{r4, lr}
 800660a:	1e43      	subs	r3, r0, #1
 800660c:	440a      	add	r2, r1
 800660e:	4291      	cmp	r1, r2
 8006610:	d100      	bne.n	8006614 <memcpy+0xc>
 8006612:	bd10      	pop	{r4, pc}
 8006614:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006618:	f803 4f01 	strb.w	r4, [r3, #1]!
 800661c:	e7f7      	b.n	800660e <memcpy+0x6>

0800661e <_Balloc>:
 800661e:	b570      	push	{r4, r5, r6, lr}
 8006620:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006622:	4604      	mov	r4, r0
 8006624:	460e      	mov	r6, r1
 8006626:	b93d      	cbnz	r5, 8006638 <_Balloc+0x1a>
 8006628:	2010      	movs	r0, #16
 800662a:	f7ff ffd3 	bl	80065d4 <malloc>
 800662e:	6260      	str	r0, [r4, #36]	; 0x24
 8006630:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006634:	6005      	str	r5, [r0, #0]
 8006636:	60c5      	str	r5, [r0, #12]
 8006638:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800663a:	68eb      	ldr	r3, [r5, #12]
 800663c:	b183      	cbz	r3, 8006660 <_Balloc+0x42>
 800663e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006646:	b9b8      	cbnz	r0, 8006678 <_Balloc+0x5a>
 8006648:	2101      	movs	r1, #1
 800664a:	fa01 f506 	lsl.w	r5, r1, r6
 800664e:	1d6a      	adds	r2, r5, #5
 8006650:	0092      	lsls	r2, r2, #2
 8006652:	4620      	mov	r0, r4
 8006654:	f000 fbe1 	bl	8006e1a <_calloc_r>
 8006658:	b160      	cbz	r0, 8006674 <_Balloc+0x56>
 800665a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800665e:	e00e      	b.n	800667e <_Balloc+0x60>
 8006660:	2221      	movs	r2, #33	; 0x21
 8006662:	2104      	movs	r1, #4
 8006664:	4620      	mov	r0, r4
 8006666:	f000 fbd8 	bl	8006e1a <_calloc_r>
 800666a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800666c:	60e8      	str	r0, [r5, #12]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e4      	bne.n	800663e <_Balloc+0x20>
 8006674:	2000      	movs	r0, #0
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	6802      	ldr	r2, [r0, #0]
 800667a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800667e:	2300      	movs	r3, #0
 8006680:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006684:	e7f7      	b.n	8006676 <_Balloc+0x58>

08006686 <_Bfree>:
 8006686:	b570      	push	{r4, r5, r6, lr}
 8006688:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800668a:	4606      	mov	r6, r0
 800668c:	460d      	mov	r5, r1
 800668e:	b93c      	cbnz	r4, 80066a0 <_Bfree+0x1a>
 8006690:	2010      	movs	r0, #16
 8006692:	f7ff ff9f 	bl	80065d4 <malloc>
 8006696:	6270      	str	r0, [r6, #36]	; 0x24
 8006698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800669c:	6004      	str	r4, [r0, #0]
 800669e:	60c4      	str	r4, [r0, #12]
 80066a0:	b13d      	cbz	r5, 80066b2 <_Bfree+0x2c>
 80066a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80066a4:	686a      	ldr	r2, [r5, #4]
 80066a6:	68db      	ldr	r3, [r3, #12]
 80066a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066ac:	6029      	str	r1, [r5, #0]
 80066ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80066b2:	bd70      	pop	{r4, r5, r6, pc}

080066b4 <__multadd>:
 80066b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066b8:	690d      	ldr	r5, [r1, #16]
 80066ba:	461f      	mov	r7, r3
 80066bc:	4606      	mov	r6, r0
 80066be:	460c      	mov	r4, r1
 80066c0:	f101 0c14 	add.w	ip, r1, #20
 80066c4:	2300      	movs	r3, #0
 80066c6:	f8dc 0000 	ldr.w	r0, [ip]
 80066ca:	b281      	uxth	r1, r0
 80066cc:	fb02 7101 	mla	r1, r2, r1, r7
 80066d0:	0c0f      	lsrs	r7, r1, #16
 80066d2:	0c00      	lsrs	r0, r0, #16
 80066d4:	fb02 7000 	mla	r0, r2, r0, r7
 80066d8:	b289      	uxth	r1, r1
 80066da:	3301      	adds	r3, #1
 80066dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80066e0:	429d      	cmp	r5, r3
 80066e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80066e6:	f84c 1b04 	str.w	r1, [ip], #4
 80066ea:	dcec      	bgt.n	80066c6 <__multadd+0x12>
 80066ec:	b1d7      	cbz	r7, 8006724 <__multadd+0x70>
 80066ee:	68a3      	ldr	r3, [r4, #8]
 80066f0:	42ab      	cmp	r3, r5
 80066f2:	dc12      	bgt.n	800671a <__multadd+0x66>
 80066f4:	6861      	ldr	r1, [r4, #4]
 80066f6:	4630      	mov	r0, r6
 80066f8:	3101      	adds	r1, #1
 80066fa:	f7ff ff90 	bl	800661e <_Balloc>
 80066fe:	6922      	ldr	r2, [r4, #16]
 8006700:	3202      	adds	r2, #2
 8006702:	f104 010c 	add.w	r1, r4, #12
 8006706:	4680      	mov	r8, r0
 8006708:	0092      	lsls	r2, r2, #2
 800670a:	300c      	adds	r0, #12
 800670c:	f7ff ff7c 	bl	8006608 <memcpy>
 8006710:	4621      	mov	r1, r4
 8006712:	4630      	mov	r0, r6
 8006714:	f7ff ffb7 	bl	8006686 <_Bfree>
 8006718:	4644      	mov	r4, r8
 800671a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800671e:	3501      	adds	r5, #1
 8006720:	615f      	str	r7, [r3, #20]
 8006722:	6125      	str	r5, [r4, #16]
 8006724:	4620      	mov	r0, r4
 8006726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800672a <__s2b>:
 800672a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800672e:	460c      	mov	r4, r1
 8006730:	4615      	mov	r5, r2
 8006732:	461f      	mov	r7, r3
 8006734:	2209      	movs	r2, #9
 8006736:	3308      	adds	r3, #8
 8006738:	4606      	mov	r6, r0
 800673a:	fb93 f3f2 	sdiv	r3, r3, r2
 800673e:	2100      	movs	r1, #0
 8006740:	2201      	movs	r2, #1
 8006742:	429a      	cmp	r2, r3
 8006744:	db20      	blt.n	8006788 <__s2b+0x5e>
 8006746:	4630      	mov	r0, r6
 8006748:	f7ff ff69 	bl	800661e <_Balloc>
 800674c:	9b08      	ldr	r3, [sp, #32]
 800674e:	6143      	str	r3, [r0, #20]
 8006750:	2d09      	cmp	r5, #9
 8006752:	f04f 0301 	mov.w	r3, #1
 8006756:	6103      	str	r3, [r0, #16]
 8006758:	dd19      	ble.n	800678e <__s2b+0x64>
 800675a:	f104 0809 	add.w	r8, r4, #9
 800675e:	46c1      	mov	r9, r8
 8006760:	442c      	add	r4, r5
 8006762:	f819 3b01 	ldrb.w	r3, [r9], #1
 8006766:	4601      	mov	r1, r0
 8006768:	3b30      	subs	r3, #48	; 0x30
 800676a:	220a      	movs	r2, #10
 800676c:	4630      	mov	r0, r6
 800676e:	f7ff ffa1 	bl	80066b4 <__multadd>
 8006772:	45a1      	cmp	r9, r4
 8006774:	d1f5      	bne.n	8006762 <__s2b+0x38>
 8006776:	eb08 0405 	add.w	r4, r8, r5
 800677a:	3c08      	subs	r4, #8
 800677c:	1b2d      	subs	r5, r5, r4
 800677e:	1963      	adds	r3, r4, r5
 8006780:	42bb      	cmp	r3, r7
 8006782:	db07      	blt.n	8006794 <__s2b+0x6a>
 8006784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006788:	0052      	lsls	r2, r2, #1
 800678a:	3101      	adds	r1, #1
 800678c:	e7d9      	b.n	8006742 <__s2b+0x18>
 800678e:	340a      	adds	r4, #10
 8006790:	2509      	movs	r5, #9
 8006792:	e7f3      	b.n	800677c <__s2b+0x52>
 8006794:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006798:	4601      	mov	r1, r0
 800679a:	3b30      	subs	r3, #48	; 0x30
 800679c:	220a      	movs	r2, #10
 800679e:	4630      	mov	r0, r6
 80067a0:	f7ff ff88 	bl	80066b4 <__multadd>
 80067a4:	e7eb      	b.n	800677e <__s2b+0x54>

080067a6 <__hi0bits>:
 80067a6:	0c02      	lsrs	r2, r0, #16
 80067a8:	0412      	lsls	r2, r2, #16
 80067aa:	4603      	mov	r3, r0
 80067ac:	b9b2      	cbnz	r2, 80067dc <__hi0bits+0x36>
 80067ae:	0403      	lsls	r3, r0, #16
 80067b0:	2010      	movs	r0, #16
 80067b2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80067b6:	bf04      	itt	eq
 80067b8:	021b      	lsleq	r3, r3, #8
 80067ba:	3008      	addeq	r0, #8
 80067bc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80067c0:	bf04      	itt	eq
 80067c2:	011b      	lsleq	r3, r3, #4
 80067c4:	3004      	addeq	r0, #4
 80067c6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80067ca:	bf04      	itt	eq
 80067cc:	009b      	lsleq	r3, r3, #2
 80067ce:	3002      	addeq	r0, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	db06      	blt.n	80067e2 <__hi0bits+0x3c>
 80067d4:	005b      	lsls	r3, r3, #1
 80067d6:	d503      	bpl.n	80067e0 <__hi0bits+0x3a>
 80067d8:	3001      	adds	r0, #1
 80067da:	4770      	bx	lr
 80067dc:	2000      	movs	r0, #0
 80067de:	e7e8      	b.n	80067b2 <__hi0bits+0xc>
 80067e0:	2020      	movs	r0, #32
 80067e2:	4770      	bx	lr

080067e4 <__lo0bits>:
 80067e4:	6803      	ldr	r3, [r0, #0]
 80067e6:	f013 0207 	ands.w	r2, r3, #7
 80067ea:	4601      	mov	r1, r0
 80067ec:	d00b      	beq.n	8006806 <__lo0bits+0x22>
 80067ee:	07da      	lsls	r2, r3, #31
 80067f0:	d423      	bmi.n	800683a <__lo0bits+0x56>
 80067f2:	0798      	lsls	r0, r3, #30
 80067f4:	bf49      	itett	mi
 80067f6:	085b      	lsrmi	r3, r3, #1
 80067f8:	089b      	lsrpl	r3, r3, #2
 80067fa:	2001      	movmi	r0, #1
 80067fc:	600b      	strmi	r3, [r1, #0]
 80067fe:	bf5c      	itt	pl
 8006800:	600b      	strpl	r3, [r1, #0]
 8006802:	2002      	movpl	r0, #2
 8006804:	4770      	bx	lr
 8006806:	b298      	uxth	r0, r3
 8006808:	b9a8      	cbnz	r0, 8006836 <__lo0bits+0x52>
 800680a:	0c1b      	lsrs	r3, r3, #16
 800680c:	2010      	movs	r0, #16
 800680e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006812:	bf04      	itt	eq
 8006814:	0a1b      	lsreq	r3, r3, #8
 8006816:	3008      	addeq	r0, #8
 8006818:	071a      	lsls	r2, r3, #28
 800681a:	bf04      	itt	eq
 800681c:	091b      	lsreq	r3, r3, #4
 800681e:	3004      	addeq	r0, #4
 8006820:	079a      	lsls	r2, r3, #30
 8006822:	bf04      	itt	eq
 8006824:	089b      	lsreq	r3, r3, #2
 8006826:	3002      	addeq	r0, #2
 8006828:	07da      	lsls	r2, r3, #31
 800682a:	d402      	bmi.n	8006832 <__lo0bits+0x4e>
 800682c:	085b      	lsrs	r3, r3, #1
 800682e:	d006      	beq.n	800683e <__lo0bits+0x5a>
 8006830:	3001      	adds	r0, #1
 8006832:	600b      	str	r3, [r1, #0]
 8006834:	4770      	bx	lr
 8006836:	4610      	mov	r0, r2
 8006838:	e7e9      	b.n	800680e <__lo0bits+0x2a>
 800683a:	2000      	movs	r0, #0
 800683c:	4770      	bx	lr
 800683e:	2020      	movs	r0, #32
 8006840:	4770      	bx	lr

08006842 <__i2b>:
 8006842:	b510      	push	{r4, lr}
 8006844:	460c      	mov	r4, r1
 8006846:	2101      	movs	r1, #1
 8006848:	f7ff fee9 	bl	800661e <_Balloc>
 800684c:	2201      	movs	r2, #1
 800684e:	6144      	str	r4, [r0, #20]
 8006850:	6102      	str	r2, [r0, #16]
 8006852:	bd10      	pop	{r4, pc}

08006854 <__multiply>:
 8006854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006858:	4614      	mov	r4, r2
 800685a:	690a      	ldr	r2, [r1, #16]
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	429a      	cmp	r2, r3
 8006860:	bfb8      	it	lt
 8006862:	460b      	movlt	r3, r1
 8006864:	4688      	mov	r8, r1
 8006866:	bfbc      	itt	lt
 8006868:	46a0      	movlt	r8, r4
 800686a:	461c      	movlt	r4, r3
 800686c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006870:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006874:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006878:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800687c:	eb07 0609 	add.w	r6, r7, r9
 8006880:	42b3      	cmp	r3, r6
 8006882:	bfb8      	it	lt
 8006884:	3101      	addlt	r1, #1
 8006886:	f7ff feca 	bl	800661e <_Balloc>
 800688a:	f100 0514 	add.w	r5, r0, #20
 800688e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006892:	462b      	mov	r3, r5
 8006894:	2200      	movs	r2, #0
 8006896:	4573      	cmp	r3, lr
 8006898:	d316      	bcc.n	80068c8 <__multiply+0x74>
 800689a:	f104 0214 	add.w	r2, r4, #20
 800689e:	f108 0114 	add.w	r1, r8, #20
 80068a2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80068a6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80068aa:	9300      	str	r3, [sp, #0]
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	9201      	str	r2, [sp, #4]
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d80c      	bhi.n	80068ce <__multiply+0x7a>
 80068b4:	2e00      	cmp	r6, #0
 80068b6:	dd03      	ble.n	80068c0 <__multiply+0x6c>
 80068b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d05d      	beq.n	800697c <__multiply+0x128>
 80068c0:	6106      	str	r6, [r0, #16]
 80068c2:	b003      	add	sp, #12
 80068c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068c8:	f843 2b04 	str.w	r2, [r3], #4
 80068cc:	e7e3      	b.n	8006896 <__multiply+0x42>
 80068ce:	f8b2 b000 	ldrh.w	fp, [r2]
 80068d2:	f1bb 0f00 	cmp.w	fp, #0
 80068d6:	d023      	beq.n	8006920 <__multiply+0xcc>
 80068d8:	4689      	mov	r9, r1
 80068da:	46ac      	mov	ip, r5
 80068dc:	f04f 0800 	mov.w	r8, #0
 80068e0:	f859 4b04 	ldr.w	r4, [r9], #4
 80068e4:	f8dc a000 	ldr.w	sl, [ip]
 80068e8:	b2a3      	uxth	r3, r4
 80068ea:	fa1f fa8a 	uxth.w	sl, sl
 80068ee:	fb0b a303 	mla	r3, fp, r3, sl
 80068f2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80068f6:	f8dc 4000 	ldr.w	r4, [ip]
 80068fa:	4443      	add	r3, r8
 80068fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006900:	fb0b 840a 	mla	r4, fp, sl, r8
 8006904:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006908:	46e2      	mov	sl, ip
 800690a:	b29b      	uxth	r3, r3
 800690c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006910:	454f      	cmp	r7, r9
 8006912:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006916:	f84a 3b04 	str.w	r3, [sl], #4
 800691a:	d82b      	bhi.n	8006974 <__multiply+0x120>
 800691c:	f8cc 8004 	str.w	r8, [ip, #4]
 8006920:	9b01      	ldr	r3, [sp, #4]
 8006922:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006926:	3204      	adds	r2, #4
 8006928:	f1ba 0f00 	cmp.w	sl, #0
 800692c:	d020      	beq.n	8006970 <__multiply+0x11c>
 800692e:	682b      	ldr	r3, [r5, #0]
 8006930:	4689      	mov	r9, r1
 8006932:	46a8      	mov	r8, r5
 8006934:	f04f 0b00 	mov.w	fp, #0
 8006938:	f8b9 c000 	ldrh.w	ip, [r9]
 800693c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006940:	fb0a 440c 	mla	r4, sl, ip, r4
 8006944:	445c      	add	r4, fp
 8006946:	46c4      	mov	ip, r8
 8006948:	b29b      	uxth	r3, r3
 800694a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800694e:	f84c 3b04 	str.w	r3, [ip], #4
 8006952:	f859 3b04 	ldr.w	r3, [r9], #4
 8006956:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800695a:	0c1b      	lsrs	r3, r3, #16
 800695c:	fb0a b303 	mla	r3, sl, r3, fp
 8006960:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006964:	454f      	cmp	r7, r9
 8006966:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800696a:	d805      	bhi.n	8006978 <__multiply+0x124>
 800696c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006970:	3504      	adds	r5, #4
 8006972:	e79b      	b.n	80068ac <__multiply+0x58>
 8006974:	46d4      	mov	ip, sl
 8006976:	e7b3      	b.n	80068e0 <__multiply+0x8c>
 8006978:	46e0      	mov	r8, ip
 800697a:	e7dd      	b.n	8006938 <__multiply+0xe4>
 800697c:	3e01      	subs	r6, #1
 800697e:	e799      	b.n	80068b4 <__multiply+0x60>

08006980 <__pow5mult>:
 8006980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006984:	4615      	mov	r5, r2
 8006986:	f012 0203 	ands.w	r2, r2, #3
 800698a:	4606      	mov	r6, r0
 800698c:	460f      	mov	r7, r1
 800698e:	d007      	beq.n	80069a0 <__pow5mult+0x20>
 8006990:	3a01      	subs	r2, #1
 8006992:	4c21      	ldr	r4, [pc, #132]	; (8006a18 <__pow5mult+0x98>)
 8006994:	2300      	movs	r3, #0
 8006996:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800699a:	f7ff fe8b 	bl	80066b4 <__multadd>
 800699e:	4607      	mov	r7, r0
 80069a0:	10ad      	asrs	r5, r5, #2
 80069a2:	d035      	beq.n	8006a10 <__pow5mult+0x90>
 80069a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80069a6:	b93c      	cbnz	r4, 80069b8 <__pow5mult+0x38>
 80069a8:	2010      	movs	r0, #16
 80069aa:	f7ff fe13 	bl	80065d4 <malloc>
 80069ae:	6270      	str	r0, [r6, #36]	; 0x24
 80069b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80069b4:	6004      	str	r4, [r0, #0]
 80069b6:	60c4      	str	r4, [r0, #12]
 80069b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80069bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80069c0:	b94c      	cbnz	r4, 80069d6 <__pow5mult+0x56>
 80069c2:	f240 2171 	movw	r1, #625	; 0x271
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff ff3b 	bl	8006842 <__i2b>
 80069cc:	2300      	movs	r3, #0
 80069ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80069d2:	4604      	mov	r4, r0
 80069d4:	6003      	str	r3, [r0, #0]
 80069d6:	f04f 0800 	mov.w	r8, #0
 80069da:	07eb      	lsls	r3, r5, #31
 80069dc:	d50a      	bpl.n	80069f4 <__pow5mult+0x74>
 80069de:	4639      	mov	r1, r7
 80069e0:	4622      	mov	r2, r4
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ff36 	bl	8006854 <__multiply>
 80069e8:	4639      	mov	r1, r7
 80069ea:	4681      	mov	r9, r0
 80069ec:	4630      	mov	r0, r6
 80069ee:	f7ff fe4a 	bl	8006686 <_Bfree>
 80069f2:	464f      	mov	r7, r9
 80069f4:	106d      	asrs	r5, r5, #1
 80069f6:	d00b      	beq.n	8006a10 <__pow5mult+0x90>
 80069f8:	6820      	ldr	r0, [r4, #0]
 80069fa:	b938      	cbnz	r0, 8006a0c <__pow5mult+0x8c>
 80069fc:	4622      	mov	r2, r4
 80069fe:	4621      	mov	r1, r4
 8006a00:	4630      	mov	r0, r6
 8006a02:	f7ff ff27 	bl	8006854 <__multiply>
 8006a06:	6020      	str	r0, [r4, #0]
 8006a08:	f8c0 8000 	str.w	r8, [r0]
 8006a0c:	4604      	mov	r4, r0
 8006a0e:	e7e4      	b.n	80069da <__pow5mult+0x5a>
 8006a10:	4638      	mov	r0, r7
 8006a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a16:	bf00      	nop
 8006a18:	08007510 	.word	0x08007510

08006a1c <__lshift>:
 8006a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a20:	460c      	mov	r4, r1
 8006a22:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	6849      	ldr	r1, [r1, #4]
 8006a2a:	eb0a 0903 	add.w	r9, sl, r3
 8006a2e:	68a3      	ldr	r3, [r4, #8]
 8006a30:	4607      	mov	r7, r0
 8006a32:	4616      	mov	r6, r2
 8006a34:	f109 0501 	add.w	r5, r9, #1
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	db32      	blt.n	8006aa2 <__lshift+0x86>
 8006a3c:	4638      	mov	r0, r7
 8006a3e:	f7ff fdee 	bl	800661e <_Balloc>
 8006a42:	2300      	movs	r3, #0
 8006a44:	4680      	mov	r8, r0
 8006a46:	f100 0114 	add.w	r1, r0, #20
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	4553      	cmp	r3, sl
 8006a4e:	db2b      	blt.n	8006aa8 <__lshift+0x8c>
 8006a50:	6920      	ldr	r0, [r4, #16]
 8006a52:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006a56:	f104 0314 	add.w	r3, r4, #20
 8006a5a:	f016 021f 	ands.w	r2, r6, #31
 8006a5e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006a62:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006a66:	d025      	beq.n	8006ab4 <__lshift+0x98>
 8006a68:	f1c2 0e20 	rsb	lr, r2, #32
 8006a6c:	2000      	movs	r0, #0
 8006a6e:	681e      	ldr	r6, [r3, #0]
 8006a70:	468a      	mov	sl, r1
 8006a72:	4096      	lsls	r6, r2
 8006a74:	4330      	orrs	r0, r6
 8006a76:	f84a 0b04 	str.w	r0, [sl], #4
 8006a7a:	f853 0b04 	ldr.w	r0, [r3], #4
 8006a7e:	459c      	cmp	ip, r3
 8006a80:	fa20 f00e 	lsr.w	r0, r0, lr
 8006a84:	d814      	bhi.n	8006ab0 <__lshift+0x94>
 8006a86:	6048      	str	r0, [r1, #4]
 8006a88:	b108      	cbz	r0, 8006a8e <__lshift+0x72>
 8006a8a:	f109 0502 	add.w	r5, r9, #2
 8006a8e:	3d01      	subs	r5, #1
 8006a90:	4638      	mov	r0, r7
 8006a92:	f8c8 5010 	str.w	r5, [r8, #16]
 8006a96:	4621      	mov	r1, r4
 8006a98:	f7ff fdf5 	bl	8006686 <_Bfree>
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa2:	3101      	adds	r1, #1
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	e7c7      	b.n	8006a38 <__lshift+0x1c>
 8006aa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006aac:	3301      	adds	r3, #1
 8006aae:	e7cd      	b.n	8006a4c <__lshift+0x30>
 8006ab0:	4651      	mov	r1, sl
 8006ab2:	e7dc      	b.n	8006a6e <__lshift+0x52>
 8006ab4:	3904      	subs	r1, #4
 8006ab6:	f853 2b04 	ldr.w	r2, [r3], #4
 8006aba:	f841 2f04 	str.w	r2, [r1, #4]!
 8006abe:	459c      	cmp	ip, r3
 8006ac0:	d8f9      	bhi.n	8006ab6 <__lshift+0x9a>
 8006ac2:	e7e4      	b.n	8006a8e <__lshift+0x72>

08006ac4 <__mcmp>:
 8006ac4:	6903      	ldr	r3, [r0, #16]
 8006ac6:	690a      	ldr	r2, [r1, #16]
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	b530      	push	{r4, r5, lr}
 8006acc:	d10c      	bne.n	8006ae8 <__mcmp+0x24>
 8006ace:	0092      	lsls	r2, r2, #2
 8006ad0:	3014      	adds	r0, #20
 8006ad2:	3114      	adds	r1, #20
 8006ad4:	1884      	adds	r4, r0, r2
 8006ad6:	4411      	add	r1, r2
 8006ad8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006adc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006ae0:	4295      	cmp	r5, r2
 8006ae2:	d003      	beq.n	8006aec <__mcmp+0x28>
 8006ae4:	d305      	bcc.n	8006af2 <__mcmp+0x2e>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4618      	mov	r0, r3
 8006aea:	bd30      	pop	{r4, r5, pc}
 8006aec:	42a0      	cmp	r0, r4
 8006aee:	d3f3      	bcc.n	8006ad8 <__mcmp+0x14>
 8006af0:	e7fa      	b.n	8006ae8 <__mcmp+0x24>
 8006af2:	f04f 33ff 	mov.w	r3, #4294967295
 8006af6:	e7f7      	b.n	8006ae8 <__mcmp+0x24>

08006af8 <__mdiff>:
 8006af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006afc:	460d      	mov	r5, r1
 8006afe:	4607      	mov	r7, r0
 8006b00:	4611      	mov	r1, r2
 8006b02:	4628      	mov	r0, r5
 8006b04:	4614      	mov	r4, r2
 8006b06:	f7ff ffdd 	bl	8006ac4 <__mcmp>
 8006b0a:	1e06      	subs	r6, r0, #0
 8006b0c:	d108      	bne.n	8006b20 <__mdiff+0x28>
 8006b0e:	4631      	mov	r1, r6
 8006b10:	4638      	mov	r0, r7
 8006b12:	f7ff fd84 	bl	800661e <_Balloc>
 8006b16:	2301      	movs	r3, #1
 8006b18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	bfa4      	itt	ge
 8006b22:	4623      	movge	r3, r4
 8006b24:	462c      	movge	r4, r5
 8006b26:	4638      	mov	r0, r7
 8006b28:	6861      	ldr	r1, [r4, #4]
 8006b2a:	bfa6      	itte	ge
 8006b2c:	461d      	movge	r5, r3
 8006b2e:	2600      	movge	r6, #0
 8006b30:	2601      	movlt	r6, #1
 8006b32:	f7ff fd74 	bl	800661e <_Balloc>
 8006b36:	692b      	ldr	r3, [r5, #16]
 8006b38:	60c6      	str	r6, [r0, #12]
 8006b3a:	6926      	ldr	r6, [r4, #16]
 8006b3c:	f105 0914 	add.w	r9, r5, #20
 8006b40:	f104 0214 	add.w	r2, r4, #20
 8006b44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006b48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006b4c:	f100 0514 	add.w	r5, r0, #20
 8006b50:	f04f 0e00 	mov.w	lr, #0
 8006b54:	f852 ab04 	ldr.w	sl, [r2], #4
 8006b58:	f859 4b04 	ldr.w	r4, [r9], #4
 8006b5c:	fa1e f18a 	uxtah	r1, lr, sl
 8006b60:	b2a3      	uxth	r3, r4
 8006b62:	1ac9      	subs	r1, r1, r3
 8006b64:	0c23      	lsrs	r3, r4, #16
 8006b66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006b6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006b6e:	b289      	uxth	r1, r1
 8006b70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006b74:	45c8      	cmp	r8, r9
 8006b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006b7a:	4694      	mov	ip, r2
 8006b7c:	f845 3b04 	str.w	r3, [r5], #4
 8006b80:	d8e8      	bhi.n	8006b54 <__mdiff+0x5c>
 8006b82:	45bc      	cmp	ip, r7
 8006b84:	d304      	bcc.n	8006b90 <__mdiff+0x98>
 8006b86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006b8a:	b183      	cbz	r3, 8006bae <__mdiff+0xb6>
 8006b8c:	6106      	str	r6, [r0, #16]
 8006b8e:	e7c5      	b.n	8006b1c <__mdiff+0x24>
 8006b90:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006b94:	fa1e f381 	uxtah	r3, lr, r1
 8006b98:	141a      	asrs	r2, r3, #16
 8006b9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ba4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006ba8:	f845 3b04 	str.w	r3, [r5], #4
 8006bac:	e7e9      	b.n	8006b82 <__mdiff+0x8a>
 8006bae:	3e01      	subs	r6, #1
 8006bb0:	e7e9      	b.n	8006b86 <__mdiff+0x8e>
	...

08006bb4 <__ulp>:
 8006bb4:	4b12      	ldr	r3, [pc, #72]	; (8006c00 <__ulp+0x4c>)
 8006bb6:	ee10 2a90 	vmov	r2, s1
 8006bba:	401a      	ands	r2, r3
 8006bbc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	dd04      	ble.n	8006bce <__ulp+0x1a>
 8006bc4:	2000      	movs	r0, #0
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	ec41 0b10 	vmov	d0, r0, r1
 8006bcc:	4770      	bx	lr
 8006bce:	425b      	negs	r3, r3
 8006bd0:	151b      	asrs	r3, r3, #20
 8006bd2:	2b13      	cmp	r3, #19
 8006bd4:	f04f 0000 	mov.w	r0, #0
 8006bd8:	f04f 0100 	mov.w	r1, #0
 8006bdc:	dc04      	bgt.n	8006be8 <__ulp+0x34>
 8006bde:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006be2:	fa42 f103 	asr.w	r1, r2, r3
 8006be6:	e7ef      	b.n	8006bc8 <__ulp+0x14>
 8006be8:	3b14      	subs	r3, #20
 8006bea:	2b1e      	cmp	r3, #30
 8006bec:	f04f 0201 	mov.w	r2, #1
 8006bf0:	bfda      	itte	le
 8006bf2:	f1c3 031f 	rsble	r3, r3, #31
 8006bf6:	fa02 f303 	lslle.w	r3, r2, r3
 8006bfa:	4613      	movgt	r3, r2
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	e7e3      	b.n	8006bc8 <__ulp+0x14>
 8006c00:	7ff00000 	.word	0x7ff00000

08006c04 <__b2d>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	6905      	ldr	r5, [r0, #16]
 8006c08:	f100 0714 	add.w	r7, r0, #20
 8006c0c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006c10:	1f2e      	subs	r6, r5, #4
 8006c12:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff fdc5 	bl	80067a6 <__hi0bits>
 8006c1c:	f1c0 0320 	rsb	r3, r0, #32
 8006c20:	280a      	cmp	r0, #10
 8006c22:	600b      	str	r3, [r1, #0]
 8006c24:	f8df c074 	ldr.w	ip, [pc, #116]	; 8006c9c <__b2d+0x98>
 8006c28:	dc14      	bgt.n	8006c54 <__b2d+0x50>
 8006c2a:	f1c0 0e0b 	rsb	lr, r0, #11
 8006c2e:	fa24 f10e 	lsr.w	r1, r4, lr
 8006c32:	42b7      	cmp	r7, r6
 8006c34:	ea41 030c 	orr.w	r3, r1, ip
 8006c38:	bf34      	ite	cc
 8006c3a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006c3e:	2100      	movcs	r1, #0
 8006c40:	3015      	adds	r0, #21
 8006c42:	fa04 f000 	lsl.w	r0, r4, r0
 8006c46:	fa21 f10e 	lsr.w	r1, r1, lr
 8006c4a:	ea40 0201 	orr.w	r2, r0, r1
 8006c4e:	ec43 2b10 	vmov	d0, r2, r3
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	42b7      	cmp	r7, r6
 8006c56:	bf3a      	itte	cc
 8006c58:	f1a5 0608 	subcc.w	r6, r5, #8
 8006c5c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006c60:	2100      	movcs	r1, #0
 8006c62:	380b      	subs	r0, #11
 8006c64:	d015      	beq.n	8006c92 <__b2d+0x8e>
 8006c66:	4084      	lsls	r4, r0
 8006c68:	f1c0 0520 	rsb	r5, r0, #32
 8006c6c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006c70:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006c74:	42be      	cmp	r6, r7
 8006c76:	fa21 fc05 	lsr.w	ip, r1, r5
 8006c7a:	ea44 030c 	orr.w	r3, r4, ip
 8006c7e:	bf8c      	ite	hi
 8006c80:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8006c84:	2400      	movls	r4, #0
 8006c86:	fa01 f000 	lsl.w	r0, r1, r0
 8006c8a:	40ec      	lsrs	r4, r5
 8006c8c:	ea40 0204 	orr.w	r2, r0, r4
 8006c90:	e7dd      	b.n	8006c4e <__b2d+0x4a>
 8006c92:	ea44 030c 	orr.w	r3, r4, ip
 8006c96:	460a      	mov	r2, r1
 8006c98:	e7d9      	b.n	8006c4e <__b2d+0x4a>
 8006c9a:	bf00      	nop
 8006c9c:	3ff00000 	.word	0x3ff00000

08006ca0 <__d2b>:
 8006ca0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	ec59 8b10 	vmov	r8, r9, d0
 8006cac:	4615      	mov	r5, r2
 8006cae:	f7ff fcb6 	bl	800661e <_Balloc>
 8006cb2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006cb6:	4607      	mov	r7, r0
 8006cb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006cbc:	bb34      	cbnz	r4, 8006d0c <__d2b+0x6c>
 8006cbe:	9301      	str	r3, [sp, #4]
 8006cc0:	f1b8 0300 	subs.w	r3, r8, #0
 8006cc4:	d027      	beq.n	8006d16 <__d2b+0x76>
 8006cc6:	a802      	add	r0, sp, #8
 8006cc8:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006ccc:	f7ff fd8a 	bl	80067e4 <__lo0bits>
 8006cd0:	9900      	ldr	r1, [sp, #0]
 8006cd2:	b1f0      	cbz	r0, 8006d12 <__d2b+0x72>
 8006cd4:	9a01      	ldr	r2, [sp, #4]
 8006cd6:	f1c0 0320 	rsb	r3, r0, #32
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	430b      	orrs	r3, r1
 8006ce0:	40c2      	lsrs	r2, r0
 8006ce2:	617b      	str	r3, [r7, #20]
 8006ce4:	9201      	str	r2, [sp, #4]
 8006ce6:	9b01      	ldr	r3, [sp, #4]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	bf14      	ite	ne
 8006cee:	2102      	movne	r1, #2
 8006cf0:	2101      	moveq	r1, #1
 8006cf2:	6139      	str	r1, [r7, #16]
 8006cf4:	b1c4      	cbz	r4, 8006d28 <__d2b+0x88>
 8006cf6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006cfa:	4404      	add	r4, r0
 8006cfc:	6034      	str	r4, [r6, #0]
 8006cfe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006d02:	6028      	str	r0, [r5, #0]
 8006d04:	4638      	mov	r0, r7
 8006d06:	b003      	add	sp, #12
 8006d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d10:	e7d5      	b.n	8006cbe <__d2b+0x1e>
 8006d12:	6179      	str	r1, [r7, #20]
 8006d14:	e7e7      	b.n	8006ce6 <__d2b+0x46>
 8006d16:	a801      	add	r0, sp, #4
 8006d18:	f7ff fd64 	bl	80067e4 <__lo0bits>
 8006d1c:	9b01      	ldr	r3, [sp, #4]
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	2101      	movs	r1, #1
 8006d22:	6139      	str	r1, [r7, #16]
 8006d24:	3020      	adds	r0, #32
 8006d26:	e7e5      	b.n	8006cf4 <__d2b+0x54>
 8006d28:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006d2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006d30:	6030      	str	r0, [r6, #0]
 8006d32:	6918      	ldr	r0, [r3, #16]
 8006d34:	f7ff fd37 	bl	80067a6 <__hi0bits>
 8006d38:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006d3c:	e7e1      	b.n	8006d02 <__d2b+0x62>

08006d3e <__ratio>:
 8006d3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d42:	4688      	mov	r8, r1
 8006d44:	4669      	mov	r1, sp
 8006d46:	4681      	mov	r9, r0
 8006d48:	f7ff ff5c 	bl	8006c04 <__b2d>
 8006d4c:	a901      	add	r1, sp, #4
 8006d4e:	4640      	mov	r0, r8
 8006d50:	ec57 6b10 	vmov	r6, r7, d0
 8006d54:	f7ff ff56 	bl	8006c04 <__b2d>
 8006d58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006d5c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006d60:	eba3 0c02 	sub.w	ip, r3, r2
 8006d64:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006d68:	1a9b      	subs	r3, r3, r2
 8006d6a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006d6e:	ec5b ab10 	vmov	sl, fp, d0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfce      	itee	gt
 8006d76:	463a      	movgt	r2, r7
 8006d78:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006d7c:	465a      	movle	r2, fp
 8006d7e:	4659      	mov	r1, fp
 8006d80:	463d      	mov	r5, r7
 8006d82:	bfd4      	ite	le
 8006d84:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8006d88:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8006d8c:	4630      	mov	r0, r6
 8006d8e:	ee10 2a10 	vmov	r2, s0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4629      	mov	r1, r5
 8006d96:	f7f9 fd59 	bl	800084c <__aeabi_ddiv>
 8006d9a:	ec41 0b10 	vmov	d0, r0, r1
 8006d9e:	b003      	add	sp, #12
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006da4 <__copybits>:
 8006da4:	3901      	subs	r1, #1
 8006da6:	b510      	push	{r4, lr}
 8006da8:	1149      	asrs	r1, r1, #5
 8006daa:	6914      	ldr	r4, [r2, #16]
 8006dac:	3101      	adds	r1, #1
 8006dae:	f102 0314 	add.w	r3, r2, #20
 8006db2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006db6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006dba:	42a3      	cmp	r3, r4
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	d303      	bcc.n	8006dc8 <__copybits+0x24>
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	428a      	cmp	r2, r1
 8006dc4:	d305      	bcc.n	8006dd2 <__copybits+0x2e>
 8006dc6:	bd10      	pop	{r4, pc}
 8006dc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dcc:	f840 2b04 	str.w	r2, [r0], #4
 8006dd0:	e7f3      	b.n	8006dba <__copybits+0x16>
 8006dd2:	f842 3b04 	str.w	r3, [r2], #4
 8006dd6:	e7f4      	b.n	8006dc2 <__copybits+0x1e>

08006dd8 <__any_on>:
 8006dd8:	f100 0214 	add.w	r2, r0, #20
 8006ddc:	6900      	ldr	r0, [r0, #16]
 8006dde:	114b      	asrs	r3, r1, #5
 8006de0:	4298      	cmp	r0, r3
 8006de2:	b510      	push	{r4, lr}
 8006de4:	db11      	blt.n	8006e0a <__any_on+0x32>
 8006de6:	dd0a      	ble.n	8006dfe <__any_on+0x26>
 8006de8:	f011 011f 	ands.w	r1, r1, #31
 8006dec:	d007      	beq.n	8006dfe <__any_on+0x26>
 8006dee:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006df2:	fa24 f001 	lsr.w	r0, r4, r1
 8006df6:	fa00 f101 	lsl.w	r1, r0, r1
 8006dfa:	428c      	cmp	r4, r1
 8006dfc:	d10b      	bne.n	8006e16 <__any_on+0x3e>
 8006dfe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d803      	bhi.n	8006e0e <__any_on+0x36>
 8006e06:	2000      	movs	r0, #0
 8006e08:	bd10      	pop	{r4, pc}
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	e7f7      	b.n	8006dfe <__any_on+0x26>
 8006e0e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006e12:	2900      	cmp	r1, #0
 8006e14:	d0f5      	beq.n	8006e02 <__any_on+0x2a>
 8006e16:	2001      	movs	r0, #1
 8006e18:	e7f6      	b.n	8006e08 <__any_on+0x30>

08006e1a <_calloc_r>:
 8006e1a:	b538      	push	{r3, r4, r5, lr}
 8006e1c:	fb02 f401 	mul.w	r4, r2, r1
 8006e20:	4621      	mov	r1, r4
 8006e22:	f000 f857 	bl	8006ed4 <_malloc_r>
 8006e26:	4605      	mov	r5, r0
 8006e28:	b118      	cbz	r0, 8006e32 <_calloc_r+0x18>
 8006e2a:	4622      	mov	r2, r4
 8006e2c:	2100      	movs	r1, #0
 8006e2e:	f7fc fd37 	bl	80038a0 <memset>
 8006e32:	4628      	mov	r0, r5
 8006e34:	bd38      	pop	{r3, r4, r5, pc}
	...

08006e38 <_free_r>:
 8006e38:	b538      	push	{r3, r4, r5, lr}
 8006e3a:	4605      	mov	r5, r0
 8006e3c:	2900      	cmp	r1, #0
 8006e3e:	d045      	beq.n	8006ecc <_free_r+0x94>
 8006e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e44:	1f0c      	subs	r4, r1, #4
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	bfb8      	it	lt
 8006e4a:	18e4      	addlt	r4, r4, r3
 8006e4c:	f000 fa36 	bl	80072bc <__malloc_lock>
 8006e50:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <_free_r+0x98>)
 8006e52:	6813      	ldr	r3, [r2, #0]
 8006e54:	4610      	mov	r0, r2
 8006e56:	b933      	cbnz	r3, 8006e66 <_free_r+0x2e>
 8006e58:	6063      	str	r3, [r4, #4]
 8006e5a:	6014      	str	r4, [r2, #0]
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e62:	f000 ba2c 	b.w	80072be <__malloc_unlock>
 8006e66:	42a3      	cmp	r3, r4
 8006e68:	d90c      	bls.n	8006e84 <_free_r+0x4c>
 8006e6a:	6821      	ldr	r1, [r4, #0]
 8006e6c:	1862      	adds	r2, r4, r1
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bf04      	itt	eq
 8006e72:	681a      	ldreq	r2, [r3, #0]
 8006e74:	685b      	ldreq	r3, [r3, #4]
 8006e76:	6063      	str	r3, [r4, #4]
 8006e78:	bf04      	itt	eq
 8006e7a:	1852      	addeq	r2, r2, r1
 8006e7c:	6022      	streq	r2, [r4, #0]
 8006e7e:	6004      	str	r4, [r0, #0]
 8006e80:	e7ec      	b.n	8006e5c <_free_r+0x24>
 8006e82:	4613      	mov	r3, r2
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	b10a      	cbz	r2, 8006e8c <_free_r+0x54>
 8006e88:	42a2      	cmp	r2, r4
 8006e8a:	d9fa      	bls.n	8006e82 <_free_r+0x4a>
 8006e8c:	6819      	ldr	r1, [r3, #0]
 8006e8e:	1858      	adds	r0, r3, r1
 8006e90:	42a0      	cmp	r0, r4
 8006e92:	d10b      	bne.n	8006eac <_free_r+0x74>
 8006e94:	6820      	ldr	r0, [r4, #0]
 8006e96:	4401      	add	r1, r0
 8006e98:	1858      	adds	r0, r3, r1
 8006e9a:	4282      	cmp	r2, r0
 8006e9c:	6019      	str	r1, [r3, #0]
 8006e9e:	d1dd      	bne.n	8006e5c <_free_r+0x24>
 8006ea0:	6810      	ldr	r0, [r2, #0]
 8006ea2:	6852      	ldr	r2, [r2, #4]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	4401      	add	r1, r0
 8006ea8:	6019      	str	r1, [r3, #0]
 8006eaa:	e7d7      	b.n	8006e5c <_free_r+0x24>
 8006eac:	d902      	bls.n	8006eb4 <_free_r+0x7c>
 8006eae:	230c      	movs	r3, #12
 8006eb0:	602b      	str	r3, [r5, #0]
 8006eb2:	e7d3      	b.n	8006e5c <_free_r+0x24>
 8006eb4:	6820      	ldr	r0, [r4, #0]
 8006eb6:	1821      	adds	r1, r4, r0
 8006eb8:	428a      	cmp	r2, r1
 8006eba:	bf04      	itt	eq
 8006ebc:	6811      	ldreq	r1, [r2, #0]
 8006ebe:	6852      	ldreq	r2, [r2, #4]
 8006ec0:	6062      	str	r2, [r4, #4]
 8006ec2:	bf04      	itt	eq
 8006ec4:	1809      	addeq	r1, r1, r0
 8006ec6:	6021      	streq	r1, [r4, #0]
 8006ec8:	605c      	str	r4, [r3, #4]
 8006eca:	e7c7      	b.n	8006e5c <_free_r+0x24>
 8006ecc:	bd38      	pop	{r3, r4, r5, pc}
 8006ece:	bf00      	nop
 8006ed0:	200001fc 	.word	0x200001fc

08006ed4 <_malloc_r>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	1ccd      	adds	r5, r1, #3
 8006ed8:	f025 0503 	bic.w	r5, r5, #3
 8006edc:	3508      	adds	r5, #8
 8006ede:	2d0c      	cmp	r5, #12
 8006ee0:	bf38      	it	cc
 8006ee2:	250c      	movcc	r5, #12
 8006ee4:	2d00      	cmp	r5, #0
 8006ee6:	4606      	mov	r6, r0
 8006ee8:	db01      	blt.n	8006eee <_malloc_r+0x1a>
 8006eea:	42a9      	cmp	r1, r5
 8006eec:	d903      	bls.n	8006ef6 <_malloc_r+0x22>
 8006eee:	230c      	movs	r3, #12
 8006ef0:	6033      	str	r3, [r6, #0]
 8006ef2:	2000      	movs	r0, #0
 8006ef4:	bd70      	pop	{r4, r5, r6, pc}
 8006ef6:	f000 f9e1 	bl	80072bc <__malloc_lock>
 8006efa:	4a21      	ldr	r2, [pc, #132]	; (8006f80 <_malloc_r+0xac>)
 8006efc:	6814      	ldr	r4, [r2, #0]
 8006efe:	4621      	mov	r1, r4
 8006f00:	b991      	cbnz	r1, 8006f28 <_malloc_r+0x54>
 8006f02:	4c20      	ldr	r4, [pc, #128]	; (8006f84 <_malloc_r+0xb0>)
 8006f04:	6823      	ldr	r3, [r4, #0]
 8006f06:	b91b      	cbnz	r3, 8006f10 <_malloc_r+0x3c>
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 f98f 	bl	800722c <_sbrk_r>
 8006f0e:	6020      	str	r0, [r4, #0]
 8006f10:	4629      	mov	r1, r5
 8006f12:	4630      	mov	r0, r6
 8006f14:	f000 f98a 	bl	800722c <_sbrk_r>
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	d124      	bne.n	8006f66 <_malloc_r+0x92>
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	6033      	str	r3, [r6, #0]
 8006f20:	4630      	mov	r0, r6
 8006f22:	f000 f9cc 	bl	80072be <__malloc_unlock>
 8006f26:	e7e4      	b.n	8006ef2 <_malloc_r+0x1e>
 8006f28:	680b      	ldr	r3, [r1, #0]
 8006f2a:	1b5b      	subs	r3, r3, r5
 8006f2c:	d418      	bmi.n	8006f60 <_malloc_r+0x8c>
 8006f2e:	2b0b      	cmp	r3, #11
 8006f30:	d90f      	bls.n	8006f52 <_malloc_r+0x7e>
 8006f32:	600b      	str	r3, [r1, #0]
 8006f34:	50cd      	str	r5, [r1, r3]
 8006f36:	18cc      	adds	r4, r1, r3
 8006f38:	4630      	mov	r0, r6
 8006f3a:	f000 f9c0 	bl	80072be <__malloc_unlock>
 8006f3e:	f104 000b 	add.w	r0, r4, #11
 8006f42:	1d23      	adds	r3, r4, #4
 8006f44:	f020 0007 	bic.w	r0, r0, #7
 8006f48:	1ac3      	subs	r3, r0, r3
 8006f4a:	d0d3      	beq.n	8006ef4 <_malloc_r+0x20>
 8006f4c:	425a      	negs	r2, r3
 8006f4e:	50e2      	str	r2, [r4, r3]
 8006f50:	e7d0      	b.n	8006ef4 <_malloc_r+0x20>
 8006f52:	428c      	cmp	r4, r1
 8006f54:	684b      	ldr	r3, [r1, #4]
 8006f56:	bf16      	itet	ne
 8006f58:	6063      	strne	r3, [r4, #4]
 8006f5a:	6013      	streq	r3, [r2, #0]
 8006f5c:	460c      	movne	r4, r1
 8006f5e:	e7eb      	b.n	8006f38 <_malloc_r+0x64>
 8006f60:	460c      	mov	r4, r1
 8006f62:	6849      	ldr	r1, [r1, #4]
 8006f64:	e7cc      	b.n	8006f00 <_malloc_r+0x2c>
 8006f66:	1cc4      	adds	r4, r0, #3
 8006f68:	f024 0403 	bic.w	r4, r4, #3
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	d005      	beq.n	8006f7c <_malloc_r+0xa8>
 8006f70:	1a21      	subs	r1, r4, r0
 8006f72:	4630      	mov	r0, r6
 8006f74:	f000 f95a 	bl	800722c <_sbrk_r>
 8006f78:	3001      	adds	r0, #1
 8006f7a:	d0cf      	beq.n	8006f1c <_malloc_r+0x48>
 8006f7c:	6025      	str	r5, [r4, #0]
 8006f7e:	e7db      	b.n	8006f38 <_malloc_r+0x64>
 8006f80:	200001fc 	.word	0x200001fc
 8006f84:	20000200 	.word	0x20000200

08006f88 <__ssputs_r>:
 8006f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f8c:	688e      	ldr	r6, [r1, #8]
 8006f8e:	429e      	cmp	r6, r3
 8006f90:	4682      	mov	sl, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	4690      	mov	r8, r2
 8006f96:	4699      	mov	r9, r3
 8006f98:	d837      	bhi.n	800700a <__ssputs_r+0x82>
 8006f9a:	898a      	ldrh	r2, [r1, #12]
 8006f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fa0:	d031      	beq.n	8007006 <__ssputs_r+0x7e>
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	6909      	ldr	r1, [r1, #16]
 8006fa6:	1a6f      	subs	r7, r5, r1
 8006fa8:	6965      	ldr	r5, [r4, #20]
 8006faa:	2302      	movs	r3, #2
 8006fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006fb0:	fb95 f5f3 	sdiv	r5, r5, r3
 8006fb4:	f109 0301 	add.w	r3, r9, #1
 8006fb8:	443b      	add	r3, r7
 8006fba:	429d      	cmp	r5, r3
 8006fbc:	bf38      	it	cc
 8006fbe:	461d      	movcc	r5, r3
 8006fc0:	0553      	lsls	r3, r2, #21
 8006fc2:	d530      	bpl.n	8007026 <__ssputs_r+0x9e>
 8006fc4:	4629      	mov	r1, r5
 8006fc6:	f7ff ff85 	bl	8006ed4 <_malloc_r>
 8006fca:	4606      	mov	r6, r0
 8006fcc:	b950      	cbnz	r0, 8006fe4 <__ssputs_r+0x5c>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	f8ca 3000 	str.w	r3, [sl]
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe4:	463a      	mov	r2, r7
 8006fe6:	6921      	ldr	r1, [r4, #16]
 8006fe8:	f7ff fb0e 	bl	8006608 <memcpy>
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	6126      	str	r6, [r4, #16]
 8006ffa:	6165      	str	r5, [r4, #20]
 8006ffc:	443e      	add	r6, r7
 8006ffe:	1bed      	subs	r5, r5, r7
 8007000:	6026      	str	r6, [r4, #0]
 8007002:	60a5      	str	r5, [r4, #8]
 8007004:	464e      	mov	r6, r9
 8007006:	454e      	cmp	r6, r9
 8007008:	d900      	bls.n	800700c <__ssputs_r+0x84>
 800700a:	464e      	mov	r6, r9
 800700c:	4632      	mov	r2, r6
 800700e:	4641      	mov	r1, r8
 8007010:	6820      	ldr	r0, [r4, #0]
 8007012:	f000 f93a 	bl	800728a <memmove>
 8007016:	68a3      	ldr	r3, [r4, #8]
 8007018:	1b9b      	subs	r3, r3, r6
 800701a:	60a3      	str	r3, [r4, #8]
 800701c:	6823      	ldr	r3, [r4, #0]
 800701e:	441e      	add	r6, r3
 8007020:	6026      	str	r6, [r4, #0]
 8007022:	2000      	movs	r0, #0
 8007024:	e7dc      	b.n	8006fe0 <__ssputs_r+0x58>
 8007026:	462a      	mov	r2, r5
 8007028:	f000 f94a 	bl	80072c0 <_realloc_r>
 800702c:	4606      	mov	r6, r0
 800702e:	2800      	cmp	r0, #0
 8007030:	d1e2      	bne.n	8006ff8 <__ssputs_r+0x70>
 8007032:	6921      	ldr	r1, [r4, #16]
 8007034:	4650      	mov	r0, sl
 8007036:	f7ff feff 	bl	8006e38 <_free_r>
 800703a:	e7c8      	b.n	8006fce <__ssputs_r+0x46>

0800703c <_svfiprintf_r>:
 800703c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007040:	461d      	mov	r5, r3
 8007042:	898b      	ldrh	r3, [r1, #12]
 8007044:	061f      	lsls	r7, r3, #24
 8007046:	b09d      	sub	sp, #116	; 0x74
 8007048:	4680      	mov	r8, r0
 800704a:	460c      	mov	r4, r1
 800704c:	4616      	mov	r6, r2
 800704e:	d50f      	bpl.n	8007070 <_svfiprintf_r+0x34>
 8007050:	690b      	ldr	r3, [r1, #16]
 8007052:	b96b      	cbnz	r3, 8007070 <_svfiprintf_r+0x34>
 8007054:	2140      	movs	r1, #64	; 0x40
 8007056:	f7ff ff3d 	bl	8006ed4 <_malloc_r>
 800705a:	6020      	str	r0, [r4, #0]
 800705c:	6120      	str	r0, [r4, #16]
 800705e:	b928      	cbnz	r0, 800706c <_svfiprintf_r+0x30>
 8007060:	230c      	movs	r3, #12
 8007062:	f8c8 3000 	str.w	r3, [r8]
 8007066:	f04f 30ff 	mov.w	r0, #4294967295
 800706a:	e0c8      	b.n	80071fe <_svfiprintf_r+0x1c2>
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	6163      	str	r3, [r4, #20]
 8007070:	2300      	movs	r3, #0
 8007072:	9309      	str	r3, [sp, #36]	; 0x24
 8007074:	2320      	movs	r3, #32
 8007076:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800707a:	2330      	movs	r3, #48	; 0x30
 800707c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007080:	9503      	str	r5, [sp, #12]
 8007082:	f04f 0b01 	mov.w	fp, #1
 8007086:	4637      	mov	r7, r6
 8007088:	463d      	mov	r5, r7
 800708a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800708e:	b10b      	cbz	r3, 8007094 <_svfiprintf_r+0x58>
 8007090:	2b25      	cmp	r3, #37	; 0x25
 8007092:	d13e      	bne.n	8007112 <_svfiprintf_r+0xd6>
 8007094:	ebb7 0a06 	subs.w	sl, r7, r6
 8007098:	d00b      	beq.n	80070b2 <_svfiprintf_r+0x76>
 800709a:	4653      	mov	r3, sl
 800709c:	4632      	mov	r2, r6
 800709e:	4621      	mov	r1, r4
 80070a0:	4640      	mov	r0, r8
 80070a2:	f7ff ff71 	bl	8006f88 <__ssputs_r>
 80070a6:	3001      	adds	r0, #1
 80070a8:	f000 80a4 	beq.w	80071f4 <_svfiprintf_r+0x1b8>
 80070ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ae:	4453      	add	r3, sl
 80070b0:	9309      	str	r3, [sp, #36]	; 0x24
 80070b2:	783b      	ldrb	r3, [r7, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	f000 809d 	beq.w	80071f4 <_svfiprintf_r+0x1b8>
 80070ba:	2300      	movs	r3, #0
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295
 80070c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070cc:	931a      	str	r3, [sp, #104]	; 0x68
 80070ce:	462f      	mov	r7, r5
 80070d0:	2205      	movs	r2, #5
 80070d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80070d6:	4850      	ldr	r0, [pc, #320]	; (8007218 <_svfiprintf_r+0x1dc>)
 80070d8:	f7f9 f882 	bl	80001e0 <memchr>
 80070dc:	9b04      	ldr	r3, [sp, #16]
 80070de:	b9d0      	cbnz	r0, 8007116 <_svfiprintf_r+0xda>
 80070e0:	06d9      	lsls	r1, r3, #27
 80070e2:	bf44      	itt	mi
 80070e4:	2220      	movmi	r2, #32
 80070e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070ea:	071a      	lsls	r2, r3, #28
 80070ec:	bf44      	itt	mi
 80070ee:	222b      	movmi	r2, #43	; 0x2b
 80070f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80070f4:	782a      	ldrb	r2, [r5, #0]
 80070f6:	2a2a      	cmp	r2, #42	; 0x2a
 80070f8:	d015      	beq.n	8007126 <_svfiprintf_r+0xea>
 80070fa:	9a07      	ldr	r2, [sp, #28]
 80070fc:	462f      	mov	r7, r5
 80070fe:	2000      	movs	r0, #0
 8007100:	250a      	movs	r5, #10
 8007102:	4639      	mov	r1, r7
 8007104:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007108:	3b30      	subs	r3, #48	; 0x30
 800710a:	2b09      	cmp	r3, #9
 800710c:	d94d      	bls.n	80071aa <_svfiprintf_r+0x16e>
 800710e:	b1b8      	cbz	r0, 8007140 <_svfiprintf_r+0x104>
 8007110:	e00f      	b.n	8007132 <_svfiprintf_r+0xf6>
 8007112:	462f      	mov	r7, r5
 8007114:	e7b8      	b.n	8007088 <_svfiprintf_r+0x4c>
 8007116:	4a40      	ldr	r2, [pc, #256]	; (8007218 <_svfiprintf_r+0x1dc>)
 8007118:	1a80      	subs	r0, r0, r2
 800711a:	fa0b f000 	lsl.w	r0, fp, r0
 800711e:	4318      	orrs	r0, r3
 8007120:	9004      	str	r0, [sp, #16]
 8007122:	463d      	mov	r5, r7
 8007124:	e7d3      	b.n	80070ce <_svfiprintf_r+0x92>
 8007126:	9a03      	ldr	r2, [sp, #12]
 8007128:	1d11      	adds	r1, r2, #4
 800712a:	6812      	ldr	r2, [r2, #0]
 800712c:	9103      	str	r1, [sp, #12]
 800712e:	2a00      	cmp	r2, #0
 8007130:	db01      	blt.n	8007136 <_svfiprintf_r+0xfa>
 8007132:	9207      	str	r2, [sp, #28]
 8007134:	e004      	b.n	8007140 <_svfiprintf_r+0x104>
 8007136:	4252      	negs	r2, r2
 8007138:	f043 0302 	orr.w	r3, r3, #2
 800713c:	9207      	str	r2, [sp, #28]
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	783b      	ldrb	r3, [r7, #0]
 8007142:	2b2e      	cmp	r3, #46	; 0x2e
 8007144:	d10c      	bne.n	8007160 <_svfiprintf_r+0x124>
 8007146:	787b      	ldrb	r3, [r7, #1]
 8007148:	2b2a      	cmp	r3, #42	; 0x2a
 800714a:	d133      	bne.n	80071b4 <_svfiprintf_r+0x178>
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	1d1a      	adds	r2, r3, #4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	9203      	str	r2, [sp, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	bfb8      	it	lt
 8007158:	f04f 33ff 	movlt.w	r3, #4294967295
 800715c:	3702      	adds	r7, #2
 800715e:	9305      	str	r3, [sp, #20]
 8007160:	4d2e      	ldr	r5, [pc, #184]	; (800721c <_svfiprintf_r+0x1e0>)
 8007162:	7839      	ldrb	r1, [r7, #0]
 8007164:	2203      	movs	r2, #3
 8007166:	4628      	mov	r0, r5
 8007168:	f7f9 f83a 	bl	80001e0 <memchr>
 800716c:	b138      	cbz	r0, 800717e <_svfiprintf_r+0x142>
 800716e:	2340      	movs	r3, #64	; 0x40
 8007170:	1b40      	subs	r0, r0, r5
 8007172:	fa03 f000 	lsl.w	r0, r3, r0
 8007176:	9b04      	ldr	r3, [sp, #16]
 8007178:	4303      	orrs	r3, r0
 800717a:	3701      	adds	r7, #1
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	7839      	ldrb	r1, [r7, #0]
 8007180:	4827      	ldr	r0, [pc, #156]	; (8007220 <_svfiprintf_r+0x1e4>)
 8007182:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007186:	2206      	movs	r2, #6
 8007188:	1c7e      	adds	r6, r7, #1
 800718a:	f7f9 f829 	bl	80001e0 <memchr>
 800718e:	2800      	cmp	r0, #0
 8007190:	d038      	beq.n	8007204 <_svfiprintf_r+0x1c8>
 8007192:	4b24      	ldr	r3, [pc, #144]	; (8007224 <_svfiprintf_r+0x1e8>)
 8007194:	bb13      	cbnz	r3, 80071dc <_svfiprintf_r+0x1a0>
 8007196:	9b03      	ldr	r3, [sp, #12]
 8007198:	3307      	adds	r3, #7
 800719a:	f023 0307 	bic.w	r3, r3, #7
 800719e:	3308      	adds	r3, #8
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071a4:	444b      	add	r3, r9
 80071a6:	9309      	str	r3, [sp, #36]	; 0x24
 80071a8:	e76d      	b.n	8007086 <_svfiprintf_r+0x4a>
 80071aa:	fb05 3202 	mla	r2, r5, r2, r3
 80071ae:	2001      	movs	r0, #1
 80071b0:	460f      	mov	r7, r1
 80071b2:	e7a6      	b.n	8007102 <_svfiprintf_r+0xc6>
 80071b4:	2300      	movs	r3, #0
 80071b6:	3701      	adds	r7, #1
 80071b8:	9305      	str	r3, [sp, #20]
 80071ba:	4619      	mov	r1, r3
 80071bc:	250a      	movs	r5, #10
 80071be:	4638      	mov	r0, r7
 80071c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c4:	3a30      	subs	r2, #48	; 0x30
 80071c6:	2a09      	cmp	r2, #9
 80071c8:	d903      	bls.n	80071d2 <_svfiprintf_r+0x196>
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0c8      	beq.n	8007160 <_svfiprintf_r+0x124>
 80071ce:	9105      	str	r1, [sp, #20]
 80071d0:	e7c6      	b.n	8007160 <_svfiprintf_r+0x124>
 80071d2:	fb05 2101 	mla	r1, r5, r1, r2
 80071d6:	2301      	movs	r3, #1
 80071d8:	4607      	mov	r7, r0
 80071da:	e7f0      	b.n	80071be <_svfiprintf_r+0x182>
 80071dc:	ab03      	add	r3, sp, #12
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	4622      	mov	r2, r4
 80071e2:	4b11      	ldr	r3, [pc, #68]	; (8007228 <_svfiprintf_r+0x1ec>)
 80071e4:	a904      	add	r1, sp, #16
 80071e6:	4640      	mov	r0, r8
 80071e8:	f7fc fbf6 	bl	80039d8 <_printf_float>
 80071ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80071f0:	4681      	mov	r9, r0
 80071f2:	d1d6      	bne.n	80071a2 <_svfiprintf_r+0x166>
 80071f4:	89a3      	ldrh	r3, [r4, #12]
 80071f6:	065b      	lsls	r3, r3, #25
 80071f8:	f53f af35 	bmi.w	8007066 <_svfiprintf_r+0x2a>
 80071fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071fe:	b01d      	add	sp, #116	; 0x74
 8007200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007204:	ab03      	add	r3, sp, #12
 8007206:	9300      	str	r3, [sp, #0]
 8007208:	4622      	mov	r2, r4
 800720a:	4b07      	ldr	r3, [pc, #28]	; (8007228 <_svfiprintf_r+0x1ec>)
 800720c:	a904      	add	r1, sp, #16
 800720e:	4640      	mov	r0, r8
 8007210:	f7fc fe98 	bl	8003f44 <_printf_i>
 8007214:	e7ea      	b.n	80071ec <_svfiprintf_r+0x1b0>
 8007216:	bf00      	nop
 8007218:	0800751c 	.word	0x0800751c
 800721c:	08007522 	.word	0x08007522
 8007220:	08007526 	.word	0x08007526
 8007224:	080039d9 	.word	0x080039d9
 8007228:	08006f89 	.word	0x08006f89

0800722c <_sbrk_r>:
 800722c:	b538      	push	{r3, r4, r5, lr}
 800722e:	4c06      	ldr	r4, [pc, #24]	; (8007248 <_sbrk_r+0x1c>)
 8007230:	2300      	movs	r3, #0
 8007232:	4605      	mov	r5, r0
 8007234:	4608      	mov	r0, r1
 8007236:	6023      	str	r3, [r4, #0]
 8007238:	f7fa f95c 	bl	80014f4 <_sbrk>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	d102      	bne.n	8007246 <_sbrk_r+0x1a>
 8007240:	6823      	ldr	r3, [r4, #0]
 8007242:	b103      	cbz	r3, 8007246 <_sbrk_r+0x1a>
 8007244:	602b      	str	r3, [r5, #0]
 8007246:	bd38      	pop	{r3, r4, r5, pc}
 8007248:	20000278 	.word	0x20000278

0800724c <strncmp>:
 800724c:	b510      	push	{r4, lr}
 800724e:	b16a      	cbz	r2, 800726c <strncmp+0x20>
 8007250:	3901      	subs	r1, #1
 8007252:	1884      	adds	r4, r0, r2
 8007254:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007258:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800725c:	4293      	cmp	r3, r2
 800725e:	d103      	bne.n	8007268 <strncmp+0x1c>
 8007260:	42a0      	cmp	r0, r4
 8007262:	d001      	beq.n	8007268 <strncmp+0x1c>
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1f5      	bne.n	8007254 <strncmp+0x8>
 8007268:	1a98      	subs	r0, r3, r2
 800726a:	bd10      	pop	{r4, pc}
 800726c:	4610      	mov	r0, r2
 800726e:	e7fc      	b.n	800726a <strncmp+0x1e>

08007270 <__ascii_wctomb>:
 8007270:	b149      	cbz	r1, 8007286 <__ascii_wctomb+0x16>
 8007272:	2aff      	cmp	r2, #255	; 0xff
 8007274:	bf85      	ittet	hi
 8007276:	238a      	movhi	r3, #138	; 0x8a
 8007278:	6003      	strhi	r3, [r0, #0]
 800727a:	700a      	strbls	r2, [r1, #0]
 800727c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007280:	bf98      	it	ls
 8007282:	2001      	movls	r0, #1
 8007284:	4770      	bx	lr
 8007286:	4608      	mov	r0, r1
 8007288:	4770      	bx	lr

0800728a <memmove>:
 800728a:	4288      	cmp	r0, r1
 800728c:	b510      	push	{r4, lr}
 800728e:	eb01 0302 	add.w	r3, r1, r2
 8007292:	d807      	bhi.n	80072a4 <memmove+0x1a>
 8007294:	1e42      	subs	r2, r0, #1
 8007296:	4299      	cmp	r1, r3
 8007298:	d00a      	beq.n	80072b0 <memmove+0x26>
 800729a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800729e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80072a2:	e7f8      	b.n	8007296 <memmove+0xc>
 80072a4:	4283      	cmp	r3, r0
 80072a6:	d9f5      	bls.n	8007294 <memmove+0xa>
 80072a8:	1881      	adds	r1, r0, r2
 80072aa:	1ad2      	subs	r2, r2, r3
 80072ac:	42d3      	cmn	r3, r2
 80072ae:	d100      	bne.n	80072b2 <memmove+0x28>
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072ba:	e7f7      	b.n	80072ac <memmove+0x22>

080072bc <__malloc_lock>:
 80072bc:	4770      	bx	lr

080072be <__malloc_unlock>:
 80072be:	4770      	bx	lr

080072c0 <_realloc_r>:
 80072c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c2:	4607      	mov	r7, r0
 80072c4:	4614      	mov	r4, r2
 80072c6:	460e      	mov	r6, r1
 80072c8:	b921      	cbnz	r1, 80072d4 <_realloc_r+0x14>
 80072ca:	4611      	mov	r1, r2
 80072cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80072d0:	f7ff be00 	b.w	8006ed4 <_malloc_r>
 80072d4:	b922      	cbnz	r2, 80072e0 <_realloc_r+0x20>
 80072d6:	f7ff fdaf 	bl	8006e38 <_free_r>
 80072da:	4625      	mov	r5, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072e0:	f000 f814 	bl	800730c <_malloc_usable_size_r>
 80072e4:	42a0      	cmp	r0, r4
 80072e6:	d20f      	bcs.n	8007308 <_realloc_r+0x48>
 80072e8:	4621      	mov	r1, r4
 80072ea:	4638      	mov	r0, r7
 80072ec:	f7ff fdf2 	bl	8006ed4 <_malloc_r>
 80072f0:	4605      	mov	r5, r0
 80072f2:	2800      	cmp	r0, #0
 80072f4:	d0f2      	beq.n	80072dc <_realloc_r+0x1c>
 80072f6:	4631      	mov	r1, r6
 80072f8:	4622      	mov	r2, r4
 80072fa:	f7ff f985 	bl	8006608 <memcpy>
 80072fe:	4631      	mov	r1, r6
 8007300:	4638      	mov	r0, r7
 8007302:	f7ff fd99 	bl	8006e38 <_free_r>
 8007306:	e7e9      	b.n	80072dc <_realloc_r+0x1c>
 8007308:	4635      	mov	r5, r6
 800730a:	e7e7      	b.n	80072dc <_realloc_r+0x1c>

0800730c <_malloc_usable_size_r>:
 800730c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007310:	1f18      	subs	r0, r3, #4
 8007312:	2b00      	cmp	r3, #0
 8007314:	bfbc      	itt	lt
 8007316:	580b      	ldrlt	r3, [r1, r0]
 8007318:	18c0      	addlt	r0, r0, r3
 800731a:	4770      	bx	lr

0800731c <_init>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr

08007328 <_fini>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	bf00      	nop
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr
